<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>06/23/2020</title>
    <url>/2020/06-23-2020/</url>
    <content><![CDATA[<p>这次出院本来应该是很开心的，一切都如（甚至超出了）我所愿，但是不知道怎么的，就是觉得很平淡。什么都不想做，朋友圈都不想发，只想安安静静地躺在家里或者工作一段时间。</p>
<p>15 号住院之前，我一直在担心，这次检查到底会怎么样，会不会被要求手术，会不会还是全结肠切除+造口的结局，会不会……</p>
<p>因为我真的是被打击到了，近一年来一直在承受打击。害怕了，就像是一直在被突破底线，刚刚才鼓起勇气接受这个它，突然又来说，这样不行，还得再往下一点。如此往复了好几次好几次，以致我实在是没有信心了。</p>
<p>所以，觉得这次的住院经历太突然了，太不常规了。有点没缓过来的感觉。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>服务端开发一月记</title>
    <url>/2023/1-month-of-backend-dev/</url>
    <content><![CDATA[<p>5 月份休完陪产假，再回到公司，发现原本的小组已经整体重组，只有我一人还在工位上了。后来跟 TL 聊了一下，最后反正就是几个选项，要么跟着原来的同事一起去新的部门继续写前端，要么就做点别的事情。</p>
<p>当时我还是挺头疼的，主要是那会事情太多了，一是小满还在月子里，二是新房子还在装修，三是那段时间身体状态有一点波动（其实主要可能还是因为这个）。继续搞前端肯定是最稳的，但是我自己其实已经有点厌倦了，属于是看到前端代码就已经有点不耐烦的程度。但是对前端以外的东西又还是很感兴趣，偶尔自己写点非前端的玩意都会感到很愉快。犹豫再三，也是跟朋友家人都聊了一下，最后选择了转成服务端开发。（其实当时还有一个可能是 C++ 客户端的方向，但是因为太过陌生，加上前面说的那些现实情况，实在是有点绷不住）</p>
<p>其实我在刚毕业那会做过一段时间（半年左右？）的 Java 开发，但是那段时间基本上来说还是处于比较懵的状态，也没学到什么东西，加上后来很快就转型（基本上）全职前端，Java 服务端就荒废了。现在也算是一个从头来过。</p>
<p>到现在 7 月份，大概算下来时间过去一个多月了，也简单说下转型后的感想。</p>
<span id="more"></span>

<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>小组主要使用的语言大概是 Go 和 Python。Web 服务来说是 Go 居多，但是由于是在一个跟 AI 业务相关的小组，所以 Python 服务也不少。这一个多月下来 Go 的工作量大概占八成，python 二成的样子。</p>
<p>至于别的目前暂时就还没有接触太多，也只是粗略了解了一下业务项目的整个开发发布流程以及链条上的各种工具，还没有来得及深入学习。</p>
<h2 id="学习方式"><a href="#学习方式" class="headerlink" title="学习方式"></a>学习方式</h2><p>我大概在两年前的时候找同事借过一门视频课，学过一次 go 语言（算是入门）。但是到了要用的时候，年久失修，感觉大部分都已经还给老师了。周围同事朋友问了一圈，有个同事推荐了一个网站的课程，看了下各种知识的覆盖面还算可以，也没想太多，就花了四位数充了个年会（这大概是我毕业后对自己最大的一笔投资）。</p>
<p>充值后我就马不停蹄地开始学 Tony Bai 老师的《Go 语言第一课》，说实话这门课确实写得很好，绝对的物超所值。学习的过程中新的需求也很快就安排到了我这里来，我基本是在边学边做的情况下学完了这门课。Go 语言这门课一个星期差不多就肝完了。学完了 Go 语言后，我就打算根据工作需要，按部就班地把所有基本知识都过一遍，包括数据库、消息队列、缓存，等等。由于工作并不空闲，下班后也经常要带娃或者游戏肝日常，每天如果能学个一两章、两三章，我觉得也是不错的。</p>
<p>当然我毕竟因为花了四位数的钱，我必须对得起这笔开销。于是在学完这门课程后，就用刚学的 Go 语言写了一个命令行工具，它可以帮我把一门课程完整地下载到本地（包括文字里的图片！）并保存为 Markdown 格式，这样我就可以不用受年费会员的时间限制，提前下载好所有感兴趣的课程，无限期地学习了。项目地址<a href="https://github.com/wxsms/geekbang-downloader">在这里</a>（当然，这不是一个盗版工具，要使用它的前提是使用者有年会帐号）。</p>
<h2 id="开发体验"><a href="#开发体验" class="headerlink" title="开发体验"></a>开发体验</h2><p>以下内容为练习时间一个半月的菜鸟程序员的一家之言。先说结论：Go 语言的开发体验明显优于 JavaScript，但服务端开发的心智模型远比前端复杂，并不是一句 CRUD 可以概括的。</p>
<p>为什么说体验明显优于 JavaScript 呢，首先毫无疑问 JS 是一门历史包袱很重的语言，即使发展到今天已经做了很多优化，但依然属于是带着脚镣跳舞，没有办法随心所欲。但 Go 不一样，它比较新。另外 Go 语言的哲学是“简单”，这种哲学内涵也体现在它语言设计的方方面面。举几个例子：</p>
<ol>
<li>首先 Go 是强类型，你可能会说 TypeScript 也是强类型，但 TS 的类型体操太复杂了，Go 语言的强类型跟它相比属于是非常简单的那种，首先这一点就能够给开发体验带来质的飞跃</li>
<li>包含了很多 JavaScript 的优点，比如闭包、第一公民函数、值类型&amp;引用类型</li>
<li>也包含了一些 TypeScript 的优点，比如类型自动推断，类型后置</li>
<li>文件夹即包，同包内不需要写 import，跨包不需要写 export，大写属性即默认 export</li>
<li>没有 class，没有继承，只有 ducktype</li>
<li>……</li>
</ol>
<p>至于为什么说心智模型复杂呢，主要还是在多线程处理这件事情上。</p>
<p>前端这个领域（包括 Node.js 等一系列 JS runtime），再复杂的模块也是单个线程，代码都是线性执行的，不存在资源抢占。浏览器就不用说了，即使是 Node.js 中也没有“锁”的概念（主要是指线程锁）。Node.js 最多就是开个 Cluster 模式，多启动几个线程占满 CPU，但是每个线程之间都是独立的，完全没有交集。所以写 JS 代码的时候完全不用考虑资源抢占，一路莽到底。</p>
<p>（不过话说回来我也是现在才意识到 Node.js 到底有多牛：这家伙居然能用一条线程实现那么高的吞吐量！）</p>
<p>但是 Go 不一样：包括 Go 在内的众多服务端技术，它们有多线程（在 Go 中则是线程更轻量级的“协程 goroutine”）。任何一个变量，哪怕是一个 int，一个 bool，只要涉及到多线程读写，就会有问题。要么传统方案“加锁”，要么使用 Go 独有的 channel 方式。总之就是绕不开这个话题。</p>
<p>另外说到 channel，相比“锁”，这确实是一种很有意思的设计，也给 Go 语言增加了一些趣味。将本来复杂且易错的“锁”替换成了另一种更为直观的心智模型。这也算是一种强大的体验优化。</p>
<p>至于 Python 的体验，感觉跟写 Node.js 大差不差，以及大家永远都在吐槽的性能问题，这个就没什么好说的。</p>
<h2 id="我的工作"><a href="#我的工作" class="headerlink" title="我的工作"></a>我的工作</h2><p>由于我所在的小组不是重业务组，属于是 AI 研究团队，工作更多是各类配合 AI 同学的基础设施建设和维护，当然也会有一部分 AI 相关的业务。所以到现在为止我甚至还没写过正经的 CRUD。</p>
<p>目前接手过的工作，比如说从零开始开发某个微服务项目（Go 或 Python）并部署上线，配置网关和 K8S，开发一些实用脚本，给某个 Web 服务添加一些功能，维护某个内部使用的数据工具，以及开发它的 Go 语言版 sdk等。比较杂。有时候新的工作来了，当我没有理解它要怎么做的时候也会比较焦虑（毕竟转行）。但是在这些过程中，我还是比较快乐的，包括编码的过程都很快乐。我有很强的动力去重构我写的或者前人写的代码，可能会在不断的删代码写代码、删代码写代码循环中度过好几天，并在这过程中从各个方面反复地体验一门新语言的设计艺术，试图寻找一件事情最最优雅的解决方案。这跟两个月前写前端的时候完全不一样。感觉我又回到了大三大四那段学习前端技术的时间的充满热情、废寝忘食的状态。</p>
<p>总的来说，我还是喜欢编码这件事情的。在一个方向上呆久了可能会有点腻，但对于编码本身的兴趣目前来说依然没有任何变化。很高兴我有勇气做出了这个转行的决定，希望两年后可以成长为一个不那么菜的后端工程师，顺便多赚点钱。</p>
]]></content>
      <tags>
        <tag>go</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>2013 年终总结</title>
    <url>/2013/2013-annual-summary/</url>
    <content><![CDATA[<p>首先感谢郭凯瑞同学百忙中抽出时间接受访问，那么事不宜迟，就开始吧。</p>
<p>Q: 今年最开心的事？</p>
<p>A: 没挂科，有奖励学分。</p>
<p>Q: 这么自信能过马哲？</p>
<p>A: 那是明年的事好吧。</p>
<p>Q: 还有什么值得开心的事吗？</p>
<p>A: 身体健康。 家人朋友都健康。</p>
<p>Q: 那么最伤心的事？</p>
<p>A: 婆婆去世了。</p>
<p>Q: 有多伤心？</p>
<p>A: 很伤心。</p>
<p>Q: 还有其它不开心的事吗？</p>
<p>A: 妈妈变老了，身体毛病多，不过今年做手术治好了肠胃。</p>
<p>Q: 现在在做什么呢？</p>
<p>A: 回答问题。</p>
<p>Q: 好吧，在这之前呢？</p>
<p>A: 准备音乐鉴赏考试。</p>
<p>Q: 会难吗？</p>
<p>A: 小菜一碟，相比马哲。</p>
<p>Q: 今年的大学生涯，过得如何？</p>
<p>A: 无惊无险。</p>
<p>Q: 修了些什么课程？</p>
<p>A: 多数是专业基础课，少量专业选修和公选课。</p>
<p>Q: 感觉掌握了相应知识吗？</p>
<p>A: 我只能说没挂科。</p>
<p>Q: 有认识新的朋友吗？</p>
<p>A: 没有。</p>
<p>Q: 为什么？</p>
<p>A: 太宅了，没办法。</p>
<p>Q: 不改变一下吗？</p>
<p>A: 付诸行动总是很难的，明年再来问这个问题吧。</p>
<p>Q: 有没有坚持运动？</p>
<p>A: 坚持了一段时间，主要是慢跑。说到运动，我想起一件事。</p>
<p>Q: 什么事？</p>
<p>A: 那个体能测试，引体向上我一个也做不了，然后我让计分的同学给我记了八个。</p>
<p>Q: 真的一个也做不了吗？</p>
<p>A: 真的一个也做不了。</p>
<p>Q: 这真是羞耻啊，这么差劲，怎么找女朋友。</p>
<p>A: 我也是这么觉得的。</p>
<p>Q: 你还说谎了。</p>
<p>A: 要是早知道重在参与，这就不会发生。</p>
<p>Q: 回到朋友这个话题上吧，你希望认识多一些朋友吗？</p>
<p>A: 自然希望。</p>
<p>Q: 希望认识什么样的朋友呢？</p>
<p>A: 异性朋友。。。</p>
<p>Q: 你没有异性朋友吗？</p>
<p>A: 有，太少了。</p>
<p>Q: 多少？</p>
<p>A: 我拒绝回答这个问题。</p>
<p>Q: 好吧，那么，再回到学业上，觉得自己的专业知识水平达到了什么地步呢？</p>
<p>A: 中等略偏上吧。</p>
<p>Q: 很快就大四了，能找到工作吗？</p>
<p>A: 现在肯定是不够的，明年要加把劲，继续努力。</p>
<p>Q: 找不到工作怎么办？</p>
<p>A: 找原因吧，肯定是自己还不够好。</p>
<p>Q: 会有紧张感吗？</p>
<p>A: 有一些。</p>
<p>Q: 对今年总结一下？</p>
<p>A: 肯定是悲伤的一年。</p>
<p>Q: 对明年有什么期待？</p>
<p>A: 身体健康，六级能过，不要挂科，学习多一些专业知识，认识多一些朋友。</p>
<p>Q: 好的，时间差不多了，这次的总结就到这里吧。</p>
<p>A: 谢谢。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>2014-01-29</title>
    <url>/2014/2014-01-29/</url>
    <content><![CDATA[<p>很快就过年了。</p>
<p>回了一次赣州，小姑的生意越做越大了，店面越来越多，小时候第一次去广州好像还是在一个住房里做事，应该十多年了吧，跟着老妈参加了他们的年会，很多比我小的男孩都参加工作了，家里的两个弟弟也都在工作，唯独我还在读书，有种说不出的感觉。郭慧姐应该快生小孩了吧，罗云哥嫂子的小孩也快了，不知道会叫什么名字呢。奶奶身体好像还不错，挺好的。</p>
<p>在大姨家住了几天，大姨做的菜还是很好吃，比婆婆做的都要好吃，但是有些东西还是婆婆做的更熟悉。谢金宏读五年级了，看起来还是小时候那个样子，不过这次没有看到他哭，大概也算长大了一点。后来感冒了，很不舒服。去水东走了一次，姑奶家养了很多狗，有小狗也有老狗，婆婆家的房子还有人住，不过是租给的别人，记忆已模糊得不可辨识。</p>
<p>前天回家，昨天宅掉，今天出去走了一圈，没什么变化。最近发现自己变得犹豫了很多，不喜欢这样，一直觉得自己做起事来都是干净利落的，但这次不知道为什么。真的很抱歉，让你看到一个这么寡断的我。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>2014-11-11</title>
    <url>/2014/2014-11-11/</url>
    <content><![CDATA[<p>之前写过一篇很长的关于异形的东西，不知道为什么发不出来。可能有关键字被和谐了，但我又找不到，后来草稿不知道为什么也没有了，明明保存了的。没有了我也不想再重新写一遍了。 说一下最近看过的一些有点意思的电影。</p>
<p>先说印象比较深的，Atonement（中文名《赎罪》），其实这电影发展过程一般吧，主要的亮点是在结局，当然我也不能说太多，否则剧透了就很没意思了。当时我是很惊讶的，一部电影成功真的很靠原著小说以及剧本。这是一个悲剧，西方，二战时期，题材为爱情。另外一个亮点在于打字机的使用，作为配音是很独特的存在，当时也刚好ios有一个打字机应用（好像是靠汤姆汉克斯宣传的），所以印象比较深刻。</p>
<p>然后是李安的《色戒》，这部电影出了那么久一直没有看， 可能主要是被大多数人对它的关注点误导了，觉得看这种电影还不如去看爱情动作片。后来发现其实色戒是一部非常优秀的电影吧，只能说非常优秀。也是悲剧，中国，抗战时期，题材为爱情，谍战。其实我推荐家里人看这部电影的，比如爸妈，因为好像大家都比较喜欢看谍战剧，然而关于谍战的电影很少，也少有优秀的作品。色戒的背景内容庞大，但整部电影的视角一直限制得很小，剧情紧凑，毫不拖沓，主题突出，以小窥大，得益于李安深厚的功力。</p>
<p>后来有一段时间比较无聊，看完了《异形》系列。由于刚才说的原因，我都没兴趣多写了。反正我感触还是很深的，但电影其实拍的一般般，可能是年代的原因现在看来没什么触动。它的题材很好，期待普罗米修斯的续集。</p>
<p>说到科幻片，最近也看过一些科幻片，主要是因为之前看了阿汤哥的《明日边缘》，对科幻片的热情又高涨了。明日边缘真的是一部非常，非常，非常优秀的科幻片，我甚至觉得是我看过的最优秀的科幻片，可能有些夸张了，但就像当年看完盗梦空间以后难以抑制自己激动的心情，一定要给这部电影打满分的感觉，明日边缘也是这样的一部电影。相比于其它的外星人入侵地球的电影，明日边缘对于外星人的设想非常有意思，以至于电影也陷入了一种很特别的节奏。如果仔细想想的话，它的看似狗血的结局也是非常值得推敲的。这部电影的题材是科幻，外星人，四维空间，拯救地球。美国，未来。</p>
<p>然后还看了邓肯琼斯导演的《月球》，这部电影相比明日边缘就比较文艺了，但同样有比较特别的剧情，看似科幻片，我觉得其实是一个关于人类道德的电影。另外比较特别的一点是，这是一部独角戏（参考《我是传奇》），一般来说这种电影逼格都比较高，这部电影也是如此啦。然后它除了剧情设定以外并没有其它的比较大的亮点，所以总体感觉一般吧。美国，未来，题材为科幻，克隆。</p>
<p>另外看了《机器纪元》 以后，觉得最近的科幻片都比较探讨人性啊，都不是在往科幻片应有的路子在走。这部片子说的东西还是挺有意思的，不过剧本感觉缺少冲击力，就是没什么能让人感到眼前一亮的东西，比较平淡的电影。之前上人工智能课的时候听周密说，“人类需要完成的最后一个发明就是智能机器人”，这部电影说的就是这个啦！为了让智能机器人不成为人类的最后一个发明，人类为其设定了两个原则，一是机器人不能伤害任何生物，二是机器人不能维修自己。但是智能机器人明明比人类要智能得多，又有什么技术制定的原则能限制得了智能机器人呢。美国，未来，题材为科幻，机器人。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>2015年度总结</title>
    <url>/2016/2015-annual-summary/</url>
    <content><![CDATA[<p>2015对我来说是有喜有悲的一年。我还清楚地记得十一个月前刚过完年的时候，在上班的第一天迟到了，然后收到同事哥哥姐姐们的一桌子红包的情景，然而不知不觉就已经过去这么久了。最近生活和工作上都遇到了一点瓶颈，中午无聊的时候翻看了一下这一年下来的邮件，于是就想写点东西。</p>
<span id="more"></span>

<h3 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h3><p>2014年11月的时候我找到了大学以来的第一份正经工作（实习），岗位是前端开发，一做就是近九个月。这九个月中我从一个什么都不懂的应届生成长为了一个对社会生活有初步了解的普通人。至今当时的Leader还在拿我的语录打趣，她问我说觉得公司怎么样，答曰：“我觉得挺正规的”。可见我是有多不会说话。虽然现在也没有变得很能说，但是在大家的帮助和教导下（感激不尽），至少是有一些进步了。</p>
<p>实习阶段工作内容非常简单，只需要根据哥哥姐姐们提出的需求去完成一系列相应的任务即可。通常都是一些编写或者维护Web页面以及通用控件的任务。作为一个实习生，很多情况下我都不用对所做的东西负很多的责任，质量有大师傅们把关着呢，就算一时间做得不好也不会被责怪，师傅们会尽心尽力地进行指导。所以现在回想起来，这真是一段无忧无虑的时光。工作上没有太多的压力，不用接触业务，根据详细的需求去实现不会太难的东西，同时也有着大量学习与实践的时间。</p>
<blockquote>
<p>Hi Kairui, Jessie,</p>
<p>Welcome to join UCD as intern.</p>
</blockquote>
<p>这是我在公司收到的第一封邮件，来自当时的Leader，这其中还有一个故事。一开始我并没有给公司投递简历，而是女朋友投了，并且收到了面试通知，于是我就抱着看看的心态，跟着一起去了。后来觉得“这间公司好像还挺正规”，于是也就提出了希望试一试的请求。好在HR比较宽容，给了我一次机会，也让我做了笔试与面试。几天后就有了上面的结果，我们都被录取了。但是女朋友她同时也面试了另一间公司的实习岗，也通过了，她权衡利弊以后觉得那个地方要更适合自己，所以最后我们只好各自入职。为这件事我郁闷了好一段时间。</p>
<h3 id="毕设"><a href="#毕设" class="headerlink" title="毕设"></a>毕设</h3><p>因为全职实习的缘故，大学最后的半年时间我基本上都没有在学校度过，很久很久都没有听到过上课的钟声，也懒得跟任课老师请假。一开始还能够从学校宿舍早出晚归，后来直接就住在公司旁边了，每周回那么一两次学校。因此，我只想选一个最简单的，最不动脑的毕设，能过就行，实在是没有很多时间能投入进去。学校的毕设选题网站同样也是一个毕设，没有做完善的安全防卫，因此为了达到以上目的我还不择手段地写了一段浏览器脚本来抢题，大概就是每隔多少毫秒就给服务器发送“我要选这道题”的消息。后来比较后悔的事情是我没有及时地把这个主意分享给室友（因为是在开放选题前一两个小时的时间里想到的，而且我也不确定是不是真的能用），不然我们就都可以选到自己喜欢的题目了，而不是周末回去后发现大家都怨声载道的。</p>
<p>我的毕设内容是做一个供师生发布和选择实验课题的网站平台，实在是太简单了，导师说这种题目做出花来也就是七八十分。因此为了增加点技术含量，我使用了当时流行度还不是特别高的技术来制作它。整个过程当然是真金白银，这两个月期间我还直接或者间接地帮助了一些认识或者不认识的同学完成了他们的毕设，说请我吃饭的人最后都不知道哪里去了。后来论文得了八十六分，差点就能评优。</p>
<p>做完毕设以后，大学本科生涯就算结束了。曾经的舍友同学各奔东西。但是我觉得还不够过瘾，其实我还想读研。然而我没有得到保研的机会。也许工作一两年以后，我会有兴趣再去考一次研。</p>
<h3 id="培训"><a href="#培训" class="headerlink" title="培训"></a>培训</h3><p>大概在实习的第六个月的时候，我终于通过了公司的转正考核并且拿到OFFER，这段时间非常开心，一块大石终于落下，不至于在毕业以后回家打游戏。等待我的是毕业后长达三个月的入职培训。</p>
<p>培训的主要内容是Java以及Java Web，也是公司一贯以来的技术主流，然而并不是我非常熟悉的东西。除了在大二还是大三的时候选过一门不知所谓的Java课程，以及可以用Java来秒杀一些ACM中简单的大数题目以外，我对它几乎是没有任何印象。公司的培训有它的淘汰机制，所以我也怕被淘汰。所幸后来顺利地过去了。</p>
<p>培训进行的节奏非常快，基本是每周都要写一个对我们来说较大的Project，不睡觉也得写完。某天老师还说了一句听起来很污的话，“周六你们一起睡嘛”。然而我觉得现在好像也只有在这么紧张的节奏中才能专注于一件事情了。公司给我们提供午餐，目的就是让我们能够从早到晚呆在十七楼顶，就只专注一件事情。这段时间好像没有谁敢请假，好像一请假就要脱不知道多少节的样子。</p>
<p>在这段时间里面我认识了很多新同事，印象最深的一位同学是来自政法大学的研究生，专业是刑法。一份计算机的题目我做六十分，他能做一百分。他对知识的热情，真的让我有些无地自容。当然也还有其它非常优秀的同学，和这样的同学在一起参加培训，除了真的能学到东西以外，也能够鞭策自己。当然也还有厉害的老师，来自中科院的老师们，感觉在他们在Java世界的造诣已经成仙了。</p>
<h3 id="疾病"><a href="#疾病" class="headerlink" title="疾病"></a>疾<del></del>病</h3><p>培训结束后不久，我经历了人生的第一次手术，同时我觉得也会是整个人生历程中较为痛苦的一次。具体过程就不提了，前前后后已经经历了近四个月，至今仍未痊愈。这段时间也是一整年中情绪最为低落的时间，我有点不知道自己在做什么以及该做什么。因为在病急时选择了一间非医保定点医院，医保不给报销，到现在不仅我自己没有赚到钱不说，还花掉了妈妈的大把积蓄。妈妈为了照顾我把工作也辞掉了，她自己心力交瘁看起来也老了不少。我是真的觉得很惭愧啊，可是又不知道自己能做些什么。做一份工作赚着微薄的工资，还得了这么个折磨人的病，总是不痊愈也不知道什么时候是个头，妈妈为了我再苦再累也不会说，每当想起都觉得好忧伤。</p>
<h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>因为疾病的关系，我在培训结束正式入职后不久就请了一个多月的病假。这对我来说又是一个打击。本来应该是迅速熟悉业务进入工作状态的时间，我却不得不缺席。回来以后发现当时的同事们都已经轻车熟路，而自己依然是一问三不知。后来我被调离了原项目组，进入到了一个新的环境，重新开始一个新的项目。好在新项目使用的技术相对来说是我比较熟悉的，而且没有涉及到大量的业务逻辑，情况才慢慢好起来。</p>
<p>一开始做起来觉得没什么问题，然而功能越加越多，慢慢就觉得有些力不从心，需要重构。重构的前提是要对相关技术有相当的熟悉程度与足够的项目结构经验，然而我发现自己对稍复杂的项目就已经没有了头绪。现在看来除了写代码以外，我要学的东西真的还有很多很多。很多事情我虽然知道怎样做是不好或者不够好的，但是我却不知道应该如何把它们变得更好。</p>
<p>因为工作的缘故，能够回家的时间越来越少了。从前还有寒暑假，现在也没有了。本来我是很喜欢冬天的，但是这个冬天过得一点都不安分。时不时就成了南风天，又下雨又潮湿，气温还异常高，以至于在珠海一月份穿短袖也不是一件过分的事。</p>
<p>以上总结。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>2016-08-25</title>
    <url>/2016/2016-08-25/</url>
    <content><![CDATA[<p>今天下班路上看到一对情侣，一路欢声笑语，走在没有信号灯的斑马线上，也要往马路上面站，车流离他们不到十米吧，女生不时地尝试走向对面又马上退回，脸上带着无忧无虑笑容，男友也丝毫没有阻止的意思。</p>
<p>我在后面看着，有种奇怪的感觉。觉得，这世界上也许有些人就是注定要死得早些吧。不过，又有点希望自己也能做一个这样的人。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>2016</title>
    <url>/2017/2016/</url>
    <content><![CDATA[<p>刚刚过完了一个非常无聊的元旦。虽然像是很快过了一年的样子，但是又感觉过了很久。因为我已经想不起来年初我在做些什么了。</p>
<p>这次主要说些职业生涯和工作上的东西。其它的，想到再说。</p>
<span id="more"></span>

<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>真的要翻看以前写的每周 report 才能想起来自己上半年做了些什么，不过也都是些没多大意思的项目。比较可喜的是，目前我已经从对内支持工具开发转为了对外产品开发。也算是公司对我的一种肯定吧。</p>
<p>公司下半年好像一直在寻找传统商业模式下的新方向，也尝试了一些新的项目，我基本上都有参与。开发任务基本都可以按时保质完成，然而，目前来说，有些事情于我而言还是比较困难的。比如说思考行业未来，探索可能性等等。说到底，我对公司的业务方向（航运）还是不太感兴趣（或者说完全不感兴趣），再加上本身就不够了解，因此这种事情都是一头雾水。</p>
<p>我们干的是互联网的活，实际却跟这互联网世界相差甚远。这也是我不太满意的地方。在互联网公司工作，做的事情往往比较贴近生活，自己也能有些想法，然而，在这样一家业务深度极大的公司则不然。有种感觉就是，做什么都完全看 PM 怎么说，做完了也不清楚它的价值在哪里，工作就变成了纯粹的开发开发开发。一个项目开发完了紧接着就是下一个项目。</p>
<p>这样子，对公司来说也许足够了，但对个人来说感觉不是一种好的发展模式。不过，最大的问题还是在于兴趣。对业务不感兴趣。</p>
<p>毕业以来，加上实习期，在公司呆了也两年多了，感觉自己在渐渐成长。但，长久呆在一个地方，思维必会僵化。有时候也会想，是不是该换个环境，去看看更大的世界。</p>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>因为工作关系，主攻 Web 开发，因此，2016 年，我认为自己最大的进步是在 ES6 的学习以及组件化开发思想的学习上。</p>
<p>上半年我还是在用传统的 NG 1.x 做前端开发的，Node 也是写 ES5，那时候我还觉得，Angular 是世界上最好的前端框架，ES5 已经足够优秀，完全没有必要再去学新的东西了，一套技术可以用到死。然而拜公司强制所赐，我在一次新项目里面不得不使用 Vue 这个更轻量的东西。</p>
<p>说起来，这事也得感谢公司，人还是太容易满足。就像我现在也开始觉得，Vue 是世界上最优雅的东西，没有必要再用其它的一样。</p>
<p>不过话说回来，我这么喜欢 Vue，以至于远胜谷歌大爹的 Angular，不是空穴来风，最主要的原因是：Vue-loader 实在是非常优秀，将组件化思想以及 ES6 的使用均发挥到了目前看来较高的程度。组件化的开发体验是非常优秀的，这点真的是亲身用过才会有所感悟。</p>
<p>此外，我个人觉得，有所加分的是，Vue 是一个单人项目：只有一个作者，维护者也是作者本人。我认为，一个能力超强的人，远胜五个能力优秀的人。这也是 Vue 能够保持优雅的原因之一。</p>
<p>而 ES6，作为下一代的 JavaScript，虽然看起来大多是语法糖，但是不得不说用还是挺好用。代码量缩减了不少，莫名其妙的问题也少了许多。我个人还是比较希望 Async &#x2F; Await 早日进入标准，早日实现，这样 JS 也能真正变成优雅且好用的编程语言。如此一来，JavaScript 的天下，必将更大了。</p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>今年就年底一件大事：买房。把自己的积蓄花光了，父母的积蓄也花了不少，如今过上了吃土的日子。从前都是别人向我借钱，今天也到我跟别人借钱度日的时候。</p>
<p>不过，压力其实不大，就是这俩月会较为难过，能不能活下去就看公司按不按时发工资。</p>
<p>毕业工作一年，我好像也变成了一个无趣的人。曾经日夜鏖战天梯，如今也是要等死了才能醒悟自己身上还有一枚芒果。不过不得不承认的是，很多事情我确实没有天赋，再怎么做，也不过是熟练，熟悉。</p>
<p>前两天元旦假期的时候，过于无聊，把几件有些价值的装备卖了，到 steam 去买了几款好评游戏。100M 的网速下载是快，但我进入游戏后放弃得更快。提不起劲。</p>
<p>有时候也会觉得好笑，我从小就饱受垃圾电脑和网络所带来的痛苦，简直是苦不堪言。可为什么我到今天，进入游戏第一件事依然是把所有配置调到最低呢？</p>
<h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>新的一年，首先希望自己可以继续学习，更甚者，换个紧张些的工作环境去学习。我对目前自己的评价是：基础还行，但知识面不够广。像 React &#x2F; RN 等东西，我将标注为上半年重点学习对象。虽然 JSX 脱离了历史的进程，我不喜欢，但用的人越来越多，说明它自有好处，因此有必要深入了解一番。</p>
<p>学到的东西多了起来，我也会想自己做点什么。目前来说，Vue 的组件库太少，且质量也非常一般，是阻碍其被广泛使用的一大因素，尤其是 Vue2，因此，我有较大的冲动去开发一个基于 Boostrap 风格或 Material 风格的 Vue2 组件库。来弥补自己对开源社区贡献为 0 的尴尬。</p>
<p>CSS3 某些前沿属性是我目前的基础短板，Codepen 上面很多酷炫的作品如此亮瞎，希望可以找个时间好好学习一番。</p>
<p>希望可以多些涉及移动端开发。不要再在 Web 领域固步自封（当然，也许是通过 RN 或者其它基于 JS 的工具）。</p>
<p>希望新的一年可以赚到更多的钱，还起房贷来没那么大压力，欠父母的钱早日还清。如果还有余钱，考虑买个代步工具。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>2017</title>
    <url>/2017/2017/</url>
    <content><![CDATA[<p>今天是 2017 年的最后一个（法定）工作日。做个简单的总结。</p>
<p>先对比一下去年的自己与目标：</p>
<ul>
<li>关于工作，年初就换了。现在到了一个游戏公司（西山居）上班。对于去年吐槽最多的「业务」问题来说，如今算是彻底解决了。</li>
<li>关于学习，感觉自己从某些方面来说，是有一点进步的。</li>
<li>关于生活，今年入了两台主要设备，一台 RMBP，以及一台游戏主机。感觉都很值。</li>
</ul>
<p>大概就这些。</p>
<span id="more"></span>

<h2 id="职业"><a href="#职业" class="headerlink" title="职业"></a>职业</h2><p>现在回头想想，自己通过公交车上下班已经快一年了，每天两个小时在路上，时间真的过得很快（好在公司马上要搬）。今年全勤，加上加班时间，略有困倦。</p>
<p>今年：</p>
<ul>
<li><strong>Vue</strong> 基本上已经轻车熟路；</li>
<li>接触了 <strong>Electron</strong> 开发框架，用它负责并完成了公司的一个 H5 + Canvas 视频工具客户端项目的开发；</li>
<li>接触了 <strong>React</strong> 全家桶以及 <strong>ReactNative</strong>，目前开发时间也有一月余了，略知一二，找个时间写个系统性的学习与使用总结（算是个人技术栈上的一个突破）；</li>
<li>对<strong>前端工具链</strong>有了更加深入的理解；</li>
<li>等等……</li>
</ul>
<p>此外，工作之余，还拥有了两个（真正意义上的）开源项目：</p>
<ul>
<li><a href="https://github.com/wxsms/uiv">https://github.com/wxsms/uiv</a></li>
<li><a href="https://github.com/wxsms/vue-md-loader">https://github.com/wxsms/vue-md-loader</a></li>
</ul>
<p>第一个，组件库，是我一直想做的，今年终于算是略有小成了。从一开始非常简陋的东西，变成了现在这副模样。在用户数量逐渐增加的同时，也得到了越来越多的反馈与支持。同时，在设计与改善的过程中，我也从其它的开源项目中得到了很多启发（如 Element &#x2F; iView &#x2F; Bootstrap-Vue 等）。</p>
<p>第二个，将 Markdown 转换为 Vue 组件的 Webpack loader，是为了解决组件库项目的一个问题（文档撰写）而产生的。这个功能很普通，但它能帮我（或者跟我有类似需求的人）解决一个突出的问题。详情请看：<a href="https://wxsm.space/p/better-documents">Better Documents</a></p>
<p>开源项目的乐趣在于，开发者能够实实在在地从社区获得一些「认同感」。也就是，有人真的在使用我的项目。他们会给我提改进意见，给我贡献代码，还会对我说「谢谢」。虽然我做的事情根本微不足道，但每天看到项目的星星在一个个地变多，还是让我非常开心的事情。</p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>今年去了两次女朋友的家（五一、十一），见了家长。第二次还是跟自己这边的亲戚们一起去的，很多人。现在双方应该说是「认识了」。</p>
<p>如今很多亲戚经常会问我的事情是：结婚了没，什么时候结婚，怎么还不结婚。也许这就是顺理成章的事情，很正常。但我并没有觉得目前有这个必要（静纯应该也是这么认为的吧），现在这样不就挺好的吗。房子买了（虽然还未落定），工作正常，生活富足，过得开心，可以说现在我真的是无欲无求。所以我根本没想过「要结婚」这件事情。</p>
<p>有一点遗憾的是，公司原定的「塞班岛」旅行，后来取消了。本来我跟静纯纠结了好久才决定要去，很多东西都在准备了，结果因为工作原因不得不取消。后来补数的旅行线路，我觉得都没有这个好了，所以就干脆就没有再参与。</p>
<p>公司即将搬迁到唐家，这样一来我的生活圈子就又回到唐家了，而且还变得比一年前还更小了。不知道到时候我还能不能有买车的动力。我觉得车还是挺有必要的，没有它，不要说一线城市，在珠海这个二线城市都有点力不从心，去哪里都要担心回家的事情。而且，回家也不方便，东西带不了多，不能说走就走。</p>
<p>今年又有一些朋友从别的城市来看我了，我希望等到明年工作闲下来的时候，我也能去看看朋友。</p>
<p>老妈今年跟亲友到处游玩，我也觉得挺好的，有机会的时候就是要去玩。可惜的是我没有时间参与。前段时间比较冷，不想呆在房子里被冻僵，就买了个取暖器，后来想到家里没有，就给老妈也买了个。其实我为家里做过的事情真的很少，从现在起我要养成这样的习惯。</p>
<p>对了，如果年底发的奖金足够多，那么我今年就能还清借父母的首付了！</p>
<h2 id="爱好"><a href="#爱好" class="headerlink" title="爱好"></a>爱好</h2><p>今年买的最值的一样东西就是 MacBook Pro (Retina, 13-inch, Early 2015)，基本替代了我办公室的台式电脑。原因有几：</p>
<ul>
<li>对于非 MS 系开发者来说，比 Windows 简单、易用、好用；</li>
<li>ReactNative 开发时可以进行 Emulator 调试；</li>
<li>软件齐全，且非常「干净」；</li>
<li>速度飞快；</li>
<li>屏幕好看。</li>
</ul>
<p>13 寸也是我非常喜欢的尺寸，极度轻便，搭配 Retina 屏幕，不要太完美。</p>
<p>此外，自己动手组装了一台游戏主机，花了大概 6k，自从那时开始，打开游戏第一件事，分辨率 MAX，特效 MAX，毫无压力（当然是对我的垃圾 1080P 来说）。再此外，买了一个 XBOX ONE 手柄。</p>
<p>有了设备，自然就有软件。在有限的游玩时间内，今年我最喜欢的两个游戏：</p>
<ul>
<li>DARK SOULS™ III「黑暗之魂 3」</li>
<li>NieR:Automata™「尼尔：机械纪元」</li>
</ul>
<p>之后我会单独写两篇文来记录感想。</p>
<p>下半年开始就没怎么玩 DOTA 了，一是工作繁忙，二是状态有点迷，跟不上节奏。</p>
<h2 id="接下来"><a href="#接下来" class="headerlink" title="接下来"></a>接下来</h2><p>希望可以：</p>
<ul>
<li>大家都身体健康</li>
<li>在现有基础上继续钻研 React &#x2F; ReactNative，至少达到「熟练」的程度</li>
<li>ReactNative 做多了以后，少不了要接触原生开发，希望至少可以「入门」</li>
<li>学习 GO 技术栈，希望至少可以「入门」</li>
<li>玩（买）更多的游戏！</li>
</ul>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>2021 春节</title>
    <url>/2021/2021-spring-festival/</url>
    <content><![CDATA[<p>今年疫情原因，本来不是很想回家过年的，想着工作累了，在珠海（中山）做几天废人也不错。但是现在回想起来，虽然家里比较小也比较无聊，逢年过节还是应该回家看看。</p>
<span id="more"></span>

<p>说是回家过年，其实除了：</p>
<ol>
<li>除夕夜聚餐一次</li>
<li>初一早茶聚餐一次</li>
<li>初二集体出游一次</li>
</ol>
<p>以外，并没有其它特别的活动。基本就是宅在家里吃饭、睡觉、看电视。我一直觉得在广东过年比较冷清，今年好像又更冷清了一点。</p>
<p>妈妈老了，马上要 60 岁了。有两个瞬间让我特别有感触：</p>
<ol>
<li>回家的时候，看到妈妈在洗手间挂了一个四连排的洗漱架，上面还特意写上了名字；</li>
<li>临走时跟家人在一桌吃饭，我爸给我拿了一双金属筷子，妈妈默默地给换成了木头筷子。我就说，我用勺子就行了，不需要筷子，她又笑了一下放了回去。</li>
</ol>
<p>第一件事，家虽然又小又老旧，但是家就是家。妈妈始终希望我过年能够回家，并且也做了很多准备。如果因为私欲就不想回家，未免太伤人了些。</p>
<p>第二件事，是因为我曾经说过我不喜欢金属筷子，它如果碰到我补过牙的地方会产生电流的感觉。但是她可能又忘了我现在不需要筷子。</p>
<p>我总感觉老了的人能记住特别多的细节，我喜欢什么，不喜欢什么，都记得特别清楚。而且会变得特别小心，我曾经说过不喜欢的东西，或者为此发过火的东西，就感觉以后再也没有碰到了。就好像以前妈妈很喜欢敲我的房间门叫我吃饭，我就有一次特别生气，说就让我好好睡一下吧，之类的。从那以后，只要我关着房门，妈妈就再也没有叫过我。</p>
<p>以前小时候孩子是弱势群体，大人总是表现得很强势。现在大人老了，也即将变为弱势群体，轮到孩子来照顾大人了。</p>
<p>另外，这次回家还得知了一些弟妹的近况，具体就不说了，但是，有一种我这一代已经成为了被拍在岸上的人的感觉，已经跟不上时代的潮流了。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>2022/05/20</title>
    <url>/2022/2022-05-20/</url>
    <content><![CDATA[<p>很久没更新了，最近有点懒。也没什么想写的。</p>
<p>在新公司（金山办公）上班一年了，工作量并不大，但是干得感觉比之前更累了。主要可能有两个原因：一是之前的负责人在我入职不久后就走了，结果我又变成了负责人（离开西山居的原因之一就是不想做不责人）。二是，做的项目比较偏探索向，不是常规的业务项目，整天要思考这个那个，很累。有时候（经常）也会想放弃。不过看在去年刚来半年就给我 3.75 的份上，还是再干一段时间吧。</p>
<p>最近理财跌得不要不要的，3 个月已经把之前 3 年的收益都跌完了。好在我买的不是很多。现在也不怎么看了。</p>
<p>可能是因为理财亏得太多了，我开始到各种平台薅羊毛，然后又开始把梦幻西游捡起来玩了。家产全部变卖以后转到了朋友所在的区，每天就当作一个打发时间的消遣，分散一下亏钱的注意力。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery 写的 2048 小游戏</title>
    <url>/2015/2048-game-base-on-jquery/</url>
    <content><![CDATA[<p><img src="https://static.wxsm.space/blog/48595779-3bf14f00-e991-11e8-9ec7-da797a7a4bd7.jpg" alt="2048"></p>
<p>Game: <a href="http://wxsms.github.io/jquery-2048/">http://wxsms.github.io/jquery-2048/</a></p>
<p>Code：<a href="https://github.com/wxsms/jquery-2048">https://github.com/wxsms/jquery-2048</a></p>
<p>几年前还在学校的时候刚学 JS&#x2F;jQuery，为了找点事情练练手寻思着做点什么，当时又特别沉迷于一个叫 2048 的小游戏，于是就有了这么个东西。刚做出来的时候开心了好一阵子，现在回头看代码觉得简直惨不忍睹，根本不像是一个学过算法的人写出来的，字里行间充斥的都是简单与暴力。那时候主要是为了学一门新语言就没有在意这些东西。以后有时间再来优化一下。 在开始的时候是有记分，重启，排行榜一票功能的，现在为了纯粹一点就把垃圾都去掉了。代码过于恶臭就不说了。</p>
]]></content>
      <tags>
        <tag>jquery</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB Aggregate 4 例</title>
    <url>/2021/4-examples-of-mongodb-aggregate/</url>
    <content><![CDATA[<p>有数据格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: &quot;745&quot;,</span><br><span class="line">  &quot;knownName&quot;: &#123;</span><br><span class="line">    &quot;en&quot;: &quot;A. Michael Spence&quot;,</span><br><span class="line">    &quot;se&quot;: &quot;A. Michael Spence&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;familyName&quot;: &#123;</span><br><span class="line">    // 结构同上，下同</span><br><span class="line">    // ..</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;orgName&quot;: &#123;</span><br><span class="line">    // orgName 当获奖者为组织时出现</span><br><span class="line">    // ..</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;gender&quot;: &quot;male&quot;,</span><br><span class="line">  &quot;nobelPrizes&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;awardYear&quot;: &quot;2001&quot;,</span><br><span class="line">      // ...</span><br><span class="line">      &quot;affiliations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;name&quot;: &#123;</span><br><span class="line">            &quot;en&quot;: &quot;Stanford University&quot;,</span><br><span class="line">            // ...</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;city&quot;: &#123;</span><br><span class="line">            // ...</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;country&quot;: &#123;</span><br><span class="line">            // ...</span><br><span class="line">          &#125;,</span><br><span class="line">          // ...</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>想要实现：</p>
<ol>
<li>查找名为 <code>CERN</code> 的 <code>affiliation</code> 的所在国家</li>
<li>查找获奖次数大于等于 5 次的 <code>familyName</code></li>
<li>查找 <code>University of California</code> 的不同所在位置总数</li>
<li>查找至少一个诺贝尔奖授予组织而非个人的年份总数</li>
</ol>
<span id="more"></span>

<h2 id="查找名为-CERN-的-affiliation-的所在国家"><a href="#查找名为-CERN-的-affiliation-的所在国家" class="headerlink" title="查找名为 CERN 的 affiliation 的所在国家"></a>查找名为 CERN 的 affiliation 的所在国家</h2><p>需要注意的是 <code>affiliations</code> 是 <code>nobelPrizes</code> 下的数组（嵌套数组结构），因此需要分两次展开：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="property">laureates</span>.<span class="title function_">aggregate</span>(</span><br><span class="line">  [</span><br><span class="line">    <span class="comment">// 展开 nobelPrizes</span></span><br><span class="line">    &#123; <span class="attr">$unwind</span>: <span class="string">&#x27;$nobelPrizes&#x27;</span> &#125;,</span><br><span class="line">    <span class="comment">// 展开 nobelPrizes 下面的 affiliations</span></span><br><span class="line">    &#123; <span class="attr">$unwind</span>: <span class="string">&#x27;$nobelPrizes.affiliations&#x27;</span> &#125;,</span><br><span class="line">    <span class="comment">// 找到名为 CERN 的记录</span></span><br><span class="line">    &#123; <span class="attr">$match</span>: &#123; <span class="string">&#x27;nobelPrizes.affiliations.name.en&#x27;</span>: <span class="string">&#x27;CERN&#x27;</span> &#125; &#125;,</span><br><span class="line">    <span class="comment">// 将结果限制为 1 条</span></span><br><span class="line">    &#123; <span class="attr">$limit</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    <span class="comment">// 映射输出</span></span><br><span class="line">    &#123; <span class="attr">$project</span>: &#123; <span class="string">&#x27;_id&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;country&#x27;</span>: <span class="string">&#x27;$nobelPrizes.affiliations.country.en&#x27;</span> &#125; &#125;</span><br><span class="line">  ]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// &#123; &quot;country&quot; : &quot;Switzerland&quot; &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="查找获奖次数大于等于-5-次的-familyName"><a href="#查找获奖次数大于等于-5-次的-familyName" class="headerlink" title="查找获奖次数大于等于 5 次的 familyName"></a>查找获奖次数大于等于 5 次的 familyName</h2><p>这里需要用到 <code>$group</code> 操作，根据 <code>familyName</code> 来进行分组，并且需要提前计算好每条记录所获奖的数量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="property">laureates</span>.<span class="title function_">aggregate</span>(</span><br><span class="line">  [</span><br><span class="line">    <span class="comment">// 映射每条记录的 nobelPrizes 长度为 nobelPrizesLength，familyName.en 为 familyName</span></span><br><span class="line">    &#123; <span class="attr">$project</span>: &#123; <span class="attr">nobelPrizesLength</span>: &#123; <span class="attr">$size</span>: <span class="string">&quot;$nobelPrizes&quot;</span> &#125;, <span class="attr">familyName</span>: <span class="string">&quot;$familyName.en&quot;</span> &#125; &#125;,</span><br><span class="line">    <span class="comment">// 找到 familyName 存在的记录（非组织获奖）</span></span><br><span class="line">    &#123; <span class="attr">$match</span>: &#123; <span class="attr">familyName</span>: &#123; <span class="attr">$exists</span>: !<span class="number">0</span>, <span class="attr">$ne</span>: <span class="literal">null</span> &#125; &#125; &#125;,</span><br><span class="line">    <span class="comment">// 以 familyName 为依据进行分组，并累加 nobelPrizesLength 作为 count</span></span><br><span class="line">    &#123; <span class="attr">$group</span>: &#123; <span class="attr">_id</span>: <span class="string">&quot;$familyName&quot;</span>, <span class="attr">count</span>: &#123; <span class="attr">$sum</span>: <span class="string">&quot;$nobelPrizesLength&quot;</span> &#125;, <span class="attr">familyName</span>: &#123; <span class="attr">$first</span>: <span class="string">&quot;$familyName&quot;</span> &#125; &#125; &#125;,</span><br><span class="line">    <span class="comment">// 找到 count 大于等于 5 的记录</span></span><br><span class="line">    &#123; <span class="attr">$match</span>: &#123; <span class="attr">count</span>: &#123; <span class="attr">$gte</span>: <span class="number">5</span> &#125; &#125; &#125;,</span><br><span class="line">    <span class="comment">// 映射输出</span></span><br><span class="line">    &#123; <span class="attr">$project</span>: &#123; <span class="attr">familyName</span>: <span class="string">&quot;$familyName&quot;</span>, <span class="attr">_id</span>: <span class="number">0</span> &#125; &#125;</span><br><span class="line">  ]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// &#123; &quot;familyName&quot; : &quot;Smith&quot; &#125;</span></span><br><span class="line"><span class="comment">// &#123; &quot;familyName&quot; : &quot;Wilson&quot; &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="查找-University-of-California-的不同所在位置总数"><a href="#查找-University-of-California-的不同所在位置总数" class="headerlink" title="查找 University of California 的不同所在位置总数"></a>查找 University of California 的不同所在位置总数</h2><p>一个相比上个查询更简单的 group 查询：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="property">laureates</span>.<span class="title function_">aggregate</span>(</span><br><span class="line">  [</span><br><span class="line">    <span class="comment">// 展开 nobelPrizes</span></span><br><span class="line">    &#123; <span class="attr">$unwind</span>: <span class="string">&quot;$nobelPrizes&quot;</span> &#125;,</span><br><span class="line">    <span class="comment">// 展开 nobelPrizes 下面的 affiliations</span></span><br><span class="line">    &#123; <span class="attr">$unwind</span>: <span class="string">&quot;$nobelPrizes.affiliations&quot;</span> &#125;,</span><br><span class="line">    <span class="comment">// 找到名为 University of California 的记录</span></span><br><span class="line">    &#123; <span class="attr">$match</span>: &#123; <span class="string">&quot;nobelPrizes.affiliations.name.en&quot;</span>: <span class="string">&quot;University of California&quot;</span> &#125; &#125;,</span><br><span class="line">    <span class="comment">// 以 city 名作为依据分组</span></span><br><span class="line">    &#123; <span class="attr">$group</span>: &#123; <span class="attr">_id</span>: <span class="string">&quot;$nobelPrizes.affiliations.city.en&quot;</span> &#125; &#125;,</span><br><span class="line">    <span class="comment">// 输出分组后的总记录数</span></span><br><span class="line">    &#123; <span class="attr">$count</span>: <span class="string">&quot;locations&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// &#123; &quot;locations&quot; : 6 &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="查找至少一个诺贝尔奖授予组织而非个人的年份总数"><a href="#查找至少一个诺贝尔奖授予组织而非个人的年份总数" class="headerlink" title="查找至少一个诺贝尔奖授予组织而非个人的年份总数"></a>查找至少一个诺贝尔奖授予组织而非个人的年份总数</h2><p>这里注意 group 之前先把授予个人的记录筛除掉：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="property">laureates</span>.<span class="title function_">aggregate</span>(</span><br><span class="line">  [</span><br><span class="line">    <span class="comment">// 找到 orgName 存在的记录（组织获奖）</span></span><br><span class="line">    &#123; <span class="attr">$match</span>: &#123; <span class="attr">orgName</span>: &#123; <span class="attr">$exists</span>: !<span class="number">0</span>, <span class="attr">$ne</span>: <span class="literal">null</span> &#125; &#125; &#125;,</span><br><span class="line">    <span class="comment">// 展开 nobelPrizes</span></span><br><span class="line">    &#123; <span class="attr">$unwind</span>: <span class="string">&quot;$nobelPrizes&quot;</span> &#125;,</span><br><span class="line">    <span class="comment">// 以获奖年份分组</span></span><br><span class="line">    &#123; <span class="attr">$group</span>: &#123; <span class="attr">_id</span>: <span class="string">&quot;$nobelPrizes.awardYear&quot;</span> &#125; &#125;,</span><br><span class="line">    <span class="comment">// 输出分组后的总记录数</span></span><br><span class="line">    &#123; <span class="attr">$count</span>: <span class="string">&quot;years&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// &#123; &quot;years&quot; : 26 &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次艰难的 Debug</title>
    <url>/2020/a-difficult-debug-note/</url>
    <content><![CDATA[<p>这是一次关于本博客的 Debug 经历，过程非常曲折。关键词：<strong>Vue &#x2F; SSR &#x2F; 错配</strong>。</p>
<p>不知道从哪篇博文开始，博客在直接从内页打开时，或者在内页刷新浏览器时，会报以下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.73b8bd4d.js:8</span><br><span class="line">DOMException: Failed to execute &#x27;appendChild&#x27; on &#x27;Node&#x27;: </span><br><span class="line">This node type does not support this method.</span><br></pre></td></tr></table></figure>

<p>该错误：</p>
<ol>
<li>只会在 build 模式出现；</li>
<li>只会在发布上 GitHub Pages 后出现；</li>
<li>只会在某些博文中出现；</li>
<li>只会在直接从链接进入该博文，或者在该博文页面刷新时出现。</li>
</ol>
<p>该错误带来的影响，<strong>会导致页面上的所有 JavaScript 功能全部失效</strong>，具体来说是与 Vue.js 相关的功能。如：导航链接（因为使用了 Vue-Router），评论框，一些依赖于 Vue.js 的 VuePress 插件，等等。</p>
<p><img src="/2020/a-difficult-debug-note/97097835-c465e780-16b0-11eb-8d93-ac2cee64895b.png" alt="screenshot"></p>
<span id="more"></span>

<h2 id="主题？"><a href="#主题？" class="headerlink" title="主题？"></a>主题？</h2><p>初次看到这个报错时，我的第一想法是：是不是我不经意间在哪里调用了 <code>appendChild</code> 这个方法导致的？因为我的博客使用了我自己发布的主题，有可能是我哪个地方写得不好导致了这个问题。</p>
<p>但是，再三检查主题代码 <a href="https://github.com/wxsms/vuepress-theme-mini">vuepress-theme-mini</a> 后，我并没有发现任何可疑之处。</p>
<p>实际上我也不太相信这个错误是由我的主题导致的，因为查看错误抛出处的源码时发现这些代码都不像是我写的。</p>
<h2 id="插件？"><a href="#插件？" class="headerlink" title="插件？"></a>插件？</h2><p>另一个可疑之处，则是插件。具体来说，是以下 3 个插件：</p>
<ol>
<li><code>valine</code> 用于展示评论</li>
<li><code>vuepress-plugin-flowchart</code> 用于绘制流程图</li>
<li><code>vuepress-plugin-right-anchor</code> 用于显示浮动的目录</li>
</ol>
<p>我 Google 了很多次，最后在 <a href="https://github.com/vuejs/vuepress/issues/1692">vuepress&#x2F;issues&#x2F;1692</a> 里，有一句话引起了我的注意：</p>
<blockquote>
<p>Just a hint: Another common mistake is to use dynamic vue components that should render client side but forget to ignore them in static builds… 99% of those issues in our projects were missing <code>&lt;ClientOnly&gt;</code>. So try:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ClientOnly</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">NonSSRFriendlyComponent</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ClientOnly</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>这个 99% 的表述让我不得不引起重视，审视上述插件的代码以后，发现其确实没有加入 <code>&lt;ClientOnly&gt;</code>，难道这就是问题所在？</p>
<p>然而经过实践，并不行。再三确认所有 fork 版本里面已经正确使用了 <code>&lt;ClientOnly&gt;</code>，错误依然存在。</p>
<p>该 issue 里面提到的另一点：</p>
<blockquote>
<p>I had the same problem, and then I found out it had to do with document</p>
<p> enhanceApp.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123; <span class="comment">// add this line</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">document</span>.<span class="property">xxx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>我同样再三确认已经修正，依旧不能解决错误。</p>
<h2 id="YAML"><a href="#YAML" class="headerlink" title="YAML?"></a>YAML?</h2><p>以上两处都无法找到问题，我有点迷惘了。因此开始漫无目的地寻找出错页面的共同点，以试图定位问题。最后，我发现：出现错误的页面貌似大多数都有 <code>yaml</code> 高亮的代码块。当然只是大多数，依然存在其它个例。</p>
<p>我尝试将 yaml 格式去除，即将：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```yaml</span><br><span class="line"># ...</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<p>写为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"># ...</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<p>然后部署上线，错误神奇地消失了！</p>
<p>但是，我还没有开心过一分钟，立即发现：错误是消失了，但其带来的副作用依然存在：<strong>Vue.js 依然处于崩溃状态，任何功能都无法使用</strong>。</p>
<p>这让我感到很沮丧：这种 SPA 带来的体验还不如最原始的 <code>&lt;a&gt;</code> 标签。</p>
<p>因此，我尝试对主题做出了一些小改动，将导航栏的跳转链接全部换成了普通的 <code>&lt;a&gt;</code> 标签。这件事情如果做到这一步，在某种层面上来说也算是解决了吧。除了以下一些问题持续地让我感到难受：</p>
<ol>
<li>不能使用 <code>yaml</code> 高亮；</li>
<li>不能使用 <code>Vue-Router</code>；</li>
<li>无法追根朔源的痛苦。</li>
</ol>
<h2 id="路径？"><a href="#路径？" class="headerlink" title="路径？"></a>路径？</h2><p>虽然从使用性的层面上来说问题算是解决了，但是我还是很在意以上几点。因此仍在持续地探究问题根源。</p>
<p>后来，我在 netlify 上看到了这样一个帖子：<a href="https://community.netlify.com/t/vuepress-deployment-on-netlify-succeeds-but-experience-errors-when-reloading-specific-pages/12606/8">VuePress deployment on Netlify succeeds, but experience errors when reloading specific pages</a></p>
<p>作者所提到的问题基本跟我一模一样：</p>
<blockquote>
<p>Hi, I have a VuePress generated static website deployed on Netlify, I am currently running into errors like:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Failed to execute &#x27;appendChild&#x27; on &#x27;Node&#x27;: This node type does not support this method. only when reloading inner pages (i.e, not homepage.).</span><br></pre></td></tr></table></figure>

<p>I have searched for similar issues on GitHub and it seems that it is related to Vue’s failing hydration as described here: <a href="https://github.com/nuxt/nuxt.js/issues/1552">nuxt.js&#x2F;issues&#x2F;1552</a>, and here: <a href="https://github.com/vuejs/vuepress/issues/1692">vuepress&#x2F;issues&#x2F;1692</a>.</p>
<p><strong>However, I didn’t come across these issues when I’m in my local environment (both in dev mode and in production mode), I only run into these issues when I deploy my site to Netlify.</strong></p>
<p>Confusing…</p>
</blockquote>
<p>这简直有一种抓住了救命稻草的感觉！激动地往下翻，作者还说他找到了问题所在：</p>
<blockquote>
<p>New update! So I converted all of my file names and directory names to lowercase and it actually solved the problem!</p>
</blockquote>
<p>我立刻开始检查出问题的页面是否存在类似问题。然而，很遗憾，我的页面所有 url 都是小写的，不存在任何大写字符。</p>
<p>我又想，是不是有任何加载的资源里面出现了大写字符，导致了加载失败，因而产生错误？</p>
<p>结果再次让人感到遗憾：从我的域名中加载的所有资源，均没有出现大写字符的情况，更没有任何一个资源加载失败。</p>
<p>调查再次陷入僵局。</p>
<h2 id="SSR"><a href="#SSR" class="headerlink" title="SSR?"></a>SSR?</h2><p>Google 之余，偶然看到了这样一个 issue: <a href="https://github.com/vuejs/vue/issues/6874">vue&#x2F;issues&#x2F;6874</a>，作者提到，当 SSR 发生「错配」时，Vue.js 应用会出现类似「宕机」的表现。他希望可以通过参数控制这个行为，即当 SSR 出现「错配」时，允许用户选择自己想要的行为。如忽略 SSR 的结果并以客户端渲染结果覆盖，或仅提出 warning 而不是整个挂掉。</p>
<p>而 yyx 则认为，只要不是白屏 (white screen)，则都能接受。</p>
<p>此时我不想深入探讨这个行为。我只想知道，我的问题到底是不是跟这个有关？</p>
<p>VuePress 有一个插件 <a href="https://github.com/vuepress/vuepress-community/tree/master/packages/vuepress-plugin-dehydrate">vuepress-plugin-dehydrate</a>，可以实现禁用所有 JavaScript，将页面作为纯静态 HTML 使用。在测试中我发现，禁用「客户端接管」以后页面确实没有问题了。但我觉得这不是废话吗？这个实验完全没有任何意义啊。</p>
<p>后面，我想到一个办法，即通过创建一个全新的仓库，不加任何主题与插件，看看 <code>yaml</code> 高亮是否会出现问题。</p>
<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>我在 Github 新建了一个仓库，用最少的配置搭建出来了一个 VuePress 程序。尝试：</p>
<ol>
<li>添加一个包含 <code>yaml</code> 高亮的页面，<strong>没有出现问题</strong>；</li>
<li>将出现问题的博文整篇添加进去，<strong>没有出现问题</strong>；</li>
<li>将博客的所有主题、插件、博文均导入到新仓库中，依然<strong>没有出现问题</strong>。</li>
</ol>
<p>走到这一步我头都大了，好像只剩下最后一个区别了，即<strong>自定义域名</strong>。要是再不能复现，干脆我把博客迁移过来算了。</p>
<p>然而，最出乎意料的是，在添加自定义域名，并通过域名访问后，<strong>问题复现了</strong>！后来，我逐步将所有东西复原到步骤 1 的状态，即最简 VuePress + 一个 <code>yaml</code> 高亮的页面，问题持续复现。</p>
<p>到这里，问题就很明朗了：</p>
<p>这就是 Cloudflare 的锅！（我的域名托管在 Cf）</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>最终定位到问题以后，解决似乎变得顺利成章了起来。我将 Google 关键词换成了 Cloudflare + VuePress，没有发现有价值的信息。再换成 Cloudflare + Vue + SSR，找到了这篇博文：<a href="https://www.endpoint.com/blog/2019/06/11/cloudflare-vue-ssr-significant-comments">Cloudflare and Vue SSR; Client Hydration Failures</a>，里面详细地描述了作者遇到的问题（基本跟我一致）以及解决思路。</p>
<p>按照他的说法，他的应用之所以出现这个问题，是因为 Cloudflare 启用了一种叫 <code>AutoMin</code> 的优化，会自动对静态资源 (JavaScript &#x2F; CSS &#x2F; HTML) 再做进一步的压缩。然而 HTML 中被去掉了的 <code>&lt;!-- --&gt;</code> 注释则是问题的关键所在：这是 <code>v-if</code> 节点用来成功挂载的重要组成部分。</p>
<p>至于如何发现，由于错误提示基本没有调试价值，尝试了各种办法后，最终通过将本地编译的静态 HTML 与服务器上面的 HTML 进行逐行比对，最终发现区别。</p>
<p>知道了这点我立马就打开 Cloudflare 控制台试图关闭该配置，但经过一番寻找后发现，该配置从来就没有打开过！</p>
<p>不过没关系，既然如此，那我也来对比一下。最终得到的有意义的区别，我本地编译的版本是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">ssh user@host</span><br></pre></td></tr></table></figure>

<p>Cloudflare 返回的版本是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">ssh <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/cdn-cgi/l/email-protection&quot;</span> <span class="attr">class</span>=<span class="string">&quot;__cf_email__&quot;</span> <span class="attr">data-cfemail</span>=<span class="string">&quot;b6c3c5d3c4f6ded9c5c2&quot;</span>&gt;</span>[email<span class="symbol">&amp;#160;</span>protected]<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>西巴。原来它还有这个功能。淦！</p>
<p>这个功能在 CloudFlare 上叫 <code>Email Address Obfuscation</code>，会自动保护出现在 HTML 上的邮箱地址，相当于打码处理。但是，正是因为它，导致了 Vue.js 出现 SSR 错配，进而导致网站崩溃。</p>
<p>我把该功能关掉后，问题就消失了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>追根朔源，问题的根本与我先前的猜想大相庭径：与主题、插件、yaml 等均无关，而是因为 HTML 中出现了类似邮件地址的文本，被 Cloudflare 转换了。</p>
<p>当然，我承认这是因为我在 SSR 方面的经验不足，才走了这么多弯路。以后再发现这种问题，我一定第一步就做比对。</p>
<p>不过，在这个过程中，我也确实感受到了 Vue.js 在 SSR 方面的一些不足（我认为的）：</p>
<ol>
<li>错配即崩溃，Vue.js 直接放弃接管；</li>
<li>错误提示过于晦涩；</li>
<li>用户对于该行为没有选择权。</li>
</ol>
<p>从另一层面来说，能够最终找到问题根源并通过最简单的方式将其解决，这种感受很爽。在这个过程中我有很多理由去放弃，但我没有。对于这点我感到很开心。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>vue</tag>
        <tag>ssr</tag>
      </tags>
  </entry>
  <entry>
    <title>值得纪念的时刻</title>
    <url>/2021/a-memorable-moment/</url>
    <content><![CDATA[<p>昨天正式受邀（实际上是我申请的）进入了 <a href="https://github.com/vuejs">vuejs</a> 组织。虽然目前只是 doc team，但是我相信以后可以做更多的事情。</p>
<p><img src="/2021/a-memorable-moment/13d7282a4d2649e1b8768d3ceffd71c2.png" alt="638f7ff6d334b2d7616039a3787efe6.png"></p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>比较简单的 GitHub 加速方式</title>
    <url>/2021/a-simple-way-to-speed-up-github-connection/</url>
    <content><![CDATA[<p>在不想全局 vpn 的情况下，可以用 host 加速。</p>
<p>该方法主要利用 <a href="https://github.com/ineo6/hosts">github.com&#x2F;ineo6&#x2F;hosts</a> 的 hosts 文件，国内镜像 <a href="https://gitee.com/ineo6/hosts">gitee.com&#x2F;ineo6&#x2F;hosts</a>。</p>
<h2 id="方法一：手动"><a href="#方法一：手动" class="headerlink" title="方法一：手动"></a>方法一：手动</h2><p>手动复制 hosts 的内容，并粘贴至对应操作系统的 hosts 文件内。</p>
<h2 id="方法二：自动"><a href="#方法二：自动" class="headerlink" title="方法二：自动"></a>方法二：自动</h2><ol>
<li>下载开源的 host 切换软件 <a href="https://github.com/oldj/SwitchHosts">SwitchHosts</a></li>
<li>新建一条规则：<ol>
<li>方案名：随便</li>
<li>类型：远程</li>
<li>URL 地址：<a href="https://gitee.com/ineo6/hosts/raw/master/hosts">https://gitee.com/ineo6/hosts/raw/master/hosts</a></li>
<li>自动更新：随便，或 1 小时</li>
</ol>
</li>
<li>保存，保存后可以先手动刷新一次</li>
<li>启用即可</li>
</ol>
]]></content>
      <tags>
        <tag>github</tag>
        <tag>gfw</tag>
      </tags>
  </entry>
  <entry>
    <title>静态文件 Docker 镜像问题一则</title>
    <url>/2023/a-static-file-docker-image-issue/</url>
    <content><![CDATA[<p>今天想要打包一个 Docker 镜像，里面只包含一些静态的前端文件。为了使体积足够小，想到的方案是把命令全部集中在一个 RUN 上，类似这样：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /usr/src/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yarn --frozen-lockfile --check-files --ignore-engines &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    yarn build &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf node_modules</span></span><br></pre></td></tr></table></figure>

<p>但是打包出来的镜像，死活都是 2.2G，node 镜像自身 900MB，静态文件总共才 10MB+，run container 进去查看 node_modules 也确实删掉了，百思不得其解。一度以为是 Docker 出了 bug，遂升级 Docker，但仍不能解决。</p>
<p>折腾了一下午后，尝试去掉 <code>rm -rf node_modules</code>，观察到打出来的镜像 2.8G，突然觉得是不是还有什么东西没删干净，然后很快就想到了 yarn 的缓存。添加 <code>yarn cache clean</code> 后，打出来的镜像来到 910MB。世界终于清净了。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular Router 学习笔记</title>
    <url>/2016/angular-router-note/</url>
    <content><![CDATA[<p>使用Angular Router可以很方便地构建SPA应用，同时它支持深度链接，支持各种浏览器操作（前进、后退、收藏等），非常有趣。使用过类似模块就会觉得它要比传统的路由方式，比如服务端的Forward，Redirect以及一般的JavaScript Redirect等，好用得多。特别是用户体验这一块，上升了很大的档次。</p>
<p>就在不久前我还开发了一个使用iframe与jQuery的SPA项目，当时由于是老板提供的所有前端页面所以也没多想。现在学过了Angular Router真是有些不堪回首的感觉。</p>
<span id="more"></span>

<h2 id="传统路由方式"><a href="#传统路由方式" class="headerlink" title="传统路由方式"></a>传统路由方式</h2><div class="table-responsive">
  <table class="table table-bordered table-hover">
    <tr>
      <td>
      </td>
      <td>
         <strong>Server Forward</strong>
      </td>
      <td>
         <strong>Server Redirect</strong>
      </td>
      <td>
         <strong>Client Redirect</strong>
      </td>
    </tr>
    <tr>
      <td>
         <strong>Request(s) </strong>
      </td>
      <td>
         1
      </td>
      <td>
         <span style="color: #ff0000;">2</span>
      </td>
      <td>
         1
      </td>
    </tr>
    <tr>
      <td>
         <strong>Browser URL Change</strong>
      </td>
      <td>
         <span style="color: #ff0000;">NO</span>
      </td>
      <td>
         YES
      </td>
      <td>
         YES
      </td>
    </tr>
    <tr>
      <td>
         <strong>Page Refresh </strong>
      </td>
      <td>
         YES
      </td>
      <td>
         YES
      </td>
      <td>
         YES
      </td>
    </tr>
    <tr>
      <td>
         <strong>Maintainable</strong>
      </td>
      <td>
         YES
      </td>
      <td>
         YES
      </td>
      <td>
         <span style="color: #ff0000;">NO</span>
      </td>
    </tr>
    <tr>
      <td>
         <strong>Browser Actions</strong>
      </td>
      <td>
         <span style="color: #ff0000;">NO</span>
      </td>
      <td>
         YES
      </td>
      <td>
         YES
      </td>
    </tr>
  </table>
</div>

<p>以上是一个简单的对比，从请求次数、显示URL是否变化、页面是否刷新、是否可维护、是否支持浏览器动作这5个方面进行，可以看到彼此都有一些遗憾。由于Server Forward以及Client Redirect的限制实在太大，很多情况下我们用到的都是Server Redirect，但是两次请求是硬伤。并且以上所有方式都需要强制刷新页面。Wordpress博客使用的就都是Redirect方式。</p>
<h2 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h2><p>Angular Router支持两种使用方式：</p>
<ul>
<li>#锚点</li>
<li>HTML5 API</li>
</ul>
<p>其实在我看来很多情况下第一种较为朴素的方式已经足够用了。以下是一个简单的Demo：</p>
<p>独立页面链接：<a href="http://wxsm.space/others/examples/angular-router/" target="_blank">http://wxsm.space/others/examples/angular-router/</a></p>
<p>点击Edit&#x2F;Delete&#x2F;Add&#x2F;Show几个链接，可以发现下面的内容发生了变化。同时地址栏的URL也相应地变了。也可以尝试前进、后退、收藏等操作（在独立页面进行）。 代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>$routeProvide example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">&quot;pathApp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    Choose your option:</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/Book/Edit&quot;</span>&gt;</span>Edit<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/Book/Delete&quot;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/Book/Add&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/Book/Show&quot;</span>&gt;</span>Show<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.0.7/angular.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    angular.<span class="title function_">module</span>(<span class="string">&#x27;pathApp&#x27;</span>, [], <span class="keyword">function</span> (<span class="params">$routeProvider, $locationProvider</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $routeProvider</span></span><br><span class="line"><span class="language-javascript">                .<span class="title function_">when</span>(<span class="string">&#x27;/Book/Edit&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;Edit&lt;/div&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">                .<span class="title function_">when</span>(<span class="string">&#x27;/Book/Delete&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;Delete&lt;/div&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">                .<span class="title function_">when</span>(<span class="string">&#x27;/Book/Show&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;Show&lt;/div&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">                .<span class="title function_">when</span>(<span class="string">&#x27;/Book/Add&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;Add&lt;/div&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">                .<span class="title function_">otherwise</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">redirectTo</span>: <span class="string">&#x27;/Book&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个Demo为了简便使用了直接的HTML字符串来作为一个页面的内容，我们在实际使用的时候可以把它换成一个实际页面的地址，这样在点击一个链接的时候Angular Router就会异步地加载相应的页面并且填充到相应的<code>ng-view</code>节点中去。整个过程无需全局刷新。由此带来的好处是非常多的。我们不需要重新加载和渲染一些固定的板块（比如通常情况下一个网站的Header和Footer部分都是不会发生变化的，当然如果需要变化Angular Router也能做到），同时也可以真正地给页面切换添加一些酷炫的动画（CSS或者JS）。并且由于加载一个新页面只需要从服务器读取它的HTML内容而不需要如JS&#x2F;CSS等静态文件（这些都将会在页面第一次打开的时候加载完毕），因此速度将会非常快。</p>
<p>需要注意的是，这里使用的是比较旧的AngularJS版本。在新版本中，Angular Router从AngularJS的核心代码内分离了出来，成为了一个叫做ngRoute的独立模块。我们需要同时引入AngularJS和ngRoute模块来启用Angular Router路由器。</p>
<h2 id="关于-routeProvider与-route"><a href="#关于-routeProvider与-route" class="headerlink" title="关于$routeProvider与$route"></a>关于$routeProvider与$route</h2><p>这个路由功能是由Angular的一个服务提供者（service provider）实现的，它的名字就叫做<code>$routeProvider</code> 。Angular服务是由服务工厂创建出来的一系列单例对象，而工厂则是由服务提供者来创建。服务提供者必须实现一个<code>$get</code>方法，它就是该服务的工厂方法了。 当我们使用AngularJS的依赖注入给控制器注入一个服务对象的时候，Angular会使用<code>$injector</code>来查找相应的注入器。一旦找到了，它就会调用相应<code>$get</code>方法来或取服务对象的实例。有时候服务提供者在实例化服务对象之前需要其调用者提供一些参数。</p>
<p>Angular路由功能是由<code>$routeProvider</code>声明的，同时它也是<code>$route</code>服务的提供者。</p>
]]></content>
      <tags>
        <tag>angularjs</tag>
      </tags>
  </entry>
  <entry>
    <title>Auto Changelog with GitLab</title>
    <url>/2020/auto-changelog-with-gitlab/</url>
    <content><![CDATA[<p>上一篇博文 <a href="/posts/2020-11-09-integrate-renovate-with-gitlab.html">Integrate Renovate with GitLab</a> 中介绍了为私有代码仓库与私有源提供依赖自动检测更新并发起 Merge Request 的方式。Renovate 可以自动通过 Release Notes 获取到版本之间的更新日志，并在 MR 中展示，这为执行合并的评审人提供了极大的便利。</p>
<p>接下来需要解决另一个问题：如何为分散在各处的私有依赖自动生成更新日志？</p>
<span id="more"></span>

<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>首先需要说明，自动生成 Changelog 的前提条件是使用 <a href="https://www.conventionalcommits.org/zh-hans/v1.0.0-beta.4/">约定式提交</a> ，这样各类程序才能从 git 仓库的提交记录中提取出有价值的信息并加以整理归类。</p>
<p>可供选择的程序有很多，可以按需选择。这里选用的是 <a href="https://github.com/lob/generate-changelog">lob&#x2F;generate-changelog</a> 。</p>
<h2 id="时机"><a href="#时机" class="headerlink" title="时机"></a>时机</h2><p>一个合适的生成 Changelog 的时机是创建新 Tag 的时候。如果是一个 npm package，那么执行 <code>npm version xxx</code> 命令的时候就会自动得到一个 Tag，将其推送到远端即可。</p>
<p>也可以使用预定义的脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;release:major&quot;: &quot;npm version major &amp;&amp; git push origin &amp;&amp; git push origin --tags&quot;,</span><br><span class="line">&quot;release:minor&quot;: &quot;npm version minor &amp;&amp; git push origin &amp;&amp; git push origin --tags&quot;,</span><br><span class="line">&quot;release:patch&quot;: &quot;npm version patch &amp;&amp; git push origin &amp;&amp; git push origin --tags&quot;,</span><br></pre></td></tr></table></figure>

<h2 id="CI"><a href="#CI" class="headerlink" title="CI"></a>CI</h2><p>如何驱使 GitLab 来完成 Release Note 的创建，有很多方式。</p>
<h3 id="1-使用-gitlab-ci-yml"><a href="#1-使用-gitlab-ci-yml" class="headerlink" title="1. 使用 .gitlab-ci.yml"></a>1. 使用 .gitlab-ci.yml</h3><p>从 GitLab 13.2 开始，runner 可以使用以下镜像直接操作 Release：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">release_job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">release</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">registry.gitlab.com/gitlab-org/release-cli:latest</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="comment"># 只有当 Tag 被创建的时候才执行该任务</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_COMMIT_TAG</span>                  </span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&#x27;running release_job&#x27;</span></span><br><span class="line">    <span class="comment"># 使用命令行生成 Changelog</span></span><br><span class="line">    <span class="comment"># 该命令行可以根据需求自定义</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">export</span> <span class="string">EXTRA_DESCRIPTION=$(changelog)</span></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&#x27;Release $CI_COMMIT_TAG&#x27;</span></span><br><span class="line">    <span class="comment"># 将得到的 Changelog 填入 description 字段</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&#x27;$EXTRA_DESCRIPTION&#x27;</span></span><br><span class="line">    <span class="attr">tag_name:</span> <span class="string">&#x27;$CI_COMMIT_TAG&#x27;</span></span><br><span class="line">    <span class="attr">ref:</span> <span class="string">&#x27;$CI_COMMIT_TAG&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这是最简单的方式。但是由于我司的 GitLab 版本过低，不支持此操作。因此需要另外想办法。</p>
<h3 id="2-bash-script"><a href="#2-bash-script" class="headerlink" title="2. bash script"></a>2. bash script</h3><p>GitLab CI 可以执行一个 bash script，因此可以利用 GitLab 提供的 API，结合一个 Access Token 向 GitLab 发起请求，最终得到 Changelog。</p>
<p>这种方式应该是大多数老版本 GitLab 所使用的。但是它存在一些我认为无法接受的问题：</p>
<ol>
<li>每个项目都需要有此脚本（不过这一点实际上可以通过 <code>npx</code> 绕过）；</li>
<li>每个项目的 <code>.gitlab-ci.yml</code> 都需要修改，这点是无法避免的（实际上方式 1 也存在此问题）；</li>
<li>每个项目都需要配置 Secret Token（ Access Token 不可能直接暴露在代码中）。</li>
</ol>
<p>因此，我觉得这个办法不够优雅。</p>
<h3 id="3-webhook"><a href="#3-webhook" class="headerlink" title="3. webhook"></a>3. webhook</h3><p>为了解决以上问题，我决定继续改造之前的博文 <a href="/posts/2020-09-23-gitlab-ce-code-review-bot.html">Gitlab CE Code-Review Bot</a> 中介绍的评审机器人，让它可以</p>
<ol>
<li>识别 Tag 事件；</li>
<li>自动拉取仓库代码；</li>
<li>自动生成 Changelog；</li>
<li>调用 GitLab API 完成 Release Note 的创建。</li>
</ol>
<p>首先在入口处加多一个事件监听：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; object_kind, object_attributes &#125; = ctx.<span class="property">request</span>.<span class="property">body</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object_kind === <span class="string">&#x27;tag_push&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// tag 事件</span></span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">tag</span>(ctx)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GitLab 并没有区分 Tag 创建与删除的事件，因此需要通过代码判断：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; after, ref, project_id, <span class="attr">project</span>: &#123; git_http_url &#125; &#125; = ctx.<span class="property">request</span>.<span class="property">body</span></span><br><span class="line"><span class="keyword">if</span> (after === <span class="string">&#x27;0000000000000000000000000000000000000000&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">// 该事件是 tag 删除事件，不作处理</span></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <a href="https://www.npmjs.com/package/simple-git">simple-git</a> 来拉取 Git 仓库，注意这里需要使用 <code>oauth2:Access Token</code> 来完成授权：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> simpleGit = <span class="built_in">require</span>(<span class="string">&#x27;simple-git&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> git = <span class="title function_">simpleGit</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> git.<span class="title function_">clone</span>(git_http_url.<span class="title function_">replace</span>(<span class="string">&#x27;https://&#x27;</span>, <span class="string">`https://oauth2:<span class="subst">$&#123;process.env.GITLAB_BOT_ACCESS_TOKEN&#125;</span>@`</span>), projectPath)</span><br></pre></td></tr></table></figure>

<p>生成 Changelog：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Changelog</span> = <span class="built_in">require</span>(<span class="string">&#x27;generate-changelog&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> simpleGit = <span class="built_in">require</span>(<span class="string">&#x27;simple-git&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为 projectPath 的 tag 生成 Changelog</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">projectPath</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">tag</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Promise&lt;String|null&gt;</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">generateChangelog</span> (projectPath, tag) &#123;</span><br><span class="line">  <span class="comment">// 旧的当前路径</span></span><br><span class="line">  <span class="keyword">const</span> oldPath = process.<span class="title function_">cwd</span>()</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 生成之前先要切换路径  </span></span><br><span class="line">    process.<span class="title function_">chdir</span>(projectPath)</span><br><span class="line">    <span class="keyword">const</span> git = <span class="title function_">simpleGit</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取 Git 仓库下所有的 Tags</span></span><br><span class="line">    <span class="keyword">const</span> tagsString = <span class="keyword">await</span> git.<span class="title function_">raw</span>([<span class="string">&#x27;for-each-ref&#x27;</span>, <span class="string">&#x27;--sort=-creatordate&#x27;</span>, <span class="string">&#x27;--format&#x27;</span>, <span class="string">&#x27;%(refname)&#x27;</span>, <span class="string">&#x27;refs/tags&#x27;</span>])</span><br><span class="line">    <span class="keyword">const</span> tags = tagsString.<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="regexp">/\s/</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tags.<span class="property">length</span> - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tags[i] !== tag) &#123;</span><br><span class="line">        <span class="comment">// 循环找到目标 Tag</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!tags[i] || !tags[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="comment">// 第一个 Tag（往往）不需要 Changelog</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 找到 Tag 的哈希值</span></span><br><span class="line">      <span class="keyword">const</span> hash0 = (<span class="keyword">await</span> git.<span class="title function_">raw</span>([<span class="string">&#x27;show-ref&#x27;</span>, <span class="string">&#x27;-s&#x27;</span>, tags[i]])).<span class="title function_">trim</span>()</span><br><span class="line">      <span class="keyword">const</span> hash1 = (<span class="keyword">await</span> git.<span class="title function_">raw</span>([<span class="string">&#x27;show-ref&#x27;</span>, <span class="string">&#x27;-s&#x27;</span>, tags[i + <span class="number">1</span>]])).<span class="title function_">trim</span>()</span><br><span class="line">      <span class="comment">// 使用哈希值范围来生成 Changelog</span></span><br><span class="line">      <span class="comment">// 为什么不直接使用 Tag：</span></span><br><span class="line">      <span class="comment">// 因为 Tag 中如果包含了某些特殊字符串，会造成无法识别问题</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> <span class="title class_">Changelog</span>.<span class="title function_">generate</span>(&#123; <span class="attr">tag</span>: <span class="string">`<span class="subst">$&#123;hash0&#125;</span>...<span class="subst">$&#123;hash1&#125;</span>`</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 任务结束后将当前路径切换回原来的</span></span><br><span class="line">    process.<span class="title function_">chdir</span>(oldPath)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，使用 GitLab API 将得到的 Changelog 更新上去即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为 Tag 增加 Release note</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">projectId</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">tagName</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">body</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">IDBRequest&lt;IDBValidKey&gt; | Promise&lt;void&gt;</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addReleaseNote</span> (projectId, tagName, body) &#123;</span><br><span class="line">  <span class="keyword">return</span> agent.<span class="title function_">post</span>(<span class="string">`<span class="subst">$&#123;BASE&#125;</span>/<span class="subst">$&#123;projectId&#125;</span>/repository/tags/<span class="subst">$&#123;tagName&#125;</span>/release`</span>, &#123;</span><br><span class="line">    <span class="attr">tag_name</span>: tagName,</span><br><span class="line">    <span class="attr">description</span>: body</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后的最后，删除之前拉取下来的仓库，这个任务就算完成了。</p>
<p>这么做最大的好处是：仓库启用与否，只需要在 Webhook 处多勾选一个 <code>Tag push</code> Event 即可，无需任何其他操作。</p>
<p>但是它也有一个不好的地方：如果原仓库特别大的话，拉取可能会非常耗时。不过考虑到 GitLab 和 Bot 一般都会处在同一个内网环境下，这点基本可以忽略。</p>
]]></content>
      <tags>
        <tag>gitlab</tag>
        <tag>devops</tag>
      </tags>
  </entry>
  <entry>
    <title>Auto-height Webview of ReactNative</title>
    <url>/2018/auto-height-webview-of-react-native/</url>
    <content><![CDATA[<p>自动高的 Webview 实现方式其实跟 iframe 无二，无非是计算其内容高度后再赋值给容器样式。但是普通的办法实际上用起来差强人意，<strong>其问题主要体现在页面加载过慢，需要整个页面（包括图片）加载完成后才能计算出高度</strong>。而实际想要的效果往往是跟普通“网页”的表现一致，即：<strong>先加载文字，图片等内容异步加载、显示</strong>。在尝试了多款开源解决方案后，问题均没有得到解决，因此有了自己动手的想法。</p>
<p>不过本方案目前也只适用于自己拼接的 HTML，不适用于直接打开链接的 Webview，应用场景主要是在 ReactNative 应用内打开由 CMS 编辑的类新闻页面。</p>
<span id="more"></span>

<p>主要思路为：通过 Webview 提供的 <code>postMessage</code> 交互方式，不断地从 HTML 页面把自己计算好的高度抛送给 APP 端。但是这里其实有个问题，ReactNative Webview 的 <code>postMessage</code> 必须在页面加载完成以后才会注入，因此可以先加载一个空白页，待 <code>postMessage</code> 注入完成以后，再将实际文章内容插入到 <code>body</code> 中。</p>
<p>但是这么做有一个问题就是，页面将无法知道真正的内容“是否已加载完”，因为 <code>window.onload</code> 事件在加载开始之前就已经结束了。因此它只能不停地抛送高度信息，直到页面被销毁。</p>
<p>核心代码（HTML）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;data:image/x-icon;,&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> inserted = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> interval = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> body = <span class="variable language_">document</span>.<span class="property">body</span>, html = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> height = <span class="title class_">Math</span>.<span class="title function_">max</span>(body.<span class="property">scrollHeight</span>, body.<span class="property">offsetHeight</span>, html.<span class="property">clientHeight</span>, html.<span class="property">scrollHeight</span>, html.<span class="property">offsetHeight</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">postMessage</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (!inserted) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;$&#123;valueParsed&#125;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            inserted = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">window</span>.<span class="title function_">postMessage</span>(height + <span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">readyState</span> === <span class="string">&#x27;complete&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//clearInterval(interval)</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">200</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>核心代码（App）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">AutoHeightWebview</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> (props) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">webviewHeight</span>: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  assembleHTML = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 组装HTML，略</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  onMessage = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> webviewHeight = <span class="built_in">parseFloat</span>(event.<span class="property">nativeEvent</span>.<span class="property">data</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(webviewHeight) &amp;&amp; <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">webviewHeight</span> !== webviewHeight) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;webviewHeight&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">HTML</span> = <span class="variable language_">this</span>.<span class="title function_">assembleHTML</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">html</span>);</span><br><span class="line">    <span class="keyword">const</span> onLoadEnd = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">onLoadEnd</span> || <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">    <span class="comment">// 防止 postMessage 与页面原有方法冲突</span></span><br><span class="line">    <span class="keyword">const</span> patchPostMessageFunction = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> originalPostMessage = <span class="variable language_">window</span>.<span class="property">postMessage</span>;</span><br><span class="line">      <span class="keyword">var</span> patchedPostMessage = <span class="keyword">function</span> (<span class="params">message, targetOrigin, transfer</span>) &#123;</span><br><span class="line">        <span class="title function_">originalPostMessage</span>(message, targetOrigin, transfer);</span><br><span class="line">      &#125;;</span><br><span class="line">      patchedPostMessage.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">String</span>(<span class="title class_">Object</span>.<span class="property">hasOwnProperty</span>).<span class="title function_">replace</span>(<span class="string">&#x27;hasOwnProperty&#x27;</span>, <span class="string">&#x27;postMessage&#x27;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">postMessage</span> = patchedPostMessage;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> patchPostMessageJsCode = <span class="string">&#x27;(&#x27;</span> + <span class="title class_">String</span>(patchPostMessageFunction) + <span class="string">&#x27;)();&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">WebView</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">injectedJavaScript</span>=<span class="string">&#123;patchPostMessageJsCode&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">source</span>=<span class="string">&#123;&#123;html:</span> <span class="attr">HTML</span>, <span class="attr">baseUrl:</span> &#x27;<span class="attr">http:</span>&#x27;&#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">scalesPageToFit</span>=<span class="string">&#123;Platform.OS</span> !== <span class="string">&#x27;ios&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">bounces</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">scrollEnabled</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">startInLoadingState</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">automaticallyAdjustContentInsets</span>=<span class="string">&#123;true&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onMessage</span>=<span class="string">&#123;this.onMessage&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onLoadEnd</span>=<span class="string">&#123;onLoadEnd&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title>Baidu Submit for WordPress update 0.1.0</title>
    <url>/2016/baidu-submit-for-wordpress-update-0-1-0/</url>
    <content><![CDATA[<p>这次更新主要是把工具做成了 WordPress 插件的形式，安装和使用起来都更符合 WordPress 的风格了，也不用再通过改代码去更改配置参数。之所以一次性把版本号提到了 0.1.0，是因为我觉得它虽然功能还不是非常完善，但是已经达到了“至少能用”的程度。</p>
<p>工具的主要功能目前为止并没有什么变化，至于这个过程中获得的少许 WordPress 插件开发经验下次再总结，好在没走多少弯路。</p>
<p>使用方式：Clone <a href="https://github.com/wxsms/baidu-submit-for-wordpress">https://github.com/wxsms/baidu-submit-for-wordpress</a> 仓库并上传至主机的 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/wp-content/plugins</span><br></pre></td></tr></table></figure>

<p>目录，在 WordPress 插件控制面板中设置启用即可。准入密钥以及域名的配置页面可以在“设置”中找到，其中也包含了手动推送的页面。</p>
]]></content>
      <tags>
        <tag>php</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress 百度主动提交工具</title>
    <url>/2016/baidu-submit-for-wordpress/</url>
    <content><![CDATA[<p>作为目前的国内搜索主流，百度的收录规则与国外搜索引擎如谷歌、必应等不太一样，虽然它也有提供普通的Sitemap模式，但是据它自己所言通过这种方式收录效率是最低的。另外还有一种是自动推送，即在网站所有页面都加入一个JS脚本，有人访问时就会自动向百度推送该链接，但实测经常会被浏览器的AD Block插件阻拦。因此还剩下效率最高的一种方式：主动推送。我试过了一些现成的插件，好像都不太好用。因为是一个简单的功能，所以就自己写了一个小工具来实现。</p>
<span id="more"></span>

<h2 id="主动推送规则"><a href="#主动推送规则" class="headerlink" title="主动推送规则"></a>主动推送规则</h2><p>通过调用百度的一个接口，并给它传送要提交的链接，即完成了主动推送的过程，根据接口返回的信息可以判断提交的结果如何（成功&#x2F;部分成功&#x2F;失败）。</p>
<p>核心代码如下（由百度提供）：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$urls</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;http://www.example.com/1.html&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;http://www.example.com/2.html&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"><span class="variable">$api</span> = <span class="string">&#x27;http://data.zz.baidu.com/urls?site=xxx&amp;token=xxx&#x27;</span>;</span><br><span class="line"><span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"><span class="variable">$options</span> =  <span class="keyword">array</span>(</span><br><span class="line">    CURLOPT_URL =&gt; <span class="variable">$api</span>,</span><br><span class="line">    CURLOPT_POST =&gt; <span class="literal">true</span>,</span><br><span class="line">    CURLOPT_RETURNTRANSFER =&gt; <span class="literal">true</span>,</span><br><span class="line">    CURLOPT_POSTFIELDS =&gt; <span class="title function_ invoke__">implode</span>(<span class="string">&quot;\n&quot;</span>, <span class="variable">$urls</span>),</span><br><span class="line">    CURLOPT_HTTPHEADER =&gt; <span class="keyword">array</span>(<span class="string">&#x27;Content-Type: text/plain&#x27;</span>),</span><br><span class="line">);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt_array</span>(<span class="variable">$ch</span>, <span class="variable">$options</span>);</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;</span><br></pre></td></tr></table></figure>

<p><code>$urls</code> 就是我们需要推送的 url 数组了，除此之外还有两个需要修改的地方，都在第5行。一是自己站点的域名，二是准入密钥。密钥会由百度站长工具提供。域名则有一点需要注意，必须填写在百度站长平台注册的域名，比如注册的时候是带有 www 的，则这里也必须带 www，否则会返回域名不一致的错误。</p>
<p>API返回的 <code>$result</code> 是一个 JSON 对象，若推送成功可能包含以下字段：</p>
<div class="table-responsive">
  <table class="table table-hover">
    <tr>
      <th>字段</th>
      <th>是否必选</th>
      <th>参数类型</th>
      <th>说明</th>
    </tr>
    <tr>
      <td>success</td>
      <td>是</td>
      <td>int</td>
      <td>成功推送的url条数</td>
    </tr>
    <tr>
      <td>remain</td>
      <td>是</td>
      <td>int</td>
      <td>当天剩余的可推送url条数</td>
    </tr>
    <tr>
      <td>not_same_site</td>
      <td>否</td>
      <td>array</td>
      <td>由于不是本站url而未处理的url列表</td>
    </tr>
    <tr>
      <td>
        not_valid
      </td>
      <td>
        否
      </td>
      <td>
        array
      </td>
      <td>
        不合法的url列表
      </td>
    </tr>
  </table>
</div>

<p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;remain&quot;</span><span class="punctuation">:</span><span class="number">4999998</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;not_same_site&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;not_valid&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>推送失败可能返回的字段：</p>
<div class="table-responsive">
  <table class="table table-hover">
    <tr>
      <th>
        字段
      </th>
      <th>
        是否必选
      </th>
      <th>
        参数类型
      </th>
      <th>
        说明
      </th>
    </tr>
    <tr>
      <td>
        error
      </td>
      <td>
        是
      </td>
      <td>
        int
      </td>
      <td>
        错误码，与状态码相同
      </td>
    </tr>
    <tr>
      <td>
        message
      </td>
      <td>
        是
      </td>
      <td>
        string
      </td>
      <td>
        错误描述
      </td>
    </tr>
  </table>
</div>

<p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span><span class="number">401</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;token is not valid&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>实测小站点一天只能推500条链接，超过了就会报错。不过目前来说是绝对够用了。</p>
<h2 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h2><p>关于这个工具，我能想到的比较合理的使用逻辑是这样的：</p>
<ul>
<li>建站已有一段时间，但是从来没用过百度主动推送，需要能够选择以往的链接并推送之</li>
<li>旧的链接都已推送过，需要在有新页面发布时自动将其推送</li>
</ul>
<p>需要推送的页面包括但不限于：</p>
<ul>
<li>首页</li>
<li>文章（Post）</li>
<li>页面（Page）</li>
<li>目录</li>
<li>标签</li>
</ul>
<p>由于是第一版，目前这个工具的逻辑就是这样的：</p>
<ol>
<li>首先获取到Wordpress站点下所有的正常页面（已发布，无密码）</li>
<li>让用户选择哪些页面需要被推送</li>
<li>用户点击按钮，请求经由AJAX发回后台</li>
<li>后台调用百度接口，实行推送</li>
<li>返回并显示结果</li>
</ol>
<p>实际的效果就像这样（<del>点此参观</del> 2016-03-10更新：由于已更换为插件模式，原页面失效）：</p>
<p><img src="https://static.wxsm.space/blog/48595794-3eec3f80-e991-11e8-9965-17782fe609a2.jpg"></p>
<p>这个工具目前还很简陋。当然，如果你没有登录或者已登陆但没有管理员权限的话，点击Submit是会被拒绝的。</p>
<h2 id="未来的目标"><a href="#未来的目标" class="headerlink" title="未来的目标"></a>未来的目标</h2><p>虽然是一个简单的东西，但我觉得它可以变得更好：</p>
<ol>
<li>用户应该可以填写自定义的链接</li>
<li>它应该记住哪些链接已经被提交过了，这个状态应该显示在页面上，并且不再自动勾选</li>
<li>自动触发推送的功能尚未实现，这个也是很重要的</li>
<li>表格可以以一种更好的形式展现</li>
<li>Log可以写得更友好一些</li>
<li>做成插件</li>
<li>……</li>
</ol>
<p>如无意外，这些都将在之后的版本更新。</p>
<p>GitHub: <a href="https://github.com/wxsms/baidu-submit-for-wordpress">https://github.com/wxsms/baidu-submit-for-wordpress</a></p>
]]></content>
      <tags>
        <tag>php</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化部署: 从脚本到 K8s</title>
    <url>/2020/automatic-cd-from-shell-scripts-to-k8s/</url>
    <content><![CDATA[<p>如果公司有专业运维，项目的部署上线过程一般来说开发者都不会接触到。但是很不幸，我所在的团队没有独立的运维团队，所以一切都得靠自己（与同事）。</p>
<p>以下都只是工作中逐步优化得到的经验总结，并且只以 Node.js 程序部署为例。</p>
<span id="more"></span>

<h2 id="部署上线的原始版本"><a href="#部署上线的原始版本" class="headerlink" title="部署上线的原始版本"></a>部署上线的原始版本</h2><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>举例：服务器使用 PM2 管理部署。纯手工操作：</p>
<div id="flowchart-0" class="flow-chart"></div>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>整个过程耗时 10~30 分钟不等。</p>
<p>优点：</p>
<ol>
<li>不依赖任何工具&#x2F;系统</li>
<li>适用于任何分支</li>
</ol>
<p>缺点：</p>
<ol>
<li>麻烦、耗时</li>
<li>易出错</li>
<li>无法持续部署</li>
<li>多节点怎么办？</li>
</ol>
<h2 id="基于-CI-系统的全自动版本"><a href="#基于-CI-系统的全自动版本" class="headerlink" title="基于 CI 系统的全自动版本"></a>基于 CI 系统的全自动版本</h2><p>一般来说企业都会有一套 CI 系统，可能是传统的 Jenkins，也可能是 Gitlab CI &#x2F; Github Actions &#x2F; Travis CI &#x2F; Circle CI 等等。它们之间大同小异，都是通过某种方式写好若干份配置文件，当某些操作（如 git push）触发时以及满足某种条件（如当前分支为发布分支，或提交了 tag 等）执行某些任务。</p>
<p>这里使用 Gitlab CI 举例，CI&#x2F;CD 通过 Gitlab Runner 完成，服务器使用 PM2 管理部署。</p>
<h3 id="流程图-1"><a href="#流程图-1" class="headerlink" title="流程图"></a>流程图</h3><div id="flowchart-1" class="flow-chart"></div>

<h3 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h3><p>配置文件 <code>.gitlab-ci.yml</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">node</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">--frozen-lockfile</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码测试</span></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">lint</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端代码构建测试</span></span><br><span class="line"><span class="attr">build-frontend:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布 dev 环境，其他环境略</span></span><br><span class="line"><span class="attr">deploy-dev:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="comment"># 仅在 release-dev 分支上执行改任务</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">release-dev</span> </span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build:dev</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">scp</span> <span class="string">-r</span> <span class="string">.</span> <span class="string">user@host:~/path/to/deploy</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ssh</span> <span class="string">user@@host</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">        pm2 delete -s frontend || true &amp;&amp;</span></span><br><span class="line"><span class="string">        pm2 delete -s server || true &amp;&amp;</span></span><br><span class="line"><span class="string">        pm2 serve /path/to/deploy/frontend/ 8080 --name frontend &amp;&amp;</span></span><br><span class="line"><span class="string">        yarn --cwd /path/to/deploy/server/ &amp;&amp;</span></span><br><span class="line"><span class="string">        pm2 start /path/to/deploy/server/server.js --name server&quot;</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>优点：</p>
<ol>
<li>全过程仅依赖 Gitlab 与 Gitlab Runner （基于或不基于容器）</li>
<li>全自动测试，提交到发布分支则全自动部署，测试失败的代码不会被部署</li>
</ol>
<p>缺点：</p>
<ol>
<li>需要在 Gitlab 上配置远程机器的登录凭证（账号&#x2F;密码），或在 Runner 机器上配置 ssh key</li>
<li>Runner 会拥有部署机器的访问权限</li>
<li>多节点？运维？</li>
</ol>
<h2 id="Gitlab-与-Agent-平台结合的半自动版本"><a href="#Gitlab-与-Agent-平台结合的半自动版本" class="headerlink" title="Gitlab 与 Agent 平台结合的半自动版本"></a>Gitlab 与 Agent 平台结合的半自动版本</h2><p>为了解决上述 Runner 机器权限过高的问题，这个版本引入了 Agent 平台的概念。每个企业使用的平台可能有所区别，有可能是自研的（如我司），也有可能是外部提供的的（如「宝塔」）。但大体功能基本一致。</p>
<p>该版本中：</p>
<ol>
<li>CI 通过 Gitlab Runner 完成。任务完成后会将代码打包，并放置于服务器上的某个位置，该位置通过 Nginx 暴露（仅对内）</li>
<li>CD 通过 Agent 平台完成。Agent 从上一步暴露的地址中下载代码，解压缩并放置到指定位置，重启 PM2 服务</li>
</ol>
<h3 id="流程图-2"><a href="#流程图-2" class="headerlink" title="流程图"></a>流程图</h3><div id="flowchart-2" class="flow-chart"></div>

<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>这一个版本中，CI 系统的配置简化了，去除部署部分的任务即可。至于 Agent 平台的配置方式，可能是一个完整的 bash 脚本，也可能是其它配置，就不在此展开了。</p>
<p>优点：</p>
<ol>
<li>CI 过程全自动</li>
<li>CI&#x2F;CD 权限解耦</li>
<li>适用于各种分支</li>
</ol>
<p>缺点：</p>
<ol>
<li>非线上发布过程也需要手动完成，麻烦</li>
<li>严重依赖 Agent 平台</li>
<li>运维？</li>
</ol>
<h2 id="Gitlab-与-k8s-结合的全自动版本-v1"><a href="#Gitlab-与-k8s-结合的全自动版本-v1" class="headerlink" title="Gitlab 与 k8s 结合的全自动版本 v1"></a>Gitlab 与 k8s 结合的全自动版本 v1</h2><p>k8s (kubernetes) 是一个容器集群部署管理系统。</p>
<p>容器基础知识：</p>
<ol>
<li><a href="https://docs.docker.com/get-started/overview/#docker-objects">镜像 Image</a></li>
<li><a href="https://docs.docker.com/get-started/overview/#docker-objects">容器 Container</a></li>
</ol>
<p>k8s 基础知识：</p>
<ol>
<li><a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/">工作单元 pod</a></li>
<li><a href="https://kubernetes.io/zh/docs/concepts/services-networking/service/">服务 service</a></li>
<li><a href="https://kubernetes.io/zh/docs/concepts/architecture/nodes/">节点 node</a></li>
<li><a href="https://kubernetes.io/zh/docs/tasks/manage-kubernetes-objects/kustomization/">Kustomize</a></li>
</ol>
<h3 id="流程图-3"><a href="#流程图-3" class="headerlink" title="流程图"></a>流程图</h3><div id="flowchart-3" class="flow-chart"></div>

<h3 id="技术细节-1"><a href="#技术细节-1" class="headerlink" title="技术细节"></a>技术细节</h3><p><code>Dockerfile</code>:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --no-cache --update nodejs nodejs-npm yarn</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> adduser -u 1000 -D app -h /data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> app</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --<span class="built_in">chown</span>=app start.sh /data/start.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;/data/start.sh&quot;</span> ]</span></span><br></pre></td></tr></table></figure>

<p><code>start.sh</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从文件服务器获取该版本包</span></span><br><span class="line">VERSION_DEPLOY_HTTPCODE=`curl -s <span class="string">&quot;https://xxx/<span class="variable">$&#123;VERSION&#125;</span>&quot;</span> -o pkg.tgz -w <span class="string">&quot;%&#123;http_code&#125;&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$VERSION_DEPLOY_HTTPCODE</span>&quot;</span> == <span class="string">&quot;200&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;using version: <span class="variable">$&#123;VERSION&#125;</span>&quot;</span></span><br><span class="line">    tar zxf pkg.tgz</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;version package not exist: <span class="variable">$&#123;VERSION&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sh deploy.sh</span><br></pre></td></tr></table></figure>


<p>kill 实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// koa</span></span><br><span class="line">router.<span class="title function_">all</span>(<span class="string">&#x27;/api/kill&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable constant_">IS_PROD</span>) &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">0</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>优点：</p>
<ol>
<li>CI 过程全自动</li>
<li>非线上环境 CD 全自动，线上环境 CD 手动指定版本，兼顾方便与安全</li>
<li>无需配置远程机器权限</li>
</ol>
<p>缺点：</p>
<ol>
<li>k8s 使用原始镜像启动 pod，拉取代码与安装依赖的过程非常耗时（每次启动都是全新镜像，无缓存）。</li>
<li>CD 过程不确定性较多，存在代码文件服务器故障、依赖安装故障等风险。</li>
<li>kill 指令发出后服务会暂时不可用。</li>
<li>多节点？</li>
</ol>
<h2 id="Gitlab-与-k8s-结合的全自动版本-v2"><a href="#Gitlab-与-k8s-结合的全自动版本-v2" class="headerlink" title="Gitlab 与 k8s 结合的全自动版本 v2"></a>Gitlab 与 k8s 结合的全自动版本 v2</h2><p>为了解决上面的问题 3&#x2F;4，引入 <code>Consul</code> 对 CI&#x2F;CD 过程做出了改进。</p>
<p>Consul 是为基础设施提供服务发现和服务配置的工具，包含多种功能，这次用到了其中两个功能：</p>
<ol>
<li>服务发现</li>
<li>健康检查</li>
</ol>
<h3 id="流程图-4"><a href="#流程图-4" class="headerlink" title="流程图"></a>流程图</h3><div id="flowchart-4" class="flow-chart"></div>

<h3 id="技术细节-2"><a href="#技术细节-2" class="headerlink" title="技术细节"></a>技术细节</h3><p>这个流程里面涉及到几个问题：</p>
<h4 id="关于“逐个发送-kill-指令”"><a href="#关于“逐个发送-kill-指令”" class="headerlink" title="关于“逐个发送 kill 指令”"></a>关于“逐个发送 kill 指令”</h4><p>虽然通过 Consul 可以获取到所有运行中 pod 的 ip 及端口，但是如果集中发送 kill 命令仍然会造成服务不可用。目前我司服务端的 CI 就有这个问题，他们虽然每个 kill  会有一段固定时间的 sleep 间隔，但无法保证下一个 kill 发出时上个服务时候已重启完毕。</p>
<p>为了解决这个问题，我写了一个脚本。</p>
<p>流程：</p>
<div id="flowchart-5" class="flow-chart"></div>

<p>代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此脚本在gitlab-runner中作为CI的最后一步执行</span></span><br><span class="line"><span class="comment"> * 在非线上环境中可以对容器进行逐个重启，尽量减少downtime</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保线上环境不执行此脚本</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">request</span> (host, port, path) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>((<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> req = http.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">hostname</span>: host,</span><br><span class="line">      <span class="attr">port</span>: port,</span><br><span class="line">      <span class="attr">path</span>: path,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">      <span class="attr">timeout</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">      res.<span class="title function_">setEncoding</span>(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">      <span class="keyword">let</span> data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      res.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">        data += chunk</span><br><span class="line">      &#125;)</span><br><span class="line">      res.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(&#123;</span><br><span class="line">          <span class="attr">status</span>: res.<span class="property">statusCode</span>,</span><br><span class="line">          data</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">message</span>)</span><br><span class="line">      <span class="title function_">resolve</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    req.<span class="title function_">end</span>()</span><br><span class="line">  &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">sleep</span> (time) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, time)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 各环境的consul请求地址</span></span><br><span class="line">  <span class="comment">// 具体使用时需要填入指定 host 与 port</span></span><br><span class="line">  <span class="keyword">const</span> apiMap = &#123;</span><br><span class="line">    <span class="attr">development</span>: [<span class="string">&#x27;host&#x27;</span>, <span class="string">&#x27;port&#x27;</span>],</span><br><span class="line">    <span class="attr">qa</span>: [<span class="string">&#x27;host&#x27;</span>, <span class="string">&#x27;port&#x27;</span>],</span><br><span class="line">    <span class="attr">pp</span>: [<span class="string">&#x27;host&#x27;</span>, <span class="string">&#x27;port&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从consul获取已注册pod列表</span></span><br><span class="line">  <span class="keyword">const</span> api = apiMap[process.<span class="property">env</span>.<span class="property">NODE_ENV</span>]</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">request</span>(api[<span class="number">0</span>], api[<span class="number">1</span>], api[<span class="number">2</span>])</span><br><span class="line">  <span class="keyword">if</span> (!res || !res.<span class="property">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;consul find service failed, exiting...&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;consul raw:&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res.<span class="property">data</span>))</span><br><span class="line">  <span class="keyword">const</span> pods = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(res.<span class="property">data</span>).<span class="title function_">map</span>(<span class="function"><span class="params">v</span> =&gt;</span> [v.<span class="property">Service</span>.<span class="property">Address</span>, v.<span class="property">Service</span>.<span class="property">Port</span>])</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;consul services:&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(pods))</span><br><span class="line">  <span class="comment">// 循环杀进程</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pods.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> pod = pods[i]</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------------&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(pod[<span class="number">0</span>], pod[<span class="number">1</span>])</span><br><span class="line">    <span class="comment">// 重启一个pod</span></span><br><span class="line">    <span class="keyword">const</span> killRes = <span class="keyword">await</span> <span class="title function_">request</span>(pod[<span class="number">0</span>], pod[<span class="number">1</span>], <span class="string">`/api/kill`</span>)</span><br><span class="line">    <span class="keyword">if</span> (killRes &amp;&amp; killRes.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="comment">// kill返回成功，这个节点原本是活着的才继续监测它的状态</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(pod[<span class="number">0</span>], <span class="string">&#x27;killed.&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (i === pods.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 已经杀完了最后一个pod，无需继续等待重启，直接退出</span></span><br><span class="line">        process.<span class="title function_">exit</span>(<span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> isServerUp = <span class="literal">false</span></span><br><span class="line">      <span class="comment">// let isFrontendUp = false</span></span><br><span class="line">      <span class="comment">// 每个pod最多检测12次（2分钟），超过时间则放弃，直接重启下一个pod</span></span><br><span class="line">      <span class="keyword">let</span> tryTimes = <span class="number">12</span></span><br><span class="line">      <span class="comment">// 循环检测是否重启成功</span></span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pod[<span class="number">0</span>], <span class="string">&#x27;waiting for pod up...&#x27;</span>, tryTimes)</span><br><span class="line">        <span class="comment">// 每10秒检测一次</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">10</span> * <span class="number">1000</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pod[<span class="number">0</span>], <span class="string">&#x27;check if pod up...&#x27;</span>)</span><br><span class="line">        <span class="comment">// 如果返回200表示已服务已重新启动</span></span><br><span class="line">        <span class="keyword">const</span> serverRes = <span class="keyword">await</span> <span class="title function_">request</span>(pod[<span class="number">0</span>], pod[<span class="number">1</span>], <span class="string">`/api/health-check`</span>)</span><br><span class="line">        isServerUp = !!(serverRes &amp;&amp; serverRes.<span class="property">status</span> === <span class="number">200</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pod[<span class="number">0</span>], <span class="string">&#x27;pod server up:&#x27;</span>, isServerUp)</span><br><span class="line">        <span class="comment">// 等待 k8s readinessProbe 开始，节点被认为已存活，则可以对外访问</span></span><br><span class="line">        <span class="keyword">if</span> (isServerUp) &#123;</span><br><span class="line">          <span class="keyword">const</span> waitSecondsStr = process.<span class="property">env</span>.<span class="property">WAIT_FOR_PROBE_SECONDS</span> || <span class="string">&#x27;10&#x27;</span></span><br><span class="line">          <span class="keyword">const</span> waitSeconds = <span class="built_in">parseInt</span>(waitSecondsStr)</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">isNaN</span>(waitSeconds) || waitSeconds &gt;= <span class="number">120</span> || waitSeconds &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 最大等待120秒，超过视为参数错误</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(pod[<span class="number">0</span>], <span class="string">`WAIT_FOR_PROBE_SECONDS is invalid, skip waiting for prob.`</span>)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(pod[<span class="number">0</span>], <span class="string">`pod is up internally, but need to wait for live probe (<span class="subst">$&#123;waitSeconds&#125;</span>s)...`</span>)</span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">sleep</span>(waitSeconds * <span class="number">1000</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">while</span> (!isServerUp &amp;&amp; --tryTimes &gt; <span class="number">0</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(pod[<span class="number">0</span>], <span class="string">&#x27;kill failed, skip.&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在 gitlab-ci 的最后一步执行此脚本：</p>
<p><code>.gitlab-ci.yml</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="attr">deploy-dev:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">release-dev</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./build.sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">NODE_ENV=development</span> <span class="string">SERVICE_NAME=some-name</span> <span class="string">npm_config_registry=http://private.registry.com</span> <span class="string">npx</span> <span class="string">restart-project-via-consul-script@latest</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<h4 id="关于“解注册所有同名服务”与“注册自己”"><a href="#关于“解注册所有同名服务”与“注册自己”" class="headerlink" title="关于“解注册所有同名服务”与“注册自己”"></a>关于“解注册所有同名服务”与“注册自己”</h4><p>项目内部使用 <a href="https://www.npmjs.com/package/consul">https://www.npmjs.com/package/consul</a> 来与 Consul 通信。</p>
<p>需要“解注册所有同名服务”的原因：</p>
<p>Consul 在注册服务时并没有类似“主键”的概念，一个 Consul 有多个 Agent，也就是说相同 ip、相同 id 的服务可能会在不同 Agent 上被注册多次，并且由于 pod 的 ip 是短暂的，每次重启 pod 获得的 ip 可能会有差异，因此如果不进行解注册就会导致从 Consul 上获得的服务与现实正在运行的不一致。</p>
<p>流程：</p>
<div id="flowchart-6" class="flow-chart"></div>

<h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><p>优点：</p>
<ol>
<li>CI 过程全自动</li>
<li>非线上环境 CD 全自动，线上环境CD手动指定版本，兼顾方便与安全</li>
<li>无需配置远程机器权限</li>
<li>支持多节点</li>
<li>高可用性的重启</li>
</ol>
<p>缺点：</p>
<ol>
<li>k8s 使用原始镜像启动 pod，拉取代码与安装依赖的过程非常耗时（每次启动都是全新镜像，无缓存）。</li>
<li>CD 过程不确定性较多，存在代码文件服务器故障、依赖安装故障等风险。</li>
</ol>
<p>为什么会做成这个样子呢，因为我司的服务端使用 golang 是走的这一套流程，但是使用 golang 打包编译出的是一个二进制文件，镜像直接拉取就可以启动，不需要依赖安装等步骤。因此他们使用这种方式的缺点并不明显。但是对于 Nodejs 程序来说，这依然是一个较大缺陷。</p>
<h2 id="Gitlab-与-k8s-结合的全自动版本-v3"><a href="#Gitlab-与-k8s-结合的全自动版本-v3" class="headerlink" title="Gitlab 与 k8s 结合的全自动版本 v3"></a>Gitlab 与 k8s 结合的全自动版本 v3</h2><p>为了解决上面的问题 1&#x2F;2，这个版本更改了代码部署到 k8s 的方式：使用完整的预构建镜像，而不是空白镜像。</p>
<h3 id="流程图-5"><a href="#流程图-5" class="headerlink" title="流程图"></a>流程图</h3><div id="flowchart-7" class="flow-chart"></div>

<h3 id="技术细节-3"><a href="#技术细节-3" class="headerlink" title="技术细节"></a>技术细节</h3><p><code>build.sh</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Process: 构建 Docker 镜像...&quot;</span></span><br><span class="line">docker build -t wohx-<span class="variable">$&#123;PROJECT_NAME&#125;</span>:<span class="variable">$&#123;COMMIT_SHA&#125;</span> .</span><br><span class="line">docker tag wohx-<span class="variable">$&#123;PROJECT_NAME&#125;</span>:<span class="variable">$&#123;COMMIT_SHA&#125;</span> private.registry.com/<span class="variable">$&#123;PROJECT_NAME&#125;</span>:<span class="variable">$&#123;COMMIT_SHA&#125;</span></span><br><span class="line">docker tag wohx-<span class="variable">$&#123;PROJECT_NAME&#125;</span>:<span class="variable">$&#123;COMMIT_SHA&#125;</span> private.registry.com/<span class="variable">$&#123;PROJECT_NAME&#125;</span>:<span class="variable">$&#123;BRANCH&#125;</span>-latest</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Process: 上传 Docker 镜像...&quot;</span></span><br><span class="line">docker push private.registry.com/<span class="variable">$&#123;PROJECT_NAME&#125;</span>:<span class="variable">$&#123;COMMIT_SHA&#125;</span></span><br><span class="line">docker push private.registry.com/<span class="variable">$&#123;PROJECT_NAME&#125;</span>:<span class="variable">$&#123;BRANCH&#125;</span>-latest</span><br></pre></td></tr></table></figure>

<p><code>Dockerfile</code>:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --no-cache --update nodejs nodejs-npm yarn</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> adduser -u 1000 -D app -h /data</span></span><br><span class="line"><span class="keyword">USER</span> app</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /data</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"><span class="comment"># server 确保在 yarn.lock 与 package.json 没有改变的情况下，此层能被缓存</span></span><br><span class="line"><span class="comment"># frontend 的 node_modules 已在 .dockerignore 中忽略，无需关注</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> ./server &amp;&amp; <span class="built_in">mkdir</span> -p ./frontend/dist</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --<span class="built_in">chown</span>=app server/yarn.lock server/package.json ./server/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yarn --ignore-engines --cwd /data/server/</span></span><br><span class="line"><span class="comment"># 启动脚本</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --<span class="built_in">chown</span>=app ./start.sh ./</span></span><br><span class="line"><span class="comment"># server 源代码层</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --<span class="built_in">chown</span>=app ./server ./server/</span></span><br><span class="line"><span class="comment"># frontend dist 层</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --<span class="built_in">chown</span>=app ./frontend/dist ./frontend/dist</span></span><br><span class="line"><span class="comment"># entry</span></span><br><span class="line"><span class="comment"># CMD [ &quot;node&quot;, &quot;./server/server.js&quot; ]</span></span><br><span class="line"><span class="comment"># start.sh 允许 k8s 自定义启动逻辑</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;/data/start.sh&quot;</span> ]</span></span><br></pre></td></tr></table></figure>

<h3 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3><p>优点：</p>
<ol>
<li>CI过程全自动</li>
<li>非线上环境CD全自动，线上环境CD手动指定版本，兼顾方便与安全</li>
<li>无需配置远程机器权限</li>
<li>支持多节点</li>
<li>高可用性的重启</li>
<li>预构建的镜像，CD 阶段开箱即用，无任何依赖</li>
</ol>
<p>缺点：</p>
<ol>
<li>为了使每个 pod 能够获得一个稳定的名称（用于在 Consul 中注册、解注册），部署类型使用了 Statefulset，因此带来了一些本来不需要的特性。<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.3.0/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.17.1/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始
e=>end: 结束
op1=>operation: 本地打包前端代码
op2=>operation: 将：
前端构建完毕的代码/服务端原始代码
scp 或 sftp 命令上传到远程机器
op3=>operation: ssh 登录远程机器
op4=>operation: 解压缩到指定位置
op5=>operation: 为服务端代码执行 npm install/yarn
op6=>operation: pm2 restart/reload
op7=>operation: 退出远程机器

st->op1->op2->op3->op4->op5->op6->op7->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: 开始
e=>end: 结束
op1=>operation: 本地 git 代码提交
op2=>operation: Gitlab 触发自动构建
op3=>operation: Gitlab 执行代码测试
op4=>operation: Gitlab 执行代码打包
op5=>operation: Gitlab 通过 scp 将代码上传到远程机器
op6=>operation: Gitlab 通过 ssh 登录上远程机器
op7=>operation: Gitlab 在远程机器上执行 pm2 重启命令
op8=>operation: Gitlab 退出远程机器
cond1=>condition: 是否为发布分支？

st(bottom)->op1(bottom)->op2(left)->op3(bottom)->cond1
cond1(yes,right)->op4->op5->op6->op7->op8(left)->e
cond1(no,bottom)->e</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script><textarea id="flowchart-2-code" style="display: none">st=>start: 开始
e=>end: 结束
op1=>operation: 本地 git 代码提交
op2=>operation: Gitlab 触发自动构建
op3=>operation: Gitlab 执行代码测试
op4=>operation: Gitlab 执行代码打包
op5=>operation: Gitlab 更新文件服务器
op6=>operation: 在 Agent 平台上点击发布
op7=>operation: Agent 在指定机器上
执行发布脚本：
从文件服务器拉取最新代码，
解压并执行重启命令
op8=>operation: Agent 退出远程机器
cond1=>condition: 是否为发布分支？
cond2=>condition: 立即发布？

st->op1->op2->op3->cond1
cond1(yes,bottom)->op4(bottom)->op5->cond2
cond1(no,right)->e
cond2(yes,bottom)->op6->op7->op8(right)->e
cond2(no,right)->e</textarea><textarea id="flowchart-2-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-2-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-2-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-2", options);</script><textarea id="flowchart-3-code" style="display: none">st=>start: 开始
e=>end: 结束
op1=>operation: 本地 git 代码提交
op2=>operation: Gitlab 触发自动构建
op3=>operation: Gitlab 执行代码测试
op4=>operation: Gitlab 执行代码打包
op5=>operation: Gitlab 更新文件服务器
op6=>operation: 更改 k8s 相应配置
使用指定 commit sha 发布
op7=>operation: k8s 识别到配置更新
重启指定服务
op8=>operation: 向服务节点发送 kill 命令
CI过程到此结束
op9=>operation: k8s pod 收到命令，进程退出
op10=>operation: k8s 自动重新拉起该 pod
op11=>operation: pod 重新拉取名为 latest 的代码
op15=>operation: pod 安装 nodejs 依赖
op12=>operation: pod 启动 nodejs 进程
完成重启
cond1=>condition: 是否为发布分支？
cond2=>condition: 是否为线上发布分支？

st->op1->op2->op3->cond1
cond1(yes)->op4->op5->cond2
cond1(no,right)->e
cond2(yes,left)->op6->op7->e
cond2(no,bottom)->op8->op9->op10->op11->op15->op12->e</textarea><textarea id="flowchart-3-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-3-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-3-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-3", options);</script><textarea id="flowchart-4-code" style="display: none">st=>start: 开始
e=>end: 结束
op1=>operation: 本地 git 代码提交
op2=>operation: Gitlab 触发自动构建
op3=>operation: Gitlab 执行代码测试
op4=>operation: Gitlab 执行代码打包
op5=>operation: Gitlab 更新文件服务器
op6=>operation: 更改 k8s 相应配置
使用指定 commit sha 发布
op7=>operation: k8s 识别到配置更新
重启指定服务
（滚动更新）
op13=>operation: Gitlab 从 Consul 获取
所有活着的节点
op8=>operation: Gitlab 向服务节点列表
逐个发送 kill 命令
CI 过程到此结束
op9=>operation: k8s pod 收到命令，进程退出
op10=>operation: k8s 自动重新拉起该 pod
op11=>operation: pod 重新拉取名为 latest 的代码
op15=>operation: pod 安装 nodejs 依赖
op14=>operation: pod 启动 nodejs 进程，并：
以 pod name 为 id
1. 从 Consul 解注册所有同名服务
2. 向 Consul 注册自己
op12=>operation: pod 完成重启
cond1=>condition: 是否为发布分支？
cond2=>condition: 是否为线上发布分支？

st->op1->op2->op3->cond1
cond1(yes,bottom)->op4->op5->cond2
cond1(no,right)->e
cond2(yes,left)->op6->op7->e
cond2(no,bottom)->op13->op8->op9->op10->op11->op15->op14->op12->e</textarea><textarea id="flowchart-4-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-4-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-4-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-4", options);</script><textarea id="flowchart-5-code" style="display: none">st=>start: 开始
e=>end: 结束
op1=>operation: 获取所有在 Consul 上注册了的节点
op2=>operation: 从下标 0 开始
循环发送 kill 指令
op3=>operation: 等待并检测其重启完毕
cond1=>condition: kill 指令返回成功？
cond2=>condition: 检测成功且未超时？
cond3=>condition: 该节点是最后一个？

st->op1->op2->cond1
cond1(no,right)->op2
cond1(yes)->op3->cond2
cond2(no,left)->op2
cond2(yes)->cond3
cond3(yes)->e
cond3(no,right)->op2</textarea><textarea id="flowchart-5-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-5-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-5-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-5", options);</script><textarea id="flowchart-6-code" style="display: none">st=>start: 开始
e=>end: 结束
op1=>operation: 获取所有在 Consul 上注册了的节点
op2=>operation: 找到所有同名服务
op3=>operation: 从下标 0 开始，
循环发送解注册请求
op4=>operation: 向 Consul 注册自己
cond1=>condition: 已全部解除？

st->op1->op2->op3->cond1
cond1(no)->op3
cond1(yes)->op4->e</textarea><textarea id="flowchart-6-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-6-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-6-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-6", options);</script><textarea id="flowchart-7-code" style="display: none">st=>start: 开始
e=>end: 结束
op1=>operation: 本地 git 代码提交
op2=>operation: Gitlab 触发自动构建
op3=>operation: Gitlab 执行代码测试
op4=>operation: Gitlab 执行代码打包
op15=>operation: Gitlab 根据 Dockerfile
构建项目的完整镜像
op16=>operation: Gitlab 将打好 tag 的
镜像上传到私有云
op6=>operation: 更改 k8s 相应配置
使用指定 commit sha 发布
op7=>operation: k8s 识别到配置更新
重启指定服务
（滚动更新）
op13=>operation: Gitlab 从 Consul 获取
所有活着的节点
op8=>operation: Gitlab 向服务节点列表
逐个发送 kill 命令
CI 过程到此结束
op9=>operation: k8s pod 收到命令，进程退出
op10=>operation: k8s 使用已经构建完成的
最新镜像自动重新拉起该 pod
op14=>operation: pod 启动 nodejs 进程，并：
以 pod name 为 id
1. 从 Consul 解注册所有同名服务
2. 向 Consul 注册自己
op12=>operation: pod 完成重启
cond1=>condition: 是否为发布分支？
cond2=>condition: 是否为线上发布分支？

st->op1->op2->op3->cond1
cond1(yes,bottom)->op4->op15->op16->cond2
cond1(no,right)->e
cond2(yes,left)->op6->op7->e
cond2(no,bottom)->op13->op8->op9->op10->op14->op12->e</textarea><textarea id="flowchart-7-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-7-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-7-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-7", options);</script></li>
</ol>
]]></content>
      <tags>
        <tag>devops</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>奔驰事件与 996</title>
    <url>/2019/benz-and-996/</url>
    <content><![CDATA[<p>4S 店之所以敢贪得无厌、明目张胆，我想很大一部分原因是来自于普通人想要维权实在是太过困难了。想要维权，那就相当于：</p>
<ol>
<li>你得放弃很大一部分的工作时间（甚至丢掉工作）</li>
<li>你得付出前期的诉讼成本</li>
<li>你得面对来自各方的压力（家庭与社会）</li>
<li>你得面对可能最终维权失败的结果</li>
</ol>
<p>再结合最近热议的 996，再来看这件事，对于普通人来说实在是太难了。生活与工作本身已经如此不易，要是再来这么一出，谁顶得住啊。也难怪绝大多数人在受到欺负之后最终只能无奈选择忍气吞声。毕竟大多数国人都是很「精明」的，就算维权成功，带来的收益也可能远不如其负面影响，那么为什么要维权呢？</p>
<p>996 其实也是同样的道理。公司敢于非法压榨员工，员工却无可奈何，只能通过在 Github 发声聊以自慰。近期互联网大佬频频发声，大谈创业艰难史，可是始终是避重就轻，你想奋斗没有人拦着你，但逼别人奋斗是怎么回事呢？问题的关键是「强制」而不是「996」，没有一人提及。最可笑的是马云的「你要来谈法律，那法律有规定这么齐全的设备吗？有规定这么好的食堂吗？」，可以看出这些站在企业顶端的人都是些什么嘴脸。求求你把这些都撤了，给我发合法的加班费好吗？当然这是不可能的，大佬们会跟你谈梦想，谈兄弟，这些都不成，那您请滚吧。</p>
<p>可是有多少人经受得住这种后果呢？一旦维权，即使成功，你也可能被列入行业黑名单，就算他们无法可依。这种事情不是没有先例，我印象中见过好多了。说了一堆废话，最终问题的根源到底在哪里，相信大家都懂的。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>Better Documents</title>
    <url>/2017/better-documents/</url>
    <content><![CDATA[<p>这篇文章记录了我是如何一步步地把 <a href="https://github.com/wxsms/uiv">https://github.com/wxsms/uiv</a> 这个项目的用户文档变得更优雅的。实际上，如何以一种<strong>高效又优雅</strong>的方式编写<strong>实例文档</strong>一直是我的一个疑惑，比如主要的问题体现在：</p>
<ul>
<li>如何使文档更易读？</li>
<li>如何使文档更易于维护？</li>
<li>如何减少编写文档的工作量？</li>
<li>实例代码无可避免地需要手工维护吗？</li>
</ul>
<p>最后一点是让我最头疼的地方。举个例子，我想要给用户展示一个组件的使用方式，以下代码可以在页面上创建一个 Alert：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alert</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>Well done!<span class="tag">&lt;/<span class="name">b</span>&gt;</span> You successfully read this important alert message.<span class="tag">&lt;/<span class="name">alert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么，我总要给用户一个相对应的<strong>实例</strong>吧。我要在我的文档上面就创建一个这样的 Alert，同时告诉用户说你可以这么用。这是一个很普遍的展示方式，那么问题就在这里了，我是否要将<strong>同样的代码写两次</strong>呢？</p>
<p>一开始我确实就是这么做的，虽然我知道这不科学，不高效，更不优雅。但我实在是想不到更好的办法了。</p>
<p>但是，现在，我已经（几乎）把以上的问题都解决了。</p>
<span id="more"></span>

<h2 id="Stage-1"><a href="#Stage-1" class="headerlink" title="Stage-1"></a>Stage-1</h2><p>写文档这件事，实际上跟写文章差不多，写作体验很重要。</p>
<p>在最开始的时候，项目文档是直接用 Vue 文件编写的，没有经过任何处理，没有经验的我甚至还作死地加入了 i18n，可以说是非常有趣了。以至于到最近，在没有发生这次重构之前，我根本不想动它们。</p>
<p>可以想象，我给关键字句加个粗要手写 <code>&lt;b&gt;...&lt;/b&gt;</code>，标记一点代码要用 <code>&lt;code&gt;...&lt;/code&gt;</code>，每写一段话都要注意标签标签标签，文档里充斥这些东西，烦不胜烦。</p>
<p>这阶段的文档，存在的问题主要有：</p>
<ul>
<li>难以编写</li>
<li>无法在网站以外的地方阅读（因为是 Vue 源码）</li>
<li>给项目增加了许多额外代码</li>
<li>手工维护的实例代码</li>
</ul>
<h2 id="Stage-2"><a href="#Stage-2" class="headerlink" title="Stage-2"></a>Stage-2</h2><p>以上提到的写作体验令人作呕，经过了漫长的时间后，在这一阶段得到了解决。某次机缘巧合，我发现了这样一个工具，它可以通过 webpack 将 Markdown 格式的文本直接转换成为 Vue 组件：<a href="https://github.com/QingWei-Li/vue-markdown-loader">vue-markdown-loader</a></p>
<p>比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.md$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;vue-markdown-loader&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这样一来，就可以通过 <code>import [*].md</code> 的方式，得到一个内含 Markdown 内容（已转 HTML）的 Vue 组件。可以直接在页面上用了！</p>
<p>如果不考虑<strong>实例</strong>部分的话，这就已经完美了。准确地说，如果一开始就不需要实例这种东西，那么我肯定会直接用 Gitbook 了。也不需要这个 markdown to vue 来做什么。</p>
<hr>
<p>经过了长时间的折磨的我身心疲惫，最终还是决定尝试一下。</p>
<p>然而，就在这个尝试的过程中惊喜地发现：<strong>它居然还可以执行 Markdown 中的 Code block 中的代码！</strong></p>
<p>这是什么鬼。一开始发现这个的时候我还是很惊讶的。仿佛打开了新世界的大门。</p>
<p><strong>在后来的不断尝试 - 失败 - 尝试的过程中，我发现了它更多的 Feature：</strong></p>
<ul>
<li>可以执行 Code blocks 中的代码（<code>&lt;script&gt;</code>）</li>
<li>可以执行 Code blocks 中的样式（<code>&lt;style&gt;</code>）</li>
<li>可以通过插件给文档 header 加锚点</li>
</ul>
<p><strong>但是，也发现了以下问题：</strong></p>
<ul>
<li>多个 Code blocks 中的 <code>&lt;style&gt;</code> 可以合并，但 <code>&lt;script&gt;</code> 不行，<strong>它始终只会执行所找到的第一段 <code>&lt;script&gt;</code></strong></li>
</ul>
<p>通过查阅 <code>vue-loader</code> 的文档发现，这是 <code>.vue</code> 文件本身的限制：支持多个 <code>&lt;template&gt;</code>，多个 <code>&lt;style&gt;</code>，<strong>一个 <code>&lt;script&gt;</code></strong></p>
<p>也就是说，如果页面上有多个实例需要展示的话，给给。</p>
<p>如果这个问题能够解决的话，再结合我本身的需求，以下内容也需要实现：</p>
<ul>
<li>将实例代码中的 <code>&lt;template&gt;</code> 模板插入到其代码块之前，让其成为 Markdown 文件的一部分，然后 Vue 就会自动将它们统统实例化</li>
</ul>
<hr>
<p><strong>其实到了这里，也就是这两个问题需要解决了。</strong></p>
<p>首先是<strong>模板插入</strong>的问题。这个其实不难，在 Markdown 完成渲染前，通过一些手段找到这些需要渲染的模板，然后手动插入。幸而 loader 提供了 <code>preprocess</code> 钩子，让我能直接完成这件事情。</p>
<p>然后，关于 <code>&lt;script&gt;</code> 这块，我尝试了好久好久，实在是没办法。但是又真的舍不得因为这仅仅一个问题丢弃以上的那么多的好处。于是就想到了一个折中的办法：禁用 loader 的自动执行代码功能，并手动组装代码块。然而一个悲催的问题又出现了：禁用自动代码执行后，<code>&lt;style&gt;</code> 也无法自动执行了。</p>
<p>解决方案：我需要在 <code>preprocess</code> 中将 Code blocks 里面的 <code>&lt;style&gt;</code> 块全部切出来，贴到 code blocks 的外面（比如文件结尾处）去。一开始我还尝试了将它们的内容合并成为一个 <code>&lt;style&gt;</code>，后来发现其实不需要，因为 <code>vue-loader</code> 本身就支持一个文件多个 <code>&lt;style&gt;</code> 节点。</p>
<p>最后的最后，轮到了 <code>&lt;script&gt;</code> 的组装。我尝试了很久的自动合并，比如将它们的 export 内容转为 object 再 merge 啦，function 转为 object 再 merge 啦，toString 再 merge 啦，等等等等，然而各种方式都以失败告终。结论是：我无法将数个字符串代码块直接合并，也无法转为 object 再合并再转回字符串。实在的实在是没办法了，hard code 吧。</p>
<hr>
<p>至此，一个新的解决方案就出现了。简单来说，编写一篇文档，我需要做以下的事情：</p>
<ul>
<li>用 Markdown 写文档以及实例代码</li>
<li>实例代码块中加入约定的标志</li>
<li>注意同一个 Markdown 中的实例代码块的 <code>&lt;script&gt;</code> 不能相互冲突</li>
<li>做完所有事情以后，用我自己的智商和爱将所有的实例代码合并成一份</li>
</ul>
<p>大功告成。</p>
<p>虽然依然有些麻烦，但相比与 Stage-1，我至少解决了以下的大事：</p>
<ul>
<li>文档编写体验大幅度提升！</li>
<li>文档可以在网站以外的地方被阅读（如 Github）</li>
<li>实例的 <code>&lt;template&gt;</code> 与 <code>&lt;style&gt;</code> 代码无需再有特殊照顾</li>
<li>维护工作量大大减少</li>
</ul>
<p>依然存在的问题是：</p>
<ul>
<li>实例的 <code>&lt;script&gt;</code> 代码需要维护两份，而且不能彼此冲突</li>
</ul>
<h2 id="Stage-3"><a href="#Stage-3" class="headerlink" title="Stage-3"></a>Stage-3</h2><p>虽然解决了 80% 的问题，但 Stage-2 依然不完美。我始终想要解决最后一个问题：<strong>无需特殊照顾的实例 <code>&lt;script&gt;</code></strong></p>
<p>想要达到这个目标，有一个完美的办法就是：<strong>将实例也作为子组件来插入到 Markdown 父组件中去</strong>。这样一来，同一页面的实例代码无法冲突的问题也就一并解决了。</p>
<p>显然，通过目前的 loader 无法达到我想要的效果，它只能够简单地将代码插入 Markdown，并不能构建子组件。因此，要解决这个问题，<strong>我需要自己造轮子</strong>。</p>
<p>……</p>
<hr>
<p>于是就有了：</p>
<p><a href="https://github.com/wxsms/vue-md-loader">https://github.com/wxsms/vue-md-loader</a></p>
<p>关于这个轮子，它是原有 markdown-loader 的一个替代品，<strong>并且能够解决以上提出的所有问题</strong>。</p>
<p>除了完善的原有 Markdown 转换功能以外，它还可以将 Markdown 中的实例代码，比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    data () &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">msg</span>: <span class="string">&#x27;Hello world!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.cls</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- some-live-demo.vue --&gt;</span></span><br></pre></td></tr></table></figure>

<p>变成类似这样的结构：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">some-live-demo</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>...<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>A <strong>Vue component</strong> with all it’s <code>&lt;template&gt;</code>, <code>&lt;script&gt;</code> and <code>&lt;style&gt;</code> settled will be <strong>inserted before it’s source code block</strong>.</p>
</blockquote>
<p>毫无疑问，它<strong>支持同一文件中的多个代码块</strong>。</p>
<p>关于这个插件，其实就是一个典型的、简单的 webpack loader，将一个 markdown 文件转换成了可以被 <code>vue-loader</code> 识别并加载的 vue 文件。</p>
<p>它的实现思路主要有：</p>
<ul>
<li>将实例代码块中的 <code>&lt;style&gt;</code> 直接截取，并放到 Markdown 组件下</li>
<li>将实例代码块中的 <code>&lt;script&gt;</code> 中 <code>export default</code> 的内容截取，并作为各自的 Component options</li>
<li>加上相应代码块中的 <code>&lt;template&gt;</code> 中的内容，稍微组装一下，它就成为了一个 Vue component</li>
<li>在 Markdown 组件中局部注册该 component，并将它插入到代码块的前面去</li>
<li>对于 <code>export default</code> 外部的内容，把它们抽取出来，集中放到 Markdown 组件下</li>
</ul>
<p>以上这些操作，全部通过字符串与正则操作就足以完成了。</p>
<p>然而可以发现，这里面仍有一些有待解决的问题：</p>
<ul>
<li><code>&lt;style&gt;</code> 有可能冲突</li>
<li><code>export default</code> 之外的内容有可能冲突</li>
</ul>
<p>这两个问题目前也还没有想到有效的解决办法。但是，就目前来说，满足我的需求已经完全足够了。遗留问题通过后续的开发来逐步解决吧。</p>
<hr>
<p>至此，优雅地编写项目文档的全部要素就齐备了：</p>
<ul>
<li>纯文档编写体验（Markdown）</li>
<li>文档可以在网站以外的地方被阅读（如 Github）</li>
<li>实例代码均无需特殊照顾，所有过程自动完成</li>
<li>没有维护压力</li>
</ul>
<p><strong>Enjoy!</strong></p>
]]></content>
      <tags>
        <tag>vue</tag>
        <tag>webpack</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>BFC 原理及应用</title>
    <url>/2016/bfc-theory-and-applications/</url>
    <content><![CDATA[<h2 id="什么是-BFC"><a href="#什么是-BFC" class="headerlink" title="什么是 BFC"></a>什么是 BFC</h2><p>BFC（Block formatting context）是 CSS 中的一个概念，先来看一下定义 （By MDN）：</p>
<blockquote>
<p>A <strong>block formatting context</strong> is a part of a visual CSS rendering of a Web page. It is the region in which the layout of block boxes occurs and in which floats interact with each other.</p>
</blockquote>
<p>大意就是，BFC 是 Web 页面通过 CSS 渲染的一个块级（Block-level）区域，具有独立性。</p>
<p>BFC 对浮动元素的定位与清除都很重要：</p>
<ul>
<li>浮动元素的定位与清除规则只适用于同一 BFC 中的元素</li>
<li>不同 BFC 中的浮动元素不会相互影响</li>
<li>浮动元素的清除只适用于同一 BFC 中的元素</li>
</ul>
<span id="more"></span>

<h2 id="如何生成-BFC"><a href="#如何生成-BFC" class="headerlink" title="如何生成 BFC"></a>如何生成 BFC</h2><p>一个元素要成为 BFC，必须具备以下特征之一：</p>
<ul>
<li>根元素，或者包含根元素的元素</li>
<li>浮动元素（<code>float</code> 属性不为<code>none</code>）</li>
<li>绝对定位元素（<code>position</code> 属性为 <code>absolute</code> 或 <code>fixed</code>）</li>
<li>行内块级元素（<code>display</code> 属性为 <code>inline-block</code>）</li>
<li>表格单元格或者标题（<code>display</code> 属性为 <code>table-cell</code> 或 <code>table-caption</code>）</li>
<li>元素的 <code>overflow</code> 属性不为 <code>visible</code></li>
<li>Flex 元素（<code>display</code> 属性为 <code>flex</code> 或 <code>inline-flex</code>）</li>
</ul>
<h2 id="BFC-的应用"><a href="#BFC-的应用" class="headerlink" title="BFC 的应用"></a>BFC 的应用</h2><h3 id="自适应双栏布局"><a href="#自适应双栏布局" class="headerlink" title="自适应双栏布局"></a>自适应双栏布局</h3><p>之前一直困扰我的一个问题是，如何使用 CSS 实现一个双栏布局，其中一栏宽度固定，另一栏则自动根据父节点剩余宽度填满容器呢？</p>
<p>因为 CSS 2.x 是不支持计算的，所以不使用 <code>calc</code> 的话，还真的好像没什么办法的样子。</p>
<p>然而，通过使用 BFC 却可以很容易地达到效果。</p>
<p>先来看一个没有 BFC 的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>BFC Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.aside</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#f66</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#fcc</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="https://static.wxsm.space/blog/48595796-3f84d600-e991-11e8-8d0f-1834be558e41.jpg"></p>
<p>在这种情况下，二者共享了同一个 BFC，即 <code>body</code> 根元素，因此，右边元素的定位受到了浮动的影响。</p>
<p>我们给 <code>.main</code> 添加一个属性，让它成为独立的 BFC：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="https://static.wxsm.space/blog/48595797-3f84d600-e991-11e8-9fa6-61ba2b6a3514.jpg"></p>
<p>这就是一个自适应两栏布局了。主栏的宽度是随父节点而自动变化的。</p>
<h3 id="清除内部浮动"><a href="#清除内部浮动" class="headerlink" title="清除内部浮动"></a>清除内部浮动</h3><p>写 CSS 代码的时候经常会遇到一个问题：如果一个元素内部全部是由浮动元素组成的话，那么它经常会没有高度，即“不能被撑开”。</p>
<p>我们可以通过在所有浮动元素的最后清除浮动来解决问题，但通过 BFC 的方式其实更简单。</p>
<p>只需要通过任意方式将浮动元素的容器转换为 BFC（比如添加 <code>overflow: hidden</code> 属性），即使不清除浮动，其依然能被正常“撑开”。</p>
<p>就像这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>BFC Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">660px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#fcc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#f66</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="https://static.wxsm.space/blog/48595798-3f84d600-e991-11e8-9663-c217a3190220.jpg"></p>
<h3 id="清除-margin-重叠"><a href="#清除-margin-重叠" class="headerlink" title="清除 margin 重叠"></a>清除 margin 重叠</h3><p>场景：我们连续定义两个 <code>div</code>，并且都给予 <code>margin: 100px</code> 属性，实际上它们之间的距离也将是 100px 而非 200px，因为 margin 重叠了。</p>
<p>如果不想让 margin 出现这种重叠的情况，依然可以使用 BFC：给二者都各自套上一个 BFC 容器（或者其中之一），因为 BFC 的独立性，内部布局不会产生对外影响，外部也不会产生对内影响，所以二者的 margin 属性都能生效，最终就能得到 200px 的间距。</p>
<p>这个就不举实际例子了。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>博客迁移至 Hexo</title>
    <url>/2021/blog-migrate-to-hexo/</url>
    <content><![CDATA[<p>博客迁移至 Hexo。主要原因是：</p>
<ol>
<li>Vuepress 有部分 bug 难以忍受，而且 v1 仓库已经停止维护了；</li>
<li>Vuepress 的功能对于 blog 来说还是有些弱；</li>
<li>Vuepress v1 存在文章数量增加，首屏加载大小不断变多的问题；</li>
<li>Vuepress 没有 blog 主题，而我自己写的主题是基于 v1 的，且无法升上 v2 (因为：为了解决问题 3，v2 中 <code>$posts</code> 变量被移除了，而该主题的首页依赖这个变量做渲染)；</li>
<li>…… (其它难以忍受的问题)</li>
</ol>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog Migrated to VuePress</title>
    <url>/2019/blog-migrated-to-vuepress/</url>
    <content><![CDATA[<p>博客正式迁移到了 <a href="https://vuepress.vuejs.org/">VuePress</a>，有以下两点原因：</p>
<ol>
<li>想做一个极简化改版，但懒得折腾了</li>
<li>希望以后重心放在写文章，而不是维护博客上</li>
</ol>
<p>共勉。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>博客迁移</title>
    <url>/2015/blog-migration/</url>
    <content><![CDATA[<p>原来的博客太简陋了（虽然现在依然很简陋），一直想改都没有时间，最近在公司培训了三个月的Java也发现自己差不多忘了怎么写C#代码，曾经觉得很顺手的IDE用起来也不习惯了，反正就是改不下去了。鉴于工作以后空闲时间变得捉襟见肘，最终还是放弃了自己动手的想法，直接用了模板博客。虽然没有了一切如己所愿的快感，但毕竟是开源软件，想怎么玩都可以，感觉还是不错的选择。</p>
<p>7&#x2F;25&#x2F;2019 注：当时是迁移到了 WordPress</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap file input in Firefox</title>
    <url>/2016/bootstrap-file-input-in-firefox/</url>
    <content><![CDATA[<p>默认的Bootstrap文件上传框在Chrome&#x2F;Firefox&#x2F;IE上的表现都不一样，如下所示。 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>Chrome:</p>
<p><img src="https://static.wxsm.space/blog/48595781-3c89e580-e991-11e8-862e-85065c8e5600.png"></p>
<p>Firefox:</p>
<p><img src="https://static.wxsm.space/blog/48595784-3d227c00-e991-11e8-84c4-7d2db516c937.png"></p>
<p>IE:</p>
<p><img src="https://static.wxsm.space/blog/48595780-3c89e580-e991-11e8-81d2-824167e8e0ba.png"></p>
<p>先忽略掉文字表述的差异（由浏览器所使用语言引起），可以看到File input在Chrome和FF下的表现比较相似，IE则差距略大。但是至少Chrome和IE是可以正常显示其样式的，FF则出现了奇怪的样式问题，好像因为按钮太大而超出了输入框。 解决方法也很简单，最快捷的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.form-control</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这个方法可能会影响到其它输入框组，可以稍作修改：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.form-control</span><span class="selector-attr">[type=file]</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样CSS就会自动选择类型为file的输入框并且添加以上样式。虽然IE家族对CSS属性选择器的支持有限制（7&#x2F;8）或者完全不支持（6），但是实际上并不影响。因为Bootstrap最低也只能支持到IE 9或IE 8（添加额外库），所以这个方法已经足够了。 修改后的Firefox（Chrome&#x2F;IE无变化）：</p>
<p><img src="https://static.wxsm.space/blog/48595785-3d227c00-e991-11e8-81e8-b22b912b7206.png"></p>
]]></content>
      <tags>
        <tag>bootstrap</tag>
        <tag>firefox</tag>
      </tags>
  </entry>
  <entry>
    <title>做了一个 b 站视频下载与 mp3 转换工具</title>
    <url>/2023/bv2mp3/</url>
    <content><![CDATA[<p>b 站上的歌姬，很多歌只发布在 b 站。比如说直播时唱的歌，或者一些发布到正经音乐平台上会有版权问题的歌。然而，对于爱听歌的人来说，b 站的听歌体验实在是太差了，这里就不展开细说。</p>
<p>我习惯用网易云听歌。网易云虽然版权方面很惨，但有它一个很好用的功能：云盘。每个用户有 60G 的云盘容量，基本用不完，不管是什么歌，有没有版权，只要上传上去了就能随时随地听。因此，我的目标是，希望可以有一个自动化的工具，帮我把 b 站上的歌以 mp3 的格式下载下来，让我可以上传到云盘，这样我就可以用网易云听歌了。</p>
<p>综上所述，我就做了这么一个小工具：<a href="https://github.com/wxsms/bilibili-video2mp3">bv2mp3</a> ，这是一个开源工具，完整的代码可以在代码仓库中找到。下面，我主要讲一下这个工具的实现思路以及优化过程。</p>
<p><img src="/2023/bv2mp3/bv2mp3.png" alt="126f0ee04db59831d6a9820ac89c471.jpg"></p>
<span id="more"></span>

<h2 id="在这之前"><a href="#在这之前" class="headerlink" title="在这之前"></a>在这之前</h2><p>起初，我还是不愿意自己造轮子的，毕竟我觉得这应该是个非常 common 的需求，应该会有不少东西可以拿来直接用。</p>
<p>最开始的时候，我尝试使用了网络上的一些随处可见的在线服务，搜索“b 站视频下载”可以找到很多相关的在线网站。此类服务通常来说是能用的，但是当需要下载的量一旦大起来以后，它就显得非常麻烦了。比如说它需要看广告，或者下载的质量参差不齐，并且需要下载后手动再转一次MP3，非常麻烦。</p>
<p>在受够了此类工具以后，我开始转向一些付费工具。我找到了一款比较强大的“哔哩哔哩助手”浏览器插件。只要付费，它就能提供将视频直接下载为 mp3 的功能。并且可以直接在 b 站页面上操作，相对来讲比较好用。但是用了几个月下来以后，仍然觉得还不够好：</p>
<ol>
<li>首先，当然是因为它要付费；</li>
<li>其次，我要下载的一般都是整个播放列表，而这款插件只能一次下载一个分集，这意味着我要将分集一个一个地打开，再一个一个地打开助手菜单，找到并点击MP3下载按钮；</li>
<li>有时候，我甚至需要一次性下载多个播放列表，这种体验的痛苦就成倍增加了。</li>
</ol>
<p>总的来说，它虽然能用，但是用户体验依旧很原始。</p>
<p>我想要的是：可以一次性下载整个列表里面的所有视频，甚至一次性下载多个列表，然后将他们批量转为 mp3 的工具。</p>
<p>找了一圈 GitHub，虽然有类似的工具，但都不能完美契合我的需求。因此我决定：这次还是自己来吧！</p>
<h2 id="程序主框架"><a href="#程序主框架" class="headerlink" title="程序主框架"></a>程序主框架</h2><p>我希望我做的工具可以尽可能地简单（无论是从使用还是开发层面）：</p>
<ol>
<li>它是高度定制化的，可以只为我服务（当然如果可以帮助到其它人就更好了）；</li>
<li>它不需要界面，因为写界面是很麻烦的事情，只需要一个命令行就好了；</li>
<li>它可以一键帮我完成上述所有事情：<ol>
<li>下载一个或多个列表里面的所有视频</li>
<li>将视频转为mp3</li>
<li>拥有批量化自动命名、自动失败重试等其它基本功能</li>
<li>上传到网易云盘这一步，由于没有找到网易云的可用接口，因此这一步仍需手动</li>
</ol>
</li>
</ol>
<p>从“尽可能地简单”为出发点，总体技术栈自然是选择我最熟悉的 Node.js，并且是 v16+，以此直接开启 <code>type=module</code>，舍弃 cjs 的裹脚布。</p>
<p>然后，首选 tj 的 <a href="https://github.com/tj/commander.js/">commander.js</a> 来实现命令行程序。</p>
<p>那么，问题来了，将一个 b 站视频下载下来并且转为mp3，要分几步？</p>
<h3 id="爬取网页"><a href="#爬取网页" class="headerlink" title="爬取网页"></a>爬取网页</h3><p>以 <a href="https://www.bilibili.com/video/BV1wV411t7XQ">https://www.bilibili.com/video/BV1wV411t7XQ</a> 为例。这个列表里面共有 336 首歌，我需要把它们全部下载下来。</p>
<p>点击列表中的视频，仔细观察可以发现，它们的 url 是有类似的模式的，比如：</p>
<ul>
<li>第一集是 <a href="https://www.bilibili.com/video/BV1wV411t7XQ?p=1%EF%BC%8C%E6%88%96%E8%80%85%E5%A6%82%E6%9E%9C%E4%B8%8D%E5%8A%A0">https://www.bilibili.com/video/BV1wV411t7XQ?p=1，或者如果不加</a> <code>p=1</code>，默认就是第一集</li>
<li>第二集是 <a href="https://www.bilibili.com/video/BV1wV411t7XQ?p=2">https://www.bilibili.com/video/BV1wV411t7XQ?p=2</a></li>
<li>第三集是 <a href="https://www.bilibili.com/video/BV1wV411t7XQ?p=3">https://www.bilibili.com/video/BV1wV411t7XQ?p=3</a></li>
<li>以此类推…</li>
</ul>
<p>可以发现它们前面的格式都是一样的，区别只在后面的 <code>?p=x</code>。</p>
<p>那么我需要做的事就是：</p>
<ol>
<li>程序接收一个链接</li>
<li>找到链接里面共有多少集</li>
<li>然后分别组装每一集的 url 并下载</li>
</ol>
<p>从国际惯例来讲，为了实现步骤2，我需要去爬取这个网页，解析里面的 HTML，找到跟集数有关的节点。但是 b 站是个特例，它有更方便的办法。它的 HTML 网页上挂载了一个 <code>__INITIAL_STATE__</code> 对象，下面就有准确的信息。</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="/2023/bv2mp3/84d3afb467a54e999e35e9acc4fa2206.png"></div><div class="group-picture-column"><img src="/2023/bv2mp3/1d085d07b0214fd6ad2c0ef871af2ae8.png"></div></div></div>

<p>因此，这一步变得非常简单，只需要解析这个对象即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getDataByUrl</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> agent.<span class="title function_">get</span>(url);</span><br><span class="line">  <span class="comment">// console.log(data)</span></span><br><span class="line">  <span class="keyword">const</span> initialStateStr = data.<span class="title function_">match</span>(<span class="regexp">/__INITIAL_STATE__=(.*?);/</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(initialStateStr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">getDataByUrl</span>(<span class="string">`https://www.bilibili.com/video/BV1wV411t7XQ`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">videoData</span>.<span class="property">pages</span>);</span><br></pre></td></tr></table></figure>

<p>这样一来就拿到了这个列表的分集信息，接下来要解决下载问题。</p>
<h3 id="下载视频文件"><a href="#下载视频文件" class="headerlink" title="下载视频文件"></a>下载视频文件</h3><p>之前的网页上没有找到视频下载地址的信息，因此这部分需要单独的接口。通过在 GitHub 上寻找类似项目得到了一个可用方案：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> params = <span class="string">`cid=<span class="subst">$&#123;cid&#125;</span>&amp;module=movie&amp;player=1&amp;quality=112&amp;ts=1`</span>;</span><br><span class="line"><span class="keyword">const</span> params =<span class="string">`appkey=iVGUTjsxvpLeuDCf&amp;cid=<span class="subst">$&#123;cid&#125;</span>&amp;otype=json&amp;qn=112&amp;quality=112&amp;type=`</span>;</span><br><span class="line"><span class="keyword">const</span> sign = crypto.<span class="title function_">createHash</span>(<span class="string">&quot;md5&quot;</span>).<span class="title function_">update</span>(params + <span class="string">&quot;[apikey]&quot;</span>).<span class="title function_">digest</span>(<span class="string">&quot;hex&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> playUrl = <span class="string">`https://interface.bilibili.com/v2/playurl?<span class="subst">$&#123;params&#125;</span>&amp;sign=<span class="subst">$&#123;sign&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>

<p>其中这个 cid 在之前的 pages 变量中是存在的，然后需要将 <code>[apikey]</code> 替换为实际的 apikey（大家都把它放在仓库中了，我也不例外，取之 GitHub 用之 GitHub，反正不是我泄密的就不算泄密），并且用 md5 算法做签名。至于其它变量，不太明白它们的实际意义。</p>
<p>这个工具主攻 mp3 转换，因此也不需要关心视频质量、水印等问题，突出一个能用就行。</p>
<p>调用接口，可以得到一个 flv 的下载链接：</p>
<p><img src="/2023/bv2mp3/87679900c2fe4fce89f7d5bc113a0381.png"></p>
<p>然后就是简单粗暴的下载环节：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">agent</span>(&#123;</span><br><span class="line">   url,</span><br><span class="line">   <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">   <span class="attr">responseType</span>: <span class="string">&#x27;stream&#x27;</span>,</span><br><span class="line">   <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="comment">// 表示从第 0 个字节开始下载，直到最后一个字节，即完整的文件</span></span><br><span class="line">      <span class="title class_">Range</span>: <span class="string">`bytes=<span class="subst">$&#123;<span class="number">0</span>&#125;</span>-`</span>,</span><br><span class="line">      <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;PostmanRuntime/7.28.4&#x27;</span>, </span><br><span class="line">      <span class="comment">// 实际调用时发现该接口还需要加上 referer 才能正常调用</span></span><br><span class="line">      <span class="title class_">Referer</span>: <span class="string">&#x27;https://www.bilibili.com/&#x27;</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">   .<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; data, headers &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> writeStream = fs.<span class="title function_">createWriteStream</span>(filename);</span><br><span class="line">     <span class="keyword">const</span> total = <span class="built_in">parseInt</span>(headers[<span class="string">&#x27;content-length&#x27;</span>], <span class="number">10</span>);</span><br><span class="line">     <span class="comment">// 下载到的数据写入文件流</span></span><br><span class="line">     data.<span class="title function_">pipe</span>(writeStream);</span><br><span class="line">     data.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// todo 下载进度</span></span><br><span class="line">     &#125;);</span><br><span class="line">     data.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// todo 下载结束</span></span><br><span class="line">     &#125;);</span><br><span class="line">     data.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// todo 下载出错</span></span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;)</span><br><span class="line">   .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// todo 接口请求出错</span></span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="转换mp3"><a href="#转换mp3" class="headerlink" title="转换mp3"></a>转换mp3</h3><p>在最初的版本，我能直接想到的工具就是 <a href="https://ffmpeg.org/">ffmpeg</a> ，代码里面简单粗暴地直接调用 ffmpeg：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; exec &#125; <span class="keyword">from</span> <span class="string">&#x27;child_process&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">flv2mp3</span> (filename) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mp3 = filename.<span class="title function_">replace</span>(<span class="string">&#x27;.flv&#x27;</span>, <span class="string">&#x27;.mp3&#x27;</span>);</span><br><span class="line">    <span class="title function_">exec</span>(<span class="string">`ffmpeg -i <span class="subst">$&#123;filename&#125;</span>  -q:a 0 <span class="subst">$&#123;mp3&#125;</span>`</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这么做，能用。但是用起来不太舒心。因为我毕竟要先下载一个 C 语言版本的 ffmpeg，并且把它设置到系统 Path 中，这样程序才能正常调用到它。这个对我来说是个一次性的工作，倒也没啥，但是对于想要使用这个工具的其它用户来说就很可能劝退了。但是不管怎么说，主流程到现在已经结束了。我已经完成了下载整个视频列表并且转换成 mp3 的程序，它能正常工作了。</p>
<p>但是，它现在还非常粗糙，需要在细节上做进一步的打磨。</p>
<h2 id="细节优化"><a href="#细节优化" class="headerlink" title="细节优化"></a>细节优化</h2><h3 id="并行下载"><a href="#并行下载" class="headerlink" title="并行下载"></a>并行下载</h3><p>我最早想到的并行方案，是用 lodash.chunk 将视频分割成一个个的小块（如：10个视频一块），处理完一个块再处理下一个块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pageChunks = <span class="title function_">chunk</span>(pages, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> c <span class="keyword">of</span> pageChunks) &#123;</span><br><span class="line"> <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(c.<span class="title function_">map</span>(download2mp3));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方法好处是确实能实现并行下载，并且实现起来非常简单。至于它存在的问题，后面还会提到。</p>
<h3 id="展示进度条"><a href="#展示进度条" class="headerlink" title="展示进度条"></a>展示进度条</h3><p>进度条对于一个下载工具来说至关重要，尤其是并行下载多个任务的时候。好在我不用自己实现，即使是命令行界面也有优秀的现成工具：<a href="https://github.com/visionmedia/node-progress">progress</a> 以及 <a href="https://github.com/pitaj/multi-progress">multi-progress</a> 。</p>
<p>而我只需要对它做一点简单的封装即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Progress</span> <span class="keyword">from</span> <span class="string">&#x27;multi-progress&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> multi = <span class="keyword">new</span> <span class="title class_">Progress</span>(process.<span class="property">stderr</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createProgressBar</span>(<span class="params">index, title, total</span>) &#123;</span><br><span class="line">   <span class="comment">// index 代表本次下载的序号</span></span><br><span class="line">   <span class="comment">// [:bar]是进度条本体</span></span><br><span class="line">   <span class="comment">// percent 进度百分比</span></span><br><span class="line">   <span class="comment">// eta 预估剩余时间</span></span><br><span class="line">   <span class="comment">// status 下载或转换进度</span></span><br><span class="line">   <span class="comment">// title 下载文件的标题</span></span><br><span class="line">  <span class="keyword">return</span> multi.<span class="title function_">newBar</span>(<span class="string">`<span class="subst">$&#123;index&#125;</span> [:bar] :percent :etas :status <span class="subst">$&#123;title&#125;</span>`</span>, &#123;</span><br><span class="line">    <span class="attr">complete</span>: <span class="string">&#x27;=&#x27;</span>,</span><br><span class="line">    <span class="attr">incomplete</span>: <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">total</span>: total,</span><br><span class="line">    <span class="comment">// renderThrottle: 1000,</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">agent</span>(&#123;</span><br><span class="line">   url,</span><br><span class="line">   <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">   <span class="attr">responseType</span>: <span class="string">&#x27;stream&#x27;</span>,</span><br><span class="line">   <span class="attr">headers</span>: &#123;</span><br><span class="line">     <span class="title class_">Range</span>: <span class="string">`bytes=<span class="subst">$&#123;<span class="number">0</span>&#125;</span>-`</span>,</span><br><span class="line">     <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;PostmanRuntime/7.28.4&#x27;</span>,</span><br><span class="line">     <span class="title class_">Referer</span>: <span class="string">&#x27;https://www.bilibili.com/&#x27;</span>,</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;)</span><br><span class="line">   .<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; data, headers &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> writeStream = fs.<span class="title function_">createWriteStream</span>(filename);</span><br><span class="line">     <span class="keyword">const</span> total = <span class="built_in">parseInt</span>(headers[<span class="string">&#x27;content-length&#x27;</span>], <span class="number">10</span>);</span><br><span class="line">     <span class="comment">// 创建一个进度条，给它总字节长度</span></span><br><span class="line">     <span class="keyword">const</span> bar = <span class="title function_">createProgressBar</span>(index, title, total);</span><br><span class="line">     data.<span class="title function_">pipe</span>(writeStream);</span><br><span class="line">     data.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// 下载进度，本次传输的 chunk 字节长度，进度条将自动计算百分比</span></span><br><span class="line">       bar.<span class="title function_">tick</span>(chunk.<span class="property">length</span>, &#123; <span class="attr">status</span>: <span class="string">&#x27;downloading&#x27;</span> &#125;);</span><br><span class="line">     &#125;);</span><br><span class="line">     data.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">       writeStream.<span class="title function_">close</span>();</span><br><span class="line">       <span class="comment">// 将 bar resolve 出去，后面还要用到</span></span><br><span class="line">       <span class="title function_">resolve</span>(bar);</span><br><span class="line">     &#125;);</span><br><span class="line">     data.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// 出错了，进度条到底吧那就</span></span><br><span class="line">       bar.<span class="title function_">tick</span>(total);</span><br><span class="line">       <span class="comment">// 显示下载出错</span></span><br><span class="line">       bar.<span class="title function_">tick</span>(&#123; <span class="attr">status</span>: <span class="string">&#x27;error&#x27;</span> &#125;);</span><br><span class="line">       writeStream.<span class="title function_">close</span>();</span><br><span class="line">       <span class="title function_">reject</span>(err);</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;)</span><br><span class="line">   .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="title function_">reject</span>(err);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="失败重试"><a href="#失败重试" class="headerlink" title="失败重试"></a>失败重试</h3><p>b 站的视频下载地址有一定的失败概率，因此做了一个简单粗暴的失败重试逻辑：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">download2mp3</span>(<span class="params">&#123; url, index &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> b;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 下载文件</span></span><br><span class="line">    <span class="keyword">const</span> &#123; filename, bar &#125; = <span class="keyword">await</span> <span class="title function_">download</span>(url, offsetIndex);</span><br><span class="line">    b = bar;</span><br><span class="line">    <span class="comment">// 开始转换了，设置一下进度条状态</span></span><br><span class="line">    bar.<span class="title function_">tick</span>(&#123; <span class="attr">status</span>: <span class="string">&#x27;converting&#x27;</span> &#125;);</span><br><span class="line">    <span class="comment">// 转换 mp3</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">flv2mp3</span>(filename);</span><br><span class="line">    <span class="comment">// 转换结束了，可以删掉下载的视频文件</span></span><br><span class="line">    <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">unlink</span>(filename);</span><br><span class="line">    <span class="comment">// 设置进度条状态为 done</span></span><br><span class="line">    bar.<span class="title function_">tick</span>(&#123; <span class="attr">status</span>: <span class="string">&#x27;done&#x27;</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">// 失败了</span></span><br><span class="line">    b?.<span class="title function_">tick</span>(&#123; <span class="attr">status</span>: <span class="string">&#x27;error&#x27;</span> &#125;);</span><br><span class="line">    <span class="comment">// 等待 2 秒后，重新开始下载+转换</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">2000</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">download2mp3</span>(&#123; url, index &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法永远不会抛错，只要出错了就一直重试下去。对于我这种脚本程序来说，非常好用。</p>
<h3 id="自定义命名"><a href="#自定义命名" class="headerlink" title="自定义命名"></a>自定义命名</h3><p>我希望下载下来的文件可以按照我想要的规则去命名，这样不管是从哪里下载的文件，最后都不会显得杂乱无章。</p>
<p>这个功能的实现部分参考了“哔哩哔哩助手”这个浏览器插件的做法，使用了 pattern 命名法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">index, title, author, date</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> argv = program.<span class="title function_">opts</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    argv.<span class="property">naming</span></span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&#x27;INDEX&#x27;</span>, index)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&#x27;TITLE&#x27;</span>, title)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&#x27;AUTHOR&#x27;</span>, author)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&#x27;DATE&#x27;</span>, date)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个 <code>naming</code> 参数的默认值是 <code>TITLE-AUTHOR-DATE</code>，也就是 <code>视频标题-视频作者-视频上传日期</code>。它会将这个命名模式套用到具体的文件上。这个东西的用法是很灵活的。比如说，我希望我下载的文件要有序号，另外视频的上传者并不是演唱者，我希望显示演唱者。那么我常用的命名模式是 <code>INDEX-TITLE-yousa-DATE</code>。注意这里第三个坑位变成了 <code>yousa</code>，它并不在支持的 pattern 中，代表的含义就是它将固定为 <code>yousa</code>，不会再被替换了。</p>
<h3 id="ffmpeg-优化"><a href="#ffmpeg-优化" class="headerlink" title="ffmpeg 优化"></a>ffmpeg 优化</h3><p>做开源软件的好处，除了得到用户的肯定外，我永远可以从别人那里学到新的东西，比如：</p>
<p><img src="/2023/bv2mp3/bd22e7fc1754481198b53856c0d119f8.png"></p>
<p>原来 ffmpeg 已经有了 wasm 版本：<a href="https://github.com/ffmpegwasm/ffmpeg.wasm">ffmpeg.wasm</a> 。将 ffmpeg 替换为 ffmpeg.wasm 后，使用时使就不再需要预先安装 C 语言版本的 ffmpeg，也无需设置 path，用户体验可以得到大幅度的提升。</p>
<p>修改后的转换代码（大概长这样）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fetchFile, createFFmpeg &#125; <span class="keyword">from</span> <span class="string">&#x27;@ffmpeg/ffmpeg&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">flv2mp3</span> (filename) &#123;</span><br><span class="line">  <span class="keyword">const</span> after = filename.<span class="title function_">replace</span>(<span class="string">&#x27;.flv&#x27;</span>, <span class="string">&#x27;.mp3&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> ffmpeg = <span class="title function_">createFFmpeg</span>(&#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">  <span class="keyword">await</span> ffmpeg.<span class="title function_">load</span>();</span><br><span class="line">  ffmpeg.<span class="title function_">FS</span>(<span class="string">&#x27;writeFile&#x27;</span>, <span class="string">&#x27;before.flv&#x27;</span>, <span class="keyword">await</span> <span class="title function_">fetchFile</span>(<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), filename)));</span><br><span class="line">  <span class="comment">// ffmpeg -y -i $&#123;filename&#125; -q:a 0 $&#123;mp3&#125;</span></span><br><span class="line">  <span class="keyword">await</span> ffmpeg.<span class="title function_">run</span>(<span class="string">&#x27;-y&#x27;</span>, <span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;before.flv&#x27;</span>, <span class="string">&#x27;-q:a&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;after.mp3&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">writeFile</span>(<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), after), ffmpeg.<span class="title function_">FS</span>(<span class="string">&#x27;readFile&#x27;</span>, <span class="string">&#x27;after.mp3&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看起来很美好。但实际运行起来后，发现一个令人哭笑不得的问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rejection (Error): ffmpeg.wasm can only run one command at a time</span><br></pre></td></tr></table></figure>

<p>它一次居然只能跑一个命令！也就是说，它跟我的多线程下载并不能很好地兼容。当多个文件同时下载完成后，如果即刻开始多个转换，程序就报错了。因此我需要做一个流程控制：当转换正在进行的时候，其它下载完的视频文件需要先进入排队状态：mp3 转换的过程得一个一个来。</p>
<p>根据上述思想修改一下 <code>flv2mp3</code>，用一个全局变量来控制同一时间只有一个任务能进来转换：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 ffmpeg 实例提到外面来，全局共用</span></span><br><span class="line"><span class="keyword">let</span> ffmpeg = <span class="title function_">createFFmpeg</span>(&#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">ffmpeg.<span class="title function_">load</span>();</span><br><span class="line"><span class="keyword">let</span> isRunning = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">flv2mp3</span>(<span class="params">filename, bar</span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (!ffmpeg.<span class="title function_">isLoaded</span>() || isRunning) &#123;</span><br><span class="line">    <span class="comment">// 有其它任务正在进行中，那么就排队等待吧...</span></span><br><span class="line">    bar.<span class="title function_">tick</span>(&#123; <span class="attr">status</span>: <span class="string">&#x27;queueing&#x27;</span> &#125;);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  bar.<span class="title function_">tick</span>(&#123; <span class="attr">status</span>: <span class="string">&#x27;converting&#x27;</span> &#125;);</span><br><span class="line">  isRunning = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 这里是具体的转换任务...</span></span><br><span class="line">  isRunning = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然缺点有点夸张，但思考再三，我觉得跟 C 语言 ffmpeg 的使用体验比起来，这种方式还是更优一点。</p>
<h3 id="并行优化"><a href="#并行优化" class="headerlink" title="并行优化"></a>并行优化</h3><p>前面有提到我一开始设计的并行方案：</p>
<blockquote>
<p>用 lodash.chunk 将视频分割成一个个的小块（如：10个视频一块），处理完一个块再处理下一个块</p>
</blockquote>
<p>这种办法好处是实现简单，但缺点也很明显：b 站似乎对每个下载地址做了限速，因此有时候一个块里面一两个文件特别大，其它文件都下载完了，它还在慢悠悠的下载，让人感到浪费生命。实际上，它可以立即开始余下的其它任务的，只要保证正在运行的总的任务数量不超过设定的数值即可。</p>
<p>也许你会问：既然这么麻烦，为什么不全部同时开始下载呢？这个方式实际上我也试过，但是一旦同时下载的任务太多了（比如上面的一个链接，有 300 多个视频，更何况我们还能支持一次输入多个链接），下载的出错率会陡增。这样反而会导致效率急剧下降。因此是不可取的。</p>
<p>为了解决这个问题，我将并行控制的代码又优化了一下，摒弃了 chunk 的做法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最大的进程数，默认为 10</span></span><br><span class="line"><span class="keyword">let</span> maxThreads = argv.<span class="property">threads</span>;</span><br><span class="line"><span class="comment">// 当前进行中的进程数</span></span><br><span class="line"><span class="keyword">let</span> currentThreads = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 已完成的任务数</span></span><br><span class="line"><span class="keyword">let</span> finished = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> page <span class="keyword">of</span> pages) &#123;</span><br><span class="line">    <span class="keyword">while</span> (currentThreads === maxThreads) &#123;</span><br><span class="line">      <span class="comment">// 运行中的线程数量已达最大值，先排会队吧</span></span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 开始新的线程</span></span><br><span class="line">    currentThreads += <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 注意这里不用 await 了</span></span><br><span class="line">    <span class="title function_">download2mp3</span>(page).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 一个线程结束了</span></span><br><span class="line">      currentThreads -= <span class="number">1</span>;</span><br><span class="line">      finished += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (finished === pages.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="comment">// 所有的任务都已完成，可以退出进程了</span></span><br><span class="line">        process.<span class="title function_">exit</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样一来，任务并行的效率得到了极大的提升：同时进行中的任务数量会始终保持在最接近允许的最大数量的水平。充分利用上电脑的带宽。</p>
<h3 id="ffmpeg-wasm-优化"><a href="#ffmpeg-wasm-优化" class="headerlink" title="ffmpeg.wasm 优化"></a>ffmpeg.wasm 优化</h3><p>上面我们解决了 C 语言 ffmpeg 带来的不适，但是同时引入了新的问题：同时只能运行一个转换任务，其它的下载完的视频要排队。这个问题在并发问题得到优化后被极大地放大了：经常是所有文件都已下载完，却仍有一大批文件在等待转换。这让人感到非常痛苦：我写的程序不应该这么蠢的。</p>
<p>因此，我又开始考虑这个问题的解决方案了：既然一个 ffmpeg.wasm 进程只能跑同时跑一个任务，那我为每个下载任务都单独开一个进程行不行？</p>
<p>Node.js 提供了一个 <code>child_process.exec</code> 函数，可以用来运行一个命令行任务。在最初的版本中，调用 C 语言的 ffmpeg 的任务也是通过这个完成的。现在，我能否利用它来调用 ffmpeg.wasm 呢？</p>
<p>先将 flv2mp3 的函数，抽离为一个独立的文件，在这个文件中直接运行转换：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 要转换的文件名</span></span><br><span class="line">  <span class="keyword">let</span> filename = process.<span class="property">argv</span>[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">let</span> ffmpeg = <span class="title function_">createFFmpeg</span>(&#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">  <span class="keyword">await</span> ffmpeg.<span class="title function_">load</span>();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 转换...</span></span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">// 出错了</span></span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>然后改造原来的 flv2mp3 文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">flv2mp3</span>(<span class="params">filename</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">exec</span>(</span><br><span class="line">      <span class="string">`node <span class="subst">$&#123;join(__dirname, <span class="string">&#x27;_flv2mp3.js&#x27;</span>)&#125;</span> &quot;<span class="subst">$&#123;filename&#125;</span>&quot;`</span>,</span><br><span class="line">      &#123; <span class="attr">cwd</span>: process.<span class="title function_">cwd</span>() &#125;,</span><br><span class="line">      <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改造完后实测，这确实将该问题解决了。现在多个文件同时下载完后，也可以同时开始转换了！虽然同时开启多个转换进程后 CPU 的利用率会飙涨、风扇狂飙，但相比节约的时间来说，这都不是问题。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这个工具现在看起来很简单，并没有什么过人之处。但是我在实现它的时候还是花了非常多的时间去调试。比如说，在加上了进度条后，整个 stdout 都会被进度条占据，console API 难以再打印出错误信息。因此我只能给它设计了一套基于文件的日志系统用来 debug。又比如说，项目早期在下载文件的时候，程序经常莫名奇妙地、没有任何征兆地就退出了，我需要非常细心地去寻找每一个可能抛错的点，尽可能优雅地捕获所有错误。</p>
<p>至今为止我已经用它下载了一千多首 yousa 的歌。这种自己开发工具来解决自己的问题，并且一步步地将它变得完美以及节约生命的愉快感真的是非常棒的。</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="/2023/bv2mp3/d5ac4ae89b5c4827be79b324647af60c.jpg" alt="126f0ee04db59831d6a9820ac89c471.jpg"></div><div class="group-picture-column"><img src="/2023/bv2mp3/4e382b83db7a4dd085e2d2087a774cec.jpg" alt="46ff0c8d1022eaf087e0e42b7cd0319.jpg"></div></div></div>

<p>最后更开心的当然是，我做的工具同时也能给其它素不相识的人带来愉悦：</p>
<p><img src="/2023/bv2mp3/2ed49043d3f046f28740ad1e415b810f.png"></p>
]]></content>
      <tags>
        <tag>nodejs</tag>
        <tag>bilibili</tag>
      </tags>
  </entry>
  <entry>
    <title>Case insensitive auto-complete in OSX Terminal</title>
    <url>/2018/case-insensitive-auto-complete-in-oxs-terminal/</url>
    <content><![CDATA[<p>在 Mac OSX 终端里面由于默认 Home 下面的文件夹都是大写开头，如 Downloads &#x2F; Desktop 等，cd 的时候比较烦。解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo &quot;set completion-ignore-case On&quot; &gt;&gt; ~/.inputrc</span><br></pre></td></tr></table></figure>

<p>然后重启终端即可。</p>
]]></content>
      <tags>
        <tag>osx</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Cache Yarn in Github Actions</title>
    <url>/2020/cache-node-modules-in-github-actions/</url>
    <content><![CDATA[<p>在 CI 中缓存安装下来的依赖项是提速的关键，<a href="https://docs.github.com/en/free-pro-team@latest/actions/guides/caching-dependencies-to-speed-up-workflows">Github Actions 官方文档</a> 提供了如下方案 (NPM)：</p>
<span id="more"></span>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">cache-name:</span> <span class="string">cache-node-modules</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="comment"># npm cache files are stored in `~/.npm` on Linux/macOS</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-</span></span><br><span class="line"><span class="string">          $&#123;&#123; runner.os &#125;&#125;-build-</span></span><br><span class="line"><span class="string">          $&#123;&#123; runner.os &#125;&#125;-</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<p>Yarn 则复杂，多了一步操作（<a href="https://github.com/actions/cache/blob/9ab95382c899bf0953a0c6c1374373fc40456ffe/examples.md#node---yarn">文档</a>）:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">yarn</span> <span class="string">cache</span> <span class="string">directory</span> <span class="string">path</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">yarn-cache-dir-path</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;::set-output name=dir::$(yarn cache dir)&quot;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">yarn-cache</span> <span class="comment"># use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != &#x27;true&#x27;`)</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.yarn-cache-dir-path.outputs.dir</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-yarn-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/yarn.lock&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-yarn-</span></span><br></pre></td></tr></table></figure>

<p>这些方案可以说是又臭又长，我只想简单做个 cache，何必让我关心那么多东西？项目多的话，简直疯了。看看人家 Gitlab 的方案：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">$&#123;CI_COMMIT_REF_SLUG&#125;</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules/</span></span><br></pre></td></tr></table></figure>

<p>简单、明确。</p>
<p>因此，我找到了这个 action <a href="https://github.com/c-hive/gha-yarn-cache">c-hive&#x2F;gha-yarn-cache</a> 作为替代，现在代码可以简化为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">      <span class="comment"># ...</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">c-hive/gha-yarn-cache@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">--frozen-lockfile</span></span><br><span class="line">      <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<p>一行解决。</p>
]]></content>
      <tags>
        <tag>github</tag>
        <tag>devops</tag>
        <tag>nodejs</tag>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 Firewalld</title>
    <url>/2019/centos7-firewall-commands/</url>
    <content><![CDATA[<p><strong>FirewallD</strong> (firewall daemon) 作为 <strong>iptables</strong> 服务的替代品，已经默认被安装到了 CentOS7 上面。</p>
<span id="more"></span>

<h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><h3 id="服务启动-停止"><a href="#服务启动-停止" class="headerlink" title="服务启动&#x2F;停止"></a>服务启动&#x2F;停止</h3><p>启动服务并设置自启动：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start firewalld</span><br><span class="line">sudo systemctl enable firewalld</span><br></pre></td></tr></table></figure>

<p>停止服务并禁用自启动：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop firewalld</span><br><span class="line">sudo systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<h3 id="检查运行状态"><a href="#检查运行状态" class="headerlink" title="检查运行状态"></a>检查运行状态</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --state</span><br><span class="line">sudo systemctl status firewalld</span><br></pre></td></tr></table></figure>

<h3 id="服务重启"><a href="#服务重启" class="headerlink" title="服务重启"></a>服务重启</h3><p>有两种办法可以重启 FirewallD：</p>
<ol>
<li>重启 FirewallD 服务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart firewalld</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>重载配置文件（不断开现有会话与连接）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>建议使用第二种方法。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>FirewallD 使用两个配置集：「<strong>运行时配置集</strong>」以及「<strong>持久配置集</strong>」。</p>
<ol>
<li>在 FirewallD 运行时：<ol>
<li>对运行时配置的更改<strong>会</strong>即时生效</li>
<li>对持久配置集的更改<strong>不会</strong>被应用到本次运行中</li>
</ol>
</li>
<li>在 FirewallD 重启（如系统重启或服务重启）或重载配置时：<ol>
<li>运行时配置集的更改<strong>不会</strong>被保留</li>
<li>持久配置集的更改<strong>会</strong>作为新的运行时配置而应用</li>
</ol>
</li>
</ol>
<p>默认情况下，使用 <code>firewall-cmd</code> 命令对防火墙做出的更改都将作用于运行时配置集，但如果添加了 <code>permanent</code> 参数则可以将改动持久化。如果要将规则同时添加到两个配置集中，有两种方法：</p>
<ol>
<li>将规则同时添加到两个配置集中</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-service=http --permanent</span><br><span class="line">sudo firewall-cmd --zone=public --add-service=http</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将规则添加到持久配置集中，并重载</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-service=http --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h2 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h2><p>区域（Zone）是 FirewallD 的核心特性，其它所有特性都与 Zone 相关，Zone 可以理解为场景、位置等，我们可以给不同的 Zone 定义不同的规则集。</p>
<p>FirewallD 的默认配置中预定义了几个 Zone，按照可信度作升序排序依次为：<code>drop</code> -&gt; <code>block</code> -&gt; <code>public</code> -&gt; <code>external</code> -&gt; <code>dmz</code> -&gt; <code>work</code> -&gt; <code>home</code> -&gt; <code>internal</code> -&gt; <code>trusted</code>，其中 <code>public</code> 是默认值。</p>
<p>相关指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># list all zones</span><br><span class="line">sudo firewall-cmd --get-zones</span><br><span class="line"></span><br><span class="line"># get &amp; set default zone</span><br><span class="line">sudo firewall-cmd --get-default-zone</span><br><span class="line">sudo firewall-cmd --set-default-zone=external</span><br><span class="line"></span><br><span class="line"># interfaces</span><br><span class="line">sudo firewall-cmd --zone=public --add-interface=wlp1s0</span><br><span class="line">sudo firewall-cmd --zone=public --change-interface=wlp1s0</span><br><span class="line"></span><br><span class="line"># get a list of all active zones</span><br><span class="line">sudo firewall-cmd --get-active-zones</span><br><span class="line"></span><br><span class="line"># print information about a zone</span><br><span class="line">sudo firewall-cmd --info-zone public</span><br></pre></td></tr></table></figure>

<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>使用 <code>--add-port</code> 参数来打开一个端口以及指定它的协议，zone 如果不指定的话则为当前的默认值。例如，通过以下命令来允许 HTTP 以及 HTTPS 协议的网络流量进入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --permanent --add-port=80/tcp --add-port=443</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>通过 info 指令可以查看刚才添加的端口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --info-zone public</span><br></pre></td></tr></table></figure>

<p>使用 <code>--remove-port</code> 参数来阻止或关闭一个端口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --permanent --remove-port=80/tcp --remove-port=443/tcp</span><br></pre></td></tr></table></figure>

<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>使用 <code>--add-service</code> 以及 <code>--remove-service</code> 来启用、禁用服务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># enable</span><br><span class="line">sudo firewall-cmd --zone=public --permanent --add-service=http </span><br><span class="line">sudo firewall-cmd --reload </span><br><span class="line"></span><br><span class="line"># disable</span><br><span class="line">sudo firewall-cmd --zone=public --permanent --remove-service=http </span><br><span class="line">sudo firewall-cmd --reload </span><br></pre></td></tr></table></figure>

<h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启用 ip masquerade</span><br><span class="line">sudo firewall-cmd --zone=public --add-masquerade</span><br><span class="line"></span><br><span class="line"># 在同一台服务器上将 80 端口的流量转发到 8080 端口</span><br><span class="line">sudo firewall-cmd --zone=&quot;public&quot; --add-forward-port=port=80:proto=tcp:toport=8080</span><br><span class="line"></span><br><span class="line"># 将本地的 80 端口的流量转发到 IP 地址为 ：1.2.3.4 的远程服务器上的 8080 端口</span><br><span class="line">sudo firewall-cmd --zone=&quot;public&quot; --add-forward-port=port=80:proto=tcp:toport=8080:toaddr=1.2.3.4</span><br><span class="line"></span><br><span class="line"># 删除规则</span><br><span class="line">sudo firewall-cmd --zone=public --remove-masquerade</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Change SOCKS Proxy to HTTP</title>
    <url>/2017/change-socks-proxy-to-http/</url>
    <content><![CDATA[<h2 id="OSX"><a href="#OSX" class="headerlink" title="OSX"></a>OSX</h2><p>Use <code>brew</code> to install <code>polipo</code> via socks proxy:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ALL_PROXY=socks5://127.0.0.1:9500 brew install polipo</span><br></pre></td></tr></table></figure>

<p>Create <code>polipo.config</code> file under <code>Document</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socksParentProxy = &quot;127.0.0.1:9500&quot;</span><br><span class="line">socksProxyType = socks5</span><br><span class="line">proxyAddress = &quot;::0&quot;</span><br><span class="line">proxyPort = 8123</span><br></pre></td></tr></table></figure>

<p>Start polipo server:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ polipo -c ~/Documents/polipo.config</span><br><span class="line">Established listening socket on port 8123.</span><br></pre></td></tr></table></figure>

<p>Verify it at <code>http://localhost:8123</code>.</p>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>Use <a href="http://www.privoxy.org/">privoxy</a> tool. Download: <a href="http://www.privoxy.org/sf-download-mirror/Win32/">http://www.privoxy.org/sf-download-mirror/Win32/</a></p>
<p>Install it, find the config file at <code>\Privoxy\config.txt</code>, append following to the bottom of it:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">forward-socks5 / 127.0.0.1:9500 .</span><br></pre></td></tr></table></figure>

<p>(Mind the dot at the end)</p>
<p>The default port is <code>8118</code>, search from the config file to replace it.</p>
]]></content>
      <tags>
        <tag>osx</tag>
        <tag>windows</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>Common-used Commands</title>
    <url>/2017/common-used-commands/</url>
    <content><![CDATA[<p>Personal common-used commands list, including windows, osx, git, etc.</p>
<span id="more"></span>

<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="Clone"><a href="#Clone" class="headerlink" title="Clone"></a>Clone</h3><p><strong>Full clone</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure>

<p><strong>Fast clone</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone --depth=1 [url]</span><br><span class="line">$ git fetch --unshallow</span><br></pre></td></tr></table></figure>

<h3 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git fetch [origin] [branch]</span><br></pre></td></tr></table></figure>

<h3 id="Pull"><a href="#Pull" class="headerlink" title="Pull"></a>Pull</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git pull [origin] [orinin-branch]:[local-branch]</span><br></pre></td></tr></table></figure>

<h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push [origin] [orinin-branch]:[local-branch]</span><br></pre></td></tr></table></figure>

<p><strong>Force push</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push --force origin </span><br></pre></td></tr></table></figure>

<p><strong>Tags push</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push --tags origin </span><br></pre></td></tr></table></figure>

<h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><p><strong>Show</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config user.name</span><br><span class="line">wxsm</span><br><span class="line"></span><br><span class="line">$ git config --list</span><br><span class="line">user.name=wxsm</span><br><span class="line">user.email=wxsms@foxmail.com</span><br></pre></td></tr></table></figure>

<p><strong>Set</strong></p>
<p>Repo level:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config user.name [name]</span><br><span class="line">$ git config user.email [email]</span><br><span class="line">$ git config http.proxy [proxy]</span><br><span class="line">$ git config https.proxy [proxy]</span><br></pre></td></tr></table></figure>

<p>Supports socks &amp; http proxy.</p>
<p>Global level:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name [name]</span><br><span class="line">$ git config --global user.email [email]</span><br></pre></td></tr></table></figure>

<p><strong>Unset</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --unset user.email</span><br><span class="line">$ git config --global --unset user.email</span><br></pre></td></tr></table></figure>

<h3 id="Remote"><a href="#Remote" class="headerlink" title="Remote"></a>Remote</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  https://github.com/wxsms/uiv.git (fetch)</span><br><span class="line">origin  https://github.com/wxsms/uiv.git (push)</span><br><span class="line"></span><br><span class="line">$ git remote set-url origin git@github.com:wxsms/uiv.git</span><br><span class="line"></span><br><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:wxsms/uiv.git (fetch)</span><br><span class="line">origin  git@github.com:wxsms/uiv.git (push)</span><br></pre></td></tr></table></figure>

<h2 id="NVM"><a href="#NVM" class="headerlink" title="NVM"></a>NVM</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm ls</span><br><span class="line"></span><br><span class="line">nvm install [version]</span><br><span class="line">NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node/ nvm install [version]</span><br><span class="line"></span><br><span class="line">nvm use [version]</span><br><span class="line">nvm alias default [version]</span><br></pre></td></tr></table></figure>

<h2 id="OSX"><a href="#OSX" class="headerlink" title="OSX"></a>OSX</h2><h3 id="Keys"><a href="#Keys" class="headerlink" title="Keys"></a>Keys</h3><table>
<thead>
<tr>
<th>Name</th>
<th>Symbol</th>
</tr>
</thead>
<tbody><tr>
<td>command</td>
<td>⌘</td>
</tr>
<tr>
<td>option</td>
<td>⌥</td>
</tr>
<tr>
<td>shift</td>
<td>⇧</td>
</tr>
<tr>
<td>caps lock</td>
<td>⇪</td>
</tr>
<tr>
<td>control</td>
<td>⌃</td>
</tr>
<tr>
<td>return</td>
<td>↩</td>
</tr>
<tr>
<td>enter</td>
<td>⌅</td>
</tr>
</tbody></table>
<h3 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts"></a>Shortcuts</h3><table>
<thead>
<tr>
<th>Name</th>
<th>Symbol</th>
</tr>
</thead>
<tbody><tr>
<td>search</td>
<td>⌘ + space</td>
</tr>
<tr>
<td>switch input</td>
<td>⌃ + space</td>
</tr>
<tr>
<td>delete</td>
<td>⌘ + delete</td>
</tr>
<tr>
<td>Lock screen</td>
<td>⌘ + ⌃ + Q</td>
</tr>
<tr>
<td>Screen shot (full)</td>
<td>⌘ + ⇧ + 3</td>
</tr>
<tr>
<td>Screen shot (custom)</td>
<td>⌘ + ⇧ + 4</td>
</tr>
<tr>
<td>Screen shot (window)</td>
<td>⌘ + ⇧ + 4 + space</td>
</tr>
<tr>
<td>Screen shot &amp; copy (full)</td>
<td>⌘ + ⇧ + ⌃ + 3</td>
</tr>
<tr>
<td>Screen shot &amp; copy (custom)</td>
<td>⌘ + ⇧ + ⌃ + 4</td>
</tr>
<tr>
<td>Screen shot &amp; copy (window)</td>
<td>⌘ + ⇧ + ⌃ + 4 + space</td>
</tr>
<tr>
<td>Hide window</td>
<td>⌘ + H</td>
</tr>
<tr>
<td>Minimize window</td>
<td>⌘ + M</td>
</tr>
<tr>
<td>Quit</td>
<td>⌘ + Q</td>
</tr>
</tbody></table>
<h3 id="Proxy-command"><a href="#Proxy-command" class="headerlink" title="Proxy command"></a>Proxy command</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ALL_PROXY=socks5://127.0.0.1:9500 brew update</span><br></pre></td></tr></table></figure>

<h3 id="Toggle-hidden-files"><a href="#Toggle-hidden-files" class="headerlink" title="Toggle hidden files"></a>Toggle hidden files</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ defaults write com.apple.finder AppleShowAllFiles YES</span><br><span class="line">$ defaults write com.apple.finder AppleShowAllFiles NO</span><br></pre></td></tr></table></figure>

<h3 id="Open-files"><a href="#Open-files" class="headerlink" title="Open files"></a>Open files</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ open nginx.conf</span><br><span class="line">$ open -a TextEdit nginx.conf</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Conditional Rendering in React</title>
    <url>/2019/conditional-rendering-in-react/</url>
    <content><![CDATA[<p>如何进行条件渲染是一个 MVx 框架最基础的问题之一，但是它在 React 中总是会给人提出各种各样的问题。要么「<strong>不够优雅</strong>」，要么「<strong>不够可靠</strong>」，要么「<strong>不够好用</strong>」，现有的各种各样的方法之中，总是逃不过这三种问题的其中之一。至于 React-Native，虽然它与 React 「原则上一致」，但它存在的问题实际上就是要比 React 更多一些。</p>
<span id="more"></span>

<h2 id="if-语句与三元表达式"><a href="#if-语句与三元表达式" class="headerlink" title="if 语句与三元表达式"></a>if 语句与三元表达式</h2><p>在 JSX 世界中，用 if 语句以及三元表达式去完成条件渲染是最直观的方式。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Greeting</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = props.<span class="property">isLoggedIn</span>;</span><br><span class="line">  <span class="comment">// the &#x27;if&#x27; way</span></span><br><span class="line">  <span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">UserGreeting</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">GuestGreeting</span> /&gt;</span></span>;</span><br><span class="line">  <span class="comment">// or the &#x27;conditional operator&#x27; way</span></span><br><span class="line">  <span class="comment">// return isLoggedIn ? &lt;UserGreeting /&gt; : &lt;GuestGreeting /&gt;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式确实足够优雅，也足够可靠：毕竟它完美地沿用了语言本身的逻辑和语法，没有创造其它累赘的东西。但是它真的好用吗？我相信许多重度 React 使用者都会对此表示无奈：现实工程中诸如此类需要做条件渲染的地方多如牛毛，如果每一处我们都得给它写 if-else（三元表达式虽然相对来说更好用一些，但是它的应用场景毕竟更有限）并且将条件渲染体抽离主体作为子组件来做，那我真的好绝望，这感觉就好像是在现代社会躬行刀耕火种一样。况且不是所有的项目都需要「完美地优雅」，更多时候我们这种开发者只想尽快把工作完成，仅此而已。</p>
<p>实际上这种方案已经足以应付 100% 场景的需求了，并且你可能已经意识到，本质上来说<strong>这就是唯一的方案</strong>。但其存在的问题实在过于让人沮丧，因此才有了下面的一些「拓展」方案。</p>
<h2 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h2><p>React 官方文档提出的第二种方式是使用变量，通过将元素暂存在变量中，可以让开发者控制组件中的一部分而不影响其它内容。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoginControl</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> isLoggedIn = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isLoggedIn</span>;</span><br><span class="line">    <span class="keyword">let</span> button;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">      button = <span class="language-xml"><span class="tag">&lt;<span class="name">LogoutButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLogoutClick&#125;</span> /&gt;</span></span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      button = <span class="language-xml"><span class="tag">&lt;<span class="name">LoginButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLoginClick&#125;</span> /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">isLoggedIn</span>=<span class="string">&#123;isLoggedIn&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;button&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样做的好处是能够更灵活地控制组件内部的渲染，而不必去创建更多的子组件。但是其问题非常明显：创建了一个「多余」的变量，非常地不「优雅」。所谓「如无必要，勿增实体」，放在代码世界同样适用。它所做的事情也仅仅是将原本在 JSX 内部的条件判断挪到了外面，仅此而已。</p>
<p>想象一下这种场景：一个导航栏组件，其中的每个菜单、每个按钮都要根据某种条件去决定是否渲染，一个多余的变量就会变成几十个，最终导致代码中充斥着这样重复的、没有实际意义的垃圾，这是一个有追求的码农绝对无法忍受的。</p>
<p>这种方式有一个变体，就是通过创建一个类的 getter 来代替创建一个变量：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoginControl</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  get _button () &#123;</span><br><span class="line">    <span class="keyword">const</span> isLoggedIn = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isLoggedIn</span>;</span><br><span class="line">    <span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">LogoutButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLogoutClick&#125;</span> /&gt;</span></span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">LoginButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLoginClick&#125;</span> /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">isLoggedIn</span>=<span class="string">&#123;isLoggedIn&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this._button&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个小变通，好处是可以让 render 函数在条件渲染的数量上来以后不那么臃肿，易于维护。它与使用变量的方式并没有本质区别，同样是创建了一个无必要的 getter，但是确实是看起来更「优雅」了一些。但它只能在类组件中使用，无法在函数式组件中使用。</p>
<h2 id="行内表达式"><a href="#行内表达式" class="headerlink" title="行内表达式"></a>行内表达式</h2><p>行内三元表达式可以用来解决一些小的 case，但由于其本身存在着巨大的限制，不可能被广泛使用。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isLoggedIn</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      The user is <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;isLoggedIn ? &#x27;currently&#x27; : &#x27;not&#x27;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span> logged in.</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它的自身限制，一是只能做是非判断，如果要在是非的结果中继续判断就要再套一层三元表达式，那将会相当臃肿；二是它本身的语法就只适用于「小」的东西，像这种案例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isLoggedIn</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;isLoggedIn ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">LogoutButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLogoutClick&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">LoginButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLoginClick&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我是绝对写不出来的。实在是太不优雅、太难以阅读了。想象一下充斥着 <code>&amp;&amp;</code> &#x2F; <code>||</code> &#x2F; <code>?</code> &#x2F; <code>:</code> 的 JSX 代码。:smile:</p>
<p>至于行内的 if-else，虽然不能直接写 if-else，但有一个利用了语言本身特性的方案，即利用逻辑操作符：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Mailbox</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> unreadMessages = props.<span class="property">unreadMessages</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;unreadMessages.length &gt; 0 &amp;&amp;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          You have &#123;unreadMessages.length&#125; unread messages.</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式适合用来做单方面的条件渲染，即条件成立则渲染，否则不渲染，或者反之。使用场景依然有限，同样可读性较差，只适合用来渲染较小的代码块。</p>
<p>而且，很多人也许不知道，这种写法在 React-Native 中是一个陷阱。由于 JavaScript 本身的特性允许（或者说鼓励）<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy">truthy</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy">falsy</a> 形式的条件判断，很多情况下我们不会去刻意将它显式转换为一个 Boolean 值。当然在大多数情况下这都没有问题，除非它是一个空字符串：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isLoggedIn</span>;</span><br><span class="line">  <span class="comment">// when it is &#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;isLoggedIn &amp;&amp; <span class="tag">&lt;<span class="name">LogoutButton</span>/&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种代码在运行的时候会抛出一个 Error，导致应用崩溃：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: Text strings must be rendered within a &lt;Text&gt; component.</span><br></pre></td></tr></table></figure>

<p>比如说，当你用某个 API 返回的数据中的某个值去进行条件渲染的时候，正常来说没有问题，但某一天服务突然出错了，这个字段返回了一个空字符串，那么应用就会突然面临大规模的崩溃。数据来源不可靠且没有进行显式 Boolean 转换的条件判断就像一个地雷，随时随地都可能会爆炸。</p>
<h2 id="封装的方法"><a href="#封装的方法" class="headerlink" title="封装的方法"></a>封装的方法</h2><p>以上的几种形式其实都与刀耕火种无异，因此我们还有更高级的方案，比如封装一个方法：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">renderIf</span> (flag) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">_renderIf</span> (componentA, componentB = <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> flag ? componentA : componentB;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样一来代码就可以简洁多了：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoginControl</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> isLoggedIn = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isLoggedIn</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">isLoggedIn</span>=<span class="string">&#123;isLoggedIn&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;renderIf(isLoggedIn)(<span class="tag">&lt;<span class="name">LogoutButton</span>/&gt;</span>, <span class="tag">&lt;<span class="name">LoginButton</span>/&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类似的方案还有封装组件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">RenderIf</span> (&#123;flag, children&#125;&#125;) &#123;</span><br><span class="line">  <span class="keyword">return</span> flag ? children : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginControl</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> isLoggedIn = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isLoggedIn</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">isLoggedIn</span>=<span class="string">&#123;isLoggedIn&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">RenderIf</span> <span class="attr">flag</span>=<span class="string">&#123;isLoggedIn&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">LogoutButton</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">RenderIf</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">RenderIf</span> <span class="attr">flag</span>=<span class="string">&#123;!isLoggedIn&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">LoginButton</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">RenderIf</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方案避免了在渲染函数体内出现大量的逻辑控制语句，取而代之的是可读性更强，也更易于使用的方法或组件，可以认为是在 React 世界中比较好的条件渲染解决方案了，「优雅」与「好用」都得到了较好的兼顾。但是，问题就出在，它不够「可靠」。</p>
<p>比如说以下的代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NavBar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">user</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;renderIf(user)(<span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&#123;user.name&#125;/</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟以上提及过的所有方案都不一样的是，当 <code>user</code> 为 <code>null</code> 或 <code>undefined</code>，或者其它任何在执行 <code>user.name</code> 会报错的 value 时，这一段代码就会报错。如果是 React-Native 应用，很不幸它就崩溃了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TypeError: Cannot read property &#x27;name&#x27; of null</span><br></pre></td></tr></table></figure>

<p>导致这个区别的原因是，JavaScript 函数在执行之前会先对它的参数进行解析，而非等到真正运行时才解析。所以当 <code>user</code> 为以上 value 之一的时候，虽然按照函数的流程来说应该会对第一个参数直接忽略，但是实际上它还是被解析了。而 if-else 等内置条件判断语句则不同，假值条件之后的代码块会被完全忽略。</p>
<p>说到这里我已经开始怀念 <code>ng-if</code> 和 <code>v-if</code> 了：我只是一个普普通通的开发者，为什么我需要在如此基础的事情上考虑这么多？大家都是前端 MVx 框架，为什么 Vue.js 和 Angular.js 从来没有提出过这种问题？</p>
<p>大概这就是 React，这就是 Facebook 吧！</p>
<p>其实在这个方案出现问题之后，我已经找不出别的更好的方案了，除非某一天 EcmaScript 有了新的提案，新的语法，否则都将无解。因为无论怎么做，最终都无法绕过传参必然会被事先解释这一障碍。也就是说，在目前的大环境下，我无法得到一个在各种场景下都同时兼具「优雅」、「可靠」、「好用」的条件渲染解决方案，只能通过以上各种方案在不同场景下的混用来达到一个（有追求的码农的内心的）平衡。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>react-native</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>CORS Headers Note</title>
    <url>/2017/cors-headers-note/</url>
    <content><![CDATA[<p>CORS HTTP Header 是解决 Ajax 跨域问题的方案之一。详情查看：<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS">MDN</a></p>
<p>这篇文章主要是记录使用过程中遇到的问题以及解决方案。</p>
<span id="more"></span>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>客户端正常情况无需特殊配置。但有一些需要注意的地方。</p>
<h3 id="请求预检"><a href="#请求预检" class="headerlink" title="请求预检"></a>请求预检</h3><p>CORS 请求与非跨域请求不一样的是，它会将请求分成两种类型：<strong>Simple Request（简单请求）</strong>与<strong>Preflighted Request（预检请求）</strong>。</p>
<h4 id="Simple-Request"><a href="#Simple-Request" class="headerlink" title="Simple Request"></a>Simple Request</h4><p>满足<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Simple_requests">所有条件</a>的请求为简单请求。</p>
<p>看了文档以后发现跟普通请求别无二致。</p>
<h4 id="Preflighted-Request"><a href="#Preflighted-Request" class="headerlink" title="Preflighted Request"></a>Preflighted Request</h4><p>满足<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Preflighted_requests">任一条件</a>的请求为预检请求。</p>
<p>与简单请求不同，预检请求要求必须首先使用 <code>OPTIONS</code> 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求，以避免跨域请求对服务器的用户数据产生未预期的影响。</p>
<p><img src="https://mdn.mozillademos.org/files/14289/prelight.png" alt="预检请求示意图"></p>
<p>所以，实际上这种跨域请求会产生两次 HTTP Request：一个预检请求，以及预检成功后的真正的请求。由于预检请求使用 <code>OPTIONS</code> 方法而不是常见的 <code>POST</code> 等，因此服务器必须为跨域 API 提供能够正确返回的相应方法。</p>
<h3 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h3><p>如果需要进行 Cookie &#x2F; Session &#x2F; HTTP Authentication 等操作，则必须在进行 Ajax 请求时带上一个 <code>withCredentials</code> 参数。至于如何带这个参数，每个 Lib 应该都有自己的配置方式，下面是两个例子。</p>
<p>Raw Ajax Example:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> invocation = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://bar.other/resources/credentialed-content/&#x27;</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callOtherDomain</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(invocation) &#123;</span><br><span class="line">    invocation.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">    invocation.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line">    invocation.<span class="property">onreadystatechange</span> = handler;</span><br><span class="line">    invocation.<span class="title function_">send</span>(); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Using Axios Example:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> corsAgent = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>服务端的配置并不是只需要给请求响应加个 <code>Access-Control-Allow-Origin</code> Header 这么简单，还有其它需要处理的地方。因此自己做远不如直接使用相关 Lib 来得方便。比如：</p>
<ul>
<li><a href="https://github.com/expressjs/cors">Express CORS</a></li>
<li><a href="https://github.com/koajs/cors">Koa CORS</a></li>
</ul>
<h3 id="withCredentials"><a href="#withCredentials" class="headerlink" title="withCredentials"></a>withCredentials</h3><p>当启用 <code>withCredentials</code> 参数后，<code>Access-Control-Allow-Origin</code> 将不能设置为 <code>*</code> （允许所有域名），必须指定为唯一的域名，否则预期的效果将无法达到。由于这个规则不会产生 Warning 或 Error，出了问题不了解情况的话还是比较难发现的。</p>
<p>可以预见（事实）的是，当 <code>Access-Control-Allow-Origin</code> 指定了唯一域名后，使用其它域名访问该 API 也会出现无效的问题。不过相应地也有一个取巧的办法，就是将它设置为 Request 的 Origin Header，这样一来问题就解决了。</p>
]]></content>
      <tags>
        <tag>nodejs</tag>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 绘制三角形</title>
    <url>/2016/css-triangle/</url>
    <content><![CDATA[<p>关于如何使用CSS中的border属性绘制各式各样的三角形。下面有一个国外友人制作的动画，对其原理进行了直观的阐释，我简单地做了点翻译。</p>
<span id="more"></span>

<iframe height="265" style="width: 100%;" scrolling="no" title="Animation to Explain CSS Triangles" src="//codepen.io/wxsm/embed/zrbGpx/?height=265&theme-id=0&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/wxsm/pen/zrbGpx/'>Animation to Explain CSS Triangles</a> by wxsm
  (<a href='https://codepen.io/wxsm'>@wxsm</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>&nbsp;</p>
<p>要点：</p>
<ul>
<li>元素不能有宽高（当然也可以稍作变化来绘制梯形）</li>
<li>只有一边border显示颜色，其宽度即为三角形的高</li>
<li>与其相邻的border设置为透明色，它们将决定三角形的形状</li>
</ul>
<p>更多的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS Triangle<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.arrow-up</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-left</span>: <span class="number">5px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-right</span>: <span class="number">5px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">5px</span> solid black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.arrow-down</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-left</span>: <span class="number">20px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-right</span>: <span class="number">20px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-top</span>: <span class="number">20px</span> solid <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.arrow-right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-top</span>: <span class="number">60px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">60px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-left</span>: <span class="number">60px</span> solid green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.arrow-left</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-top</span>: <span class="number">10px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">10px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-right</span>: <span class="number">10px</span> solid blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrow-up&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrow-down&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrow-left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrow-right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p>以上的例子都是使用实体元素来绘制三角形，其实实际情况下使用伪元素的（before，after）会更多一些。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>D3 Note - Basis</title>
    <url>/2016/d3-note-basis/</url>
    <content><![CDATA[<p>D3 (Data-Driven Documents) 是一个 JavaScript Library，用来做 Web 端的数据可视化实现以及各种绘图。</p>
<blockquote>
<p><strong>D3.js</strong> is a JavaScript library for manipulating documents based on data. <strong>D3</strong> helps you bring data to life using HTML, SVG, and CSS.</p>
</blockquote>
<p>学习 D3 需要很多预备知识：</p>
<ol>
<li>HTML &#x2F; DOM</li>
<li>CSS</li>
<li>JavaScript (better with jQuery)</li>
<li>SVG</li>
</ol>
<p>HTML &#x2F; CSS 不必多说，因为 D3 含有大量链式操作函数以及选择器等，因此如果有 jQuery 基础将轻松很多。此外，由于一般采用 SVG 方式进行绘图，所以 SVG 基础知识也需要掌握。</p>
<p>虽然必须的预备知识如此之多，但 D3 的定位其实是 Web 前端绘图的底层工具，所谓底层，即是操作复杂而功能强大者。</p>
<span id="more"></span>

<h2 id="关于-SVG"><a href="#关于-SVG" class="headerlink" title="关于 SVG"></a>关于 SVG</h2><p>SVG (Scalable Vector Graphics) 是一种绘图标准，已经被绝大多数的现代浏览器所支持。SVG 采用 XML 语法定义图像，可直接嵌入 HTML 中使用。</p>
<p>SVG 的特点是矢量绘图（与 Canvas 不同），除了预设样式以外同时也支持 CSS 样式。</p>
<p>比如，画一个园圈，坐标为 (100, 50)，半径为 40px，拥有 2px 的黑色 border，以及红色填充：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;100&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;50&quot;</span> <span class="attr">r</span>=<span class="string">&quot;40&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SVG 有一些预定义的形状元素，可被开发者使用和操作：</p>
<ul>
<li>矩形 <code>&lt;rect&gt;</code></li>
<li>圆形 <code>&lt;circle&gt;</code></li>
<li>椭圆 <code>&lt;ellipse&gt;</code></li>
<li>线 <code>&lt;line&gt;</code></li>
<li>折线 <code>&lt;polyline&gt;</code></li>
<li>多边形 <code>&lt;polygon&gt;</code></li>
<li>路径 <code>&lt;path&gt;</code></li>
</ul>
<p>其中，<code>path</code> 是功能最强大者，使用 <code>path</code> 可以构成所有图形。</p>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="选择元素"><a href="#选择元素" class="headerlink" title="选择元素"></a>选择元素</h3><p>D3 使用与 jQuery 类似的选择器来获取 HTML 元素。常用的方法有：</p>
<ul>
<li><code>d3.select(selector)</code></li>
<li><code>d3.selectAll(selector)</code></li>
</ul>
<p>（参数既可以传 selector 也可以直接传 HTML Element ）</p>
<p>顾名思义，<code>selectAll</code> 就是选择所有符合条件的元素了，那么 <code>select</code> 选择的是符合条件的第一个元素。如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">d3.<span class="title function_">select</span>(<span class="string">&#x27;body&#x27;</span>) <span class="comment">//选择 body 元素</span></span><br><span class="line"></span><br><span class="line">d3.<span class="title function_">selectAll</span>(<span class="string">&#x27;p&#x27;</span>) <span class="comment">//选择所有 p 元素</span></span><br><span class="line"></span><br><span class="line">d3.<span class="title function_">selectAll</span>(<span class="string">&#x27;.className&#x27;</span>) <span class="comment">//选择所有 class 包含 className 的元素</span></span><br></pre></td></tr></table></figure>

<p>更多就不说了。</p>
<h3 id="操作选择"><a href="#操作选择" class="headerlink" title="操作选择"></a>操作选择</h3><p>选择器返回的是一组<strong>选择</strong>（selection），这组<strong>选择</strong>可以进行一些操作，如：</p>
<ul>
<li>在此选择的基础上继续选择；</li>
<li>改变属性；</li>
<li>改变样式；</li>
<li>绑定事件；</li>
<li>插入、删除；</li>
<li>绑定数据。</li>
</ul>
<p>大多数操作都与 jQuery 十分类似，同时也支持链式操作，不再赘述。只是这个“绑定数据”操作稍有特别。</p>
<h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>通过 D3 可以把数据“绑定”到 HTML 元素上，绑定的目的主要是为了方便一些需要相应数据才能进行的元素操作（如：更改元素大小、位置等）。</p>
<p>绑定数据有两个方法：</p>
<ul>
<li><code>datum</code>: 将一个数据绑定到选择上；</li>
<li><code>data</code>: 将一个数组绑定到选择上，数组的各项分别与选择的各项一一对应。</li>
</ul>
<p>下面引用一个例子来说明这二者的不同。假设有如下三个节点：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Pear<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="datum"><a href="#datum" class="headerlink" title="datum"></a>datum</h3><p>执行以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;datum&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> p = d3.<span class="title function_">selectAll</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">datum</span>(str);</span><br><span class="line">p.<span class="title function_">text</span>(<span class="function">(<span class="params">d, i</span>) =&gt;</span> <span class="string">`Element <span class="subst">$&#123;i&#125;</span> bind with <span class="subst">$&#123;d&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

<p>将得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Element 0 bind with datum</span><br><span class="line">Element 1 bind with datum</span><br><span class="line">Element 2 bind with datum</span><br></pre></td></tr></table></figure>

<p>在对选择进行操作时，传入的<strong>值</strong>可以是<strong>值</strong>，也可以是函数。当传入函数时，D3 会向函数注入两个参数，分别是 d (data) 与 i (index)，代表当前元素绑定的数据与其索引。</p>
<h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p>执行以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> strArr = [<span class="string">&#x27;data0&#x27;</span>, <span class="string">&#x27;data1&#x27;</span>, <span class="string">&#x27;data2&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> p = d3.<span class="title function_">selectAll</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">data</span>(strArr);</span><br><span class="line">p.<span class="title function_">text</span>(<span class="function">(<span class="params">d, i</span>) =&gt;</span> <span class="string">`Element <span class="subst">$&#123;i&#125;</span> bind with <span class="subst">$&#123;d&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

<p>将得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Element 0 bind with data0</span><br><span class="line">Element 1 bind with data1</span><br><span class="line">Element 2 bind with data2</span><br></pre></td></tr></table></figure>

<p>可以看到，数组中的 3 个项分别与 3 个 p 元素绑定到了一起。因此，可以将 <code>datum</code> 看作是 <code>data</code> 函数的一个特例，实际开发中使用更多的是 <code>data</code> 函数。</p>
<h2 id="实践：简单柱状图"><a href="#实践：简单柱状图" class="headerlink" title="实践：简单柱状图"></a>实践：简单柱状图</h2><p>先定义一个 SVG 画布，并将它插入到 HTML 的 body 中去：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> width = <span class="number">300</span>,</span><br><span class="line">  height = <span class="number">300</span>；</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> svg = d3.<span class="title function_">select</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .<span class="title function_">append</span>(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">  .<span class="title function_">attr</span>(<span class="string">&#x27;width&#x27;</span>, width)</span><br><span class="line">  .<span class="title function_">attr</span>(<span class="string">&#x27;height&#x27;</span>, height);</span><br></pre></td></tr></table></figure>

<p>在这里，画布的宽高都为 300 像素。</p>
<p>然后，定义一组数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [<span class="number">250</span>, <span class="number">210</span>, <span class="number">170</span>, <span class="number">100</span>, <span class="number">190</span>];</span><br></pre></td></tr></table></figure>

<p>最后使用以上数据画出柱状图，柱子使用 SVG 预定义的 <code>rect</code> 元素：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> rectWidth = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">svg.<span class="title function_">selectAll</span>(<span class="string">&#x27;rect&#x27;</span>)</span><br><span class="line"> .<span class="title function_">data</span>(data)</span><br><span class="line"> .<span class="title function_">enter</span>()</span><br><span class="line"> .<span class="title function_">append</span>(<span class="string">&#x27;rect&#x27;</span>)</span><br><span class="line"> .<span class="title function_">attr</span>(<span class="string">&#x27;y&#x27;</span>, <span class="function">(<span class="params">d, i</span>) =&gt;</span> height - d)</span><br><span class="line"> .<span class="title function_">attr</span>(<span class="string">&#x27;x&#x27;</span>, <span class="function">(<span class="params">d, i</span>) =&gt;</span> i * rectWidth)</span><br><span class="line"> .<span class="title function_">attr</span>(<span class="string">&#x27;height&#x27;</span>, <span class="function"><span class="params">d</span> =&gt;</span> d)</span><br><span class="line"> .<span class="title function_">attr</span>(<span class="string">&#x27;width&#x27;</span>, rectWidth - <span class="number">2</span>)</span><br><span class="line"> .<span class="title function_">attr</span>(<span class="string">&#x27;fill&#x27;</span>, <span class="string">&#x27;steelblue&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><code>rectWidth</code> 表示柱子的宽度，至于坐标、宽高则分别通过 x &#x2F; y 以及 height &#x2F; width 属性来控制，效果如下：</p>
<p><img src="https://static.wxsm.space/blog/48595801-401d6c80-e991-11e8-97c6-580489b7aeab.gif"></p>
<p>可以发现，这里并没有指定需要插入的 <code>rect</code> 个数，但 D3 却根据数据量自动地把图画出来了，这个工作是通过 <code>enter</code> 语句完成的。关于其工作原理，下回分解。</p>
]]></content>
      <tags>
        <tag>d3</tag>
      </tags>
  </entry>
  <entry>
    <title>D3 Note - Enter, Update and Exit</title>
    <url>/2016/d3-note-enter-update-and-exit/</url>
    <content><![CDATA[<p>在 D3 的使用过程中，我们见得最多的应当是类似如下的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> div = d3.<span class="title function_">select</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .<span class="title function_">selectAll</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">  .<span class="title function_">data</span>([<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>])</span><br><span class="line">  .<span class="title function_">enter</span>()</span><br><span class="line">  .<span class="title function_">append</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">  .<span class="title function_">text</span>(<span class="function"><span class="params">d</span> =&gt;</span> d);</span><br></pre></td></tr></table></figure>

<p>将得到：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>9<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>12<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>15<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>光看代码完全不能理解 D3 到底做了些什么，其实这里关键是 <code>enter</code> 的使用。</p>
<span id="more"></span>

<h2 id="Overall"><a href="#Overall" class="headerlink" title="Overall"></a>Overall</h2><p><code>enter</code> 其实是一个选择集（selection），与其对应的还有 <code>update</code> 与 <code>exit</code>，选择集中的元素由原始选择集与绑定的数据决定。</p>
<p><img src="https://static.wxsm.space/blog/48595775-3ac02200-e991-11e8-8a46-6f8ede2f504d.png"></p>
<h2 id="selection-enter"><a href="#selection-enter" class="headerlink" title="selection.enter"></a>selection.enter</h2><blockquote>
<p>Returns the enter selection: placeholder nodes for each datum that had no corresponding DOM element in the selection. The enter selection is determined by selection.data, and is empty on a selection that is not joined to data.</p>
<p>The enter selection is typically used to create “missing” elements corresponding to new data.</p>
</blockquote>
<p>简述就是，<code>enter</code> 会根据现有 selection 与绑定的数据量，自动“补齐”所缺失的元素。</p>
<p>比如，例子中，如果 <code>.selectAll(&#39;p&#39;)</code> 返回的 selection 中包含 3 个元素，那么因为 data 的长度为 5，<code>enter</code> 就会补齐缺失的 2 个元素，并返回包含这三个补齐元素的 selection，接下来的操作，就是针对这个 selection 进行的。</p>
<p>因此，在进行 <code>enter</code> 操作时，一般会事先把相关现有元素尽数清除，以免出现漏操作的情况。</p>
<p>至于再对 <code>enter</code> 选择集进行 <code>append</code> 操作时为什么会追加到 body 节点上去，这里就涉及到另一个概念：<code>selection.update</code></p>
<h2 id="selection-update"><a href="#selection-update" class="headerlink" title="selection.update"></a>selection.update</h2><p>理解了 <code>enter</code>，<code>update</code> 就很简单了，顾名思义，所指就是已有的，能够与绑定 data 一一对应上的元素的选择集。</p>
<p>因此，实际上并没有 <code>selection.update</code> 这个方法，因为没有必要，当前选到的就是 <code>update</code> 集了。</p>
<p>至于为什么例子中的 <code>enter</code> 集能够追加到 <code>body</code> 中去，根据 D3 文档：</p>
<blockquote>
<p>If the specified type is a string, appends a new element of this type (tag name) as the last child of each selected element, or the next following sibling in the update selection if this is an enter selection.</p>
</blockquote>
<p>当进行 <code>selection.append</code> 操作时，如果 selection 是一个 <code>enter</code> 集，那么 <code>append</code> 就会向相应 <code>update</code> 集的末尾追加。那么，自然，如果 <code>update</code> 集为空，就会往父元素内追加。</p>
<h2 id="selection-exit"><a href="#selection-exit" class="headerlink" title="selection.exit"></a>selection.exit</h2><blockquote>
<p>Returns the exit selection: existing DOM elements in the selection for which no new datum was found.</p>
</blockquote>
<p>对于已有 DOM 元素但没有 data 与之绑定的集合，使用 <code>selection.exit</code> 来获取。</p>
<p>如果集合没有绑定 data，则返回空集合。如果多次调用 <code>exit</code>，之后的 <code>exit</code> 会返回空集合。</p>
<p>通常，对于 <code>exit</code> 集的操作，都是 <code>remove</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">selection.<span class="title function_">exit</span>().<span class="title function_">remove</span>()</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
]]></content>
      <tags>
        <tag>d3</tag>
      </tags>
  </entry>
  <entry>
    <title>D3 Note - Interpolate</title>
    <url>/2016/d3-note-interpolate/</url>
    <content><![CDATA[<p><code>d3-interpolate</code> 是 D3 的核心模块之一，与比例尺有些类似，<code>interpolate</code> （插值）所做的也是一些数值映射的工作。区别是，<code>interpolate</code> 的定义域始终是 <strong>0 ~ 1</strong>，并且始终为线性的。所以，更多时候它用来与 D3 的一些其他模组集成使用（如 transition, scale 等）。</p>
<span id="more"></span>

<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = d3.<span class="title function_">interpolateNumber</span>(<span class="number">10</span>, <span class="number">20</span>); <span class="comment">// 10 as a, and 20 as b</span></span><br><span class="line"><span class="title function_">i</span>(<span class="number">0.0</span>); <span class="comment">// 10</span></span><br><span class="line"><span class="title function_">i</span>(<span class="number">0.2</span>); <span class="comment">// 12</span></span><br><span class="line"><span class="title function_">i</span>(<span class="number">0.5</span>); <span class="comment">// 15</span></span><br><span class="line"><span class="title function_">i</span>(<span class="number">1.0</span>); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

<p>返回的函数 <code>i</code> 称作 <code>interpolator</code> （插值器）。给定值域 <strong>a</strong> 与 <strong>b</strong>，并且传入 <strong>[0, 1]</strong> 这个闭区间内的任意值，插值器将返回对应的结果。通常情况下，<strong>a 对应参数 0，b 对应参数 1</strong></p>
<p>跟比例尺一样，插值器也可以接受其他类型的参数，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">d3.<span class="title function_">interpolateLab</span>(<span class="string">&quot;steelblue&quot;</span>, <span class="string">&quot;brown&quot;</span>)(<span class="number">0.5</span>); <span class="comment">// &quot;rgb(142, 92, 109)&quot;</span></span><br></pre></td></tr></table></figure>

<p>甚至对象、数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = d3.<span class="title function_">interpolate</span>(&#123;<span class="attr">colors</span>: [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>]&#125;, &#123;<span class="attr">colors</span>: [<span class="string">&quot;white&quot;</span>, <span class="string">&quot;black&quot;</span>]&#125;);</span><br><span class="line"><span class="title function_">i</span>(<span class="number">0.0</span>); <span class="comment">// &#123;colors: [&quot;rgb(255, 0, 0)&quot;, &quot;rgb(0, 0, 255)&quot;]&#125;</span></span><br><span class="line"><span class="title function_">i</span>(<span class="number">0.5</span>); <span class="comment">// &#123;colors: [&quot;rgb(255, 128, 128)&quot;, &quot;rgb(0, 0, 128)&quot;]&#125;</span></span><br><span class="line"><span class="title function_">i</span>(<span class="number">1.0</span>); <span class="comment">// &#123;colors: [&quot;rgb(255, 255, 255)&quot;, &quot;rgb(0, 0, 0)&quot;]&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="d3-interpolate"><a href="#d3-interpolate" class="headerlink" title="d3.interpolate"></a>d3.interpolate</h2><p><code>interpolate</code> 模块提供了很多子方法，然而，大多数情况下，直接调用这个就足够了。因为 D3 会根据传入的数据类型自动匹配子方法（注意：是基于参数 <strong>b</strong> 的数据类型）。</p>
<p>决定算法：</p>
<ol>
<li>如果 b 是 <code>null</code>, <code>undefined</code> 或 <code>boolean</code>，则函数返回的是常量 b</li>
<li>如果 b 是数字，则使用 <code>interpolateNumber</code> 方法</li>
<li>如果 b 是颜色或者可以转换为颜色的字符串，则使用 <code>interpolateRgb</code> 方法</li>
<li>如果 b 是时间，则使用 <code>interpolateDate</code> 方法</li>
<li>如果 b 是字符串，则使用 <code>interpolateString</code> 方法</li>
<li>如果 b 是数组，则使用 <code>interpolateArray</code> 方法</li>
<li>如果 b 可以强转为数字，则使用 <code>interpolateNumber</code> 方法</li>
<li>使用 <code>interpolateObject</code> 方法</li>
<li>基于 b 的类型，将 a 强转为相同类型</li>
</ol>
<p>各个方法可以直接查看文档获取用法，大同小异。比较有趣的是 <code>interpolateString</code>，它可以检测字符串中的数字，并且做类似这样的事情：</p>
<blockquote>
<p>For example, if a is “300 12px sans-serif”, and b is “500 36px Comic-Sans”, two embedded numbers are found. The remaining static parts of the string are a space between the two numbers (“ “), and the suffix (“px Comic-Sans”). The result of the interpolator at t &#x3D; 0.5 is “400 24px Comic-Sans”.</p>
</blockquote>
<p>至于插值函数的用处，比较多，举一个例子：<strong>d3-transition</strong> 有一些平滑动画的实现函数需要用到插值，比如说地球的动画滚动效果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">d3.<span class="title function_">transition</span>()</span><br><span class="line">  .<span class="title function_">duration</span>(<span class="number">1000</span>)</span><br><span class="line">  .<span class="title function_">tween</span>(<span class="string">&#x27;rotate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> r = d3.<span class="title function_">interpolate</span>(projection.<span class="title function_">rotate</span>(), [-geo[<span class="number">0</span>], -geo[<span class="number">1</span>]])</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">rotateGlobeByAngle</span>(<span class="title function_">r</span>(t))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// do something...        </span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>d3</tag>
      </tags>
  </entry>
  <entry>
    <title>D3 Note - Scale</title>
    <url>/2016/d3-note-scale/</url>
    <content><![CDATA[<p>之前做的柱状图例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [<span class="number">250</span>, <span class="number">210</span>, <span class="number">170</span>, <span class="number">100</span>, <span class="number">190</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rectWidth = <span class="number">25</span></span><br><span class="line"></span><br><span class="line">svg.<span class="title function_">selectAll</span>(<span class="string">&#x27;rect&#x27;</span>)</span><br><span class="line"> .<span class="title function_">data</span>(data)</span><br><span class="line"> .<span class="title function_">enter</span>()</span><br><span class="line"> .<span class="title function_">append</span>(<span class="string">&#x27;rect&#x27;</span>)</span><br><span class="line"> .<span class="title function_">attr</span>(<span class="string">&#x27;y&#x27;</span>, <span class="function">(<span class="params">d, i</span>) =&gt;</span> height - d)</span><br><span class="line"> .<span class="title function_">attr</span>(<span class="string">&#x27;x&#x27;</span>, <span class="function">(<span class="params">d, i</span>) =&gt;</span> i * rectWidth)</span><br><span class="line"> .<span class="title function_">attr</span>(<span class="string">&#x27;height&#x27;</span>, <span class="function"><span class="params">d</span> =&gt;</span> d)</span><br><span class="line"> .<span class="title function_">attr</span>(<span class="string">&#x27;width&#x27;</span>, rectWidth - <span class="number">2</span>)</span><br><span class="line"> .<span class="title function_">attr</span>(<span class="string">&#x27;fill&#x27;</span>, <span class="string">&#x27;steelblue&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>有一个严重的问题，就是没有比例尺的概念，柱状图的高度完全由数据转换成像素值来模拟。这明显是不科学的：如果数据的值过小或过大，作出来的图就会很奇怪，同时也无法做到非线性的映射。</p>
<p>就跟地图需要比例尺一样，绝大多数的数据图表也需要比例尺。</p>
<blockquote>
<p>Scales are a convenient abstraction for a fundamental task in visualization: mapping a dimension of abstract data to a visual representation.</p>
</blockquote>
<p><strong>比例尺 - Scale - “将某个维度的抽象数据做可视化映射”</strong></p>
<p>至于可视化映射的具体实现，<code>d3-scale</code> 模块提供了许多方案，大致可以分为两类：</p>
<ul>
<li>Continuous Scales（连续映射）</li>
<li>Ordinal Scales（散点映射）</li>
</ul>
<span id="more"></span>

<h2 id="Continuous-Scales"><a href="#Continuous-Scales" class="headerlink" title="Continuous Scales"></a>Continuous Scales</h2><p>Continuous Scales（连续映射）将连续的、定量的 <strong>Input Domain</strong>（定义域）映射为一个连续的 <strong>Output Range</strong>（值域）。如果 Range 也是一个数值范围，那么映射操作可以被反转（即从值域到定义域）。</p>
<p>连续值映射是一个抽象的概念，不能直接构造。因此，<code>d3-scale</code> 提供了一些具体实现，如线性、次方、对数等。</p>
<p>一个简单的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = d3.<span class="title function_">scaleLinear</span>()</span><br><span class="line">    .<span class="title function_">domain</span>([<span class="number">10</span>, <span class="number">130</span>])</span><br><span class="line">    .<span class="title function_">range</span>([<span class="number">0</span>, <span class="number">960</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">x</span>(<span class="number">20</span>); <span class="comment">// 80</span></span><br><span class="line"><span class="title function_">x</span>(<span class="number">50</span>); <span class="comment">// 320</span></span><br></pre></td></tr></table></figure>

<p>这里构造了一个 <code>scaleLinear</code> （线性比例尺），并设置了输入及输出范围。构造器将会返回一个函数，这个函数接受输入值，并且返回对应的输出值。</p>
<p>如果输入值超出了预定义的范围，那么自然而然地，函数返回的输出值也会超出范围。但是，D3 提供了一个选项 <code>clamp</code>, 可以将输出范围保持在定义值内：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">x.<span class="title function_">clamp</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="title function_">x</span>(-<span class="number">10</span>); <span class="comment">// 0, clamped to range</span></span><br></pre></td></tr></table></figure>

<p>Output Domain 除了可以为数字，也可以是其它东西。比如颜色：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> color = d3.<span class="title function_">scaleLinear</span>()</span><br><span class="line">    .<span class="title function_">domain</span>([<span class="number">10</span>, <span class="number">100</span>])</span><br><span class="line">    .<span class="title function_">range</span>([<span class="string">&quot;brown&quot;</span>, <span class="string">&quot;steelblue&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">color</span>(<span class="number">20</span>); <span class="comment">// &quot;#9a3439&quot;</span></span><br><span class="line"><span class="title function_">color</span>(<span class="number">50</span>); <span class="comment">// &quot;#7b5167&quot;</span></span><br></pre></td></tr></table></figure>

<p>同时，Continuous Scales 也支持<strong>插值</strong>（interpolate）操作，这是 D3 的另一个模块。</p>
<h3 id="Linear-Scales"><a href="#Linear-Scales" class="headerlink" title="Linear Scales"></a>Linear Scales</h3><p><strong>线性比例尺</strong>，顾名思义，输出值对于输入值而言是线性变化的。</p>
<blockquote>
<p>y &#x3D; ax + b</p>
</blockquote>
<h3 id="Power-Scales"><a href="#Power-Scales" class="headerlink" title="Power Scales"></a>Power Scales</h3><p><strong>次方比例尺</strong>，与 Linear Scales 类似，但是需要多加一个参数：<code>exponent</code> （次方）</p>
<blockquote>
<p>y &#x3D; mx^k + b</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pow.<span class="title function_">exponent</span>([exponent]) <span class="comment">// default 1</span></span><br></pre></td></tr></table></figure>

<p>在需要做次方根的时候，使 <code>exponent = 0.x</code> 就可以了，对于 0.5 这个特值，D3 还提供了快捷方式：<code>d3.scaleSqrt()</code>，这将直接构造 <code>exponent = 0.5</code> 的 Power Scale</p>
<h3 id="Log-Scales"><a href="#Log-Scales" class="headerlink" title="Log Scales"></a>Log Scales</h3><p><strong>对数比例尺</strong>，与 Power Scales 类似，参数变为 <code>base</code> （底数）</p>
<blockquote>
<p>y &#x3D; m log(x) + b</p>
</blockquote>
<p>因为 log(0) &#x3D; -∞，Log Scales 的 Input Domain 不能够跨越 0，即要么全为正，要么全为负</p>
<h3 id="Identity-Scales"><a href="#Identity-Scales" class="headerlink" title="Identity Scales"></a>Identity Scales</h3><p><strong>全等比例尺</strong>，特殊的线性比例尺。定义域与值域完全相等。因此，它的 <code>invert</code> 方法也就是它本身。</p>
<blockquote>
<p>y &#x3D; x</p>
</blockquote>
<h3 id="Time-Scales"><a href="#Time-Scales" class="headerlink" title="Time Scales"></a>Time Scales</h3><p><strong>时间比例尺</strong>，线性比例尺的变体。例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = d3.<span class="title function_">scaleTime</span>()</span><br><span class="line">    .<span class="title function_">domain</span>([<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2000</span>, <span class="number">0</span>, <span class="number">1</span>), <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2000</span>, <span class="number">0</span>, <span class="number">2</span>)])</span><br><span class="line">    .<span class="title function_">range</span>([<span class="number">0</span>, <span class="number">960</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">x</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2000</span>, <span class="number">0</span>, <span class="number">1</span>,  <span class="number">5</span>)); <span class="comment">// 200</span></span><br><span class="line"><span class="title function_">x</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2000</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">16</span>)); <span class="comment">// 640</span></span><br><span class="line">x.<span class="title function_">invert</span>(<span class="number">200</span>); <span class="comment">// Sat Jan 01 2000 05:00:00 GMT-0800 (PST)</span></span><br><span class="line">x.<span class="title function_">invert</span>(<span class="number">640</span>); <span class="comment">// Sat Jan 01 2000 16:00:00 GMT-0800 (PST)</span></span><br></pre></td></tr></table></figure>

<h2 id="Sequential-Scales"><a href="#Sequential-Scales" class="headerlink" title="Sequential Scales"></a>Sequential Scales</h2><p><strong>Sequential Scales</strong> 与 <strong>Continuous Scales</strong> 类似，区别是，这个比例尺的值域是由 <code>interpolator</code> 决定的，不可控制。同时，<code>invert</code>, <code>range</code>, <code>rangeRound</code> 以及 <code>interpolate</code> 都不可用。</p>
<p>D3 提供了一系列的颜色插值器，因此其应用场景多与连续的颜色值域有关。</p>
<h2 id="Quantize-Scales"><a href="#Quantize-Scales" class="headerlink" title="Quantize Scales"></a>Quantize Scales</h2><p><strong>Quantize Scales</strong> 与 <strong>Linear Scales</strong> 类似，区别是，其值域是离散的。定义域将基于值域元素的个数被切割为<strong>相等的线段</strong>，输出值为线段到值域的<strong>一对一映射</strong>。</p>
<blockquote>
<p>y &#x3D; m round(x) + b</p>
</blockquote>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> color = d3.<span class="title function_">scaleQuantize</span>()</span><br><span class="line">    .<span class="title function_">domain</span>([<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">    .<span class="title function_">range</span>([<span class="string">&quot;brown&quot;</span>, <span class="string">&quot;steelblue&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">color</span>(<span class="number">0.49</span>); <span class="comment">// &quot;brown&quot;</span></span><br><span class="line"><span class="title function_">color</span>(<span class="number">0.51</span>); <span class="comment">// &quot;steelblue&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Quantile-Scales"><a href="#Quantile-Scales" class="headerlink" title="Quantile Scales"></a>Quantile Scales</h2><p><strong>Quantile scales</strong> 与 <strong>Quantize Scales</strong> 类似，区别是，其值域是“离散连续的”，即“<strong>离散的连续片段</strong>”。</p>
<p>首先，构造器会对定义域进行排序操作，然后根据值域元素的个数切分为<strong>相等的片段</strong>。如果无法等分，多余的元素将被加入到最后一组。</p>
<p>如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> quantile = d3.<span class="title function_">scaleQuantile</span>()</span><br><span class="line">  .<span class="title function_">domain</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">16</span>])</span><br><span class="line">  .<span class="title function_">range</span>([<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;white&#x27;</span>, <span class="string">&#x27;red&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">quantile</span>(<span class="number">3</span>)   <span class="comment">// will output &quot;red&quot;</span></span><br><span class="line"><span class="title function_">quantile</span>(<span class="number">16</span>)  <span class="comment">// will output &quot;red&quot;</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>其定义域将先被排序，而后被切分为 3 个片段：<code>[1, 1], [2, 2], [3, 3, 16]</code></p>
<p>此时，如果执行 <code>quantile.quantiles()</code>，将得到一个数组 <code>[2, 3]</code>，长度为值域长度减一。假设将其赋值为 <code>quantiles</code>，其含义为：</p>
<ul>
<li>定义域中小于 <code>quantiles[0]</code> 的值的，将被划分到第一个片段</li>
<li>大于等于数组元素 <code>quantiles[0]</code> 的值但是小于数组元素 <code>quantiles[1]</code> 的值的，将被划分到第二个片段</li>
<li>以此类推</li>
</ul>
<p>划分线段后，定义域就与值域成为一一对应的关系了。因此就有了以上结果。</p>
<h2 id="Threshold-Scales"><a href="#Threshold-Scales" class="headerlink" title="Threshold Scales"></a>Threshold Scales</h2><p><strong>Threshold scales</strong> 与 <strong>Quantile Scales</strong> 类似，区别是，我们将往 <code>domain</code> 中 直接传入与前者类似的 <code>quantiles</code>，也就是说，真正的定义域不做限制，限制的是它<strong>划分片段的方式</strong>。</p>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> color = d3.<span class="title function_">scaleThreshold</span>()</span><br><span class="line">    .<span class="title function_">domain</span>([<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">    .<span class="title function_">range</span>([<span class="string">&quot;red&quot;</span>, <span class="string">&quot;white&quot;</span>, <span class="string">&quot;green&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">color</span>(-<span class="number">1</span>);   <span class="comment">// &quot;red&quot;</span></span><br><span class="line"><span class="title function_">color</span>(<span class="number">0</span>);    <span class="comment">// &quot;white&quot;</span></span><br><span class="line"><span class="title function_">color</span>(<span class="number">0.5</span>);  <span class="comment">// &quot;white&quot;</span></span><br><span class="line"><span class="title function_">color</span>(<span class="number">1</span>);    <span class="comment">// &quot;green&quot;</span></span><br><span class="line"><span class="title function_">color</span>(<span class="number">1000</span>); <span class="comment">// &quot;green&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Ordinal-Scales"><a href="#Ordinal-Scales" class="headerlink" title="Ordinal Scales"></a>Ordinal Scales</h2><p><strong>Ordinal Scales</strong>（散点映射）</p>
<p>与连续映射不同，散点映射接受<strong>离散的定义域与值域</strong>。比如在一个博客中把不同的标签映射到一组颜色上去等。如果值域的元素量比定义域少，那么值域会“重复使用”。如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ordinal = d3.<span class="title function_">scaleOrdinal</span>()</span><br><span class="line">  .<span class="title function_">domain</span>([<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;grapefruit&quot;</span>])</span><br><span class="line">  .<span class="title function_">range</span>([<span class="number">0</span>, <span class="number">100</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">ordinal</span>(<span class="string">&quot;apple&quot;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">ordinal</span>(<span class="string">&quot;orange&quot;</span>); <span class="comment">// 100</span></span><br><span class="line"><span class="title function_">ordinal</span>(<span class="string">&quot;banana&quot;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">ordinal</span>(<span class="string">&quot;grapefruit&quot;</span>); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>

<h3 id="Band-Scales"><a href="#Band-Scales" class="headerlink" title="Band Scales"></a>Band Scales</h3><p><strong>Band Scales</strong> 与 <strong>Ordinal Scales</strong> 类似，区别是，其<strong>值域是连续的数值</strong>。例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> band = d3.<span class="title function_">scaleBand</span>()</span><br><span class="line">  .<span class="title function_">domain</span>([<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;grapefruit&quot;</span>])</span><br><span class="line">  .<span class="title function_">range</span>([<span class="number">0</span>, <span class="number">100</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">band</span>(<span class="string">&quot;apple&quot;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">band</span>(<span class="string">&quot;orange&quot;</span>); <span class="comment">// 25</span></span><br><span class="line"><span class="title function_">band</span>(<span class="string">&quot;banana&quot;</span>); <span class="comment">// 50</span></span><br><span class="line"><span class="title function_">band</span>(<span class="string">&quot;grapefruit&quot;</span>); <span class="comment">// 75</span></span><br></pre></td></tr></table></figure>

<p>Band Scales 提供了一些实用方法，用于控制映射的结果。比如获取 Band Width，强制转换整数，添加 Padding 等。</p>
<h3 id="Point-Scales"><a href="#Point-Scales" class="headerlink" title="Point Scales"></a>Point Scales</h3><p><strong>Point Scales</strong> 是 <strong>Band Scales</strong> 的特例，它的 <strong>Band Width 始终为 0</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> point = d3.<span class="title function_">scalePoint</span>()</span><br><span class="line">  .<span class="title function_">domain</span>([<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;grapefruit&quot;</span>])</span><br><span class="line">  .<span class="title function_">range</span>([<span class="number">0</span>, <span class="number">100</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">point</span>(<span class="string">&quot;apple&quot;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">point</span>(<span class="string">&quot;orange&quot;</span>); <span class="comment">// 33.333333333333336</span></span><br><span class="line"><span class="title function_">point</span>(<span class="string">&quot;banana&quot;</span>); <span class="comment">// 66.66666666666667</span></span><br><span class="line"><span class="title function_">point</span>(<span class="string">&quot;grapefruit&quot;</span>); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>d3</tag>
      </tags>
  </entry>
  <entry>
    <title>删除了一个游戏</title>
    <url>/2016/deleted-a-game/</url>
    <content><![CDATA[<p>今天，在N连跪呕心沥血终于推倒对面一座塔赢了以后，我把皇室战争这个游戏删了。</p>
<p>通常来说，删除一个游戏的原因无非几种：没兴趣，不好玩，玩腻了，等等。但是，皇室战争这个游戏，却比较特别。</p>
<p>要说它不好玩呢，其实挺有意思的，也挺符合现代游戏的节奏，不需要长时间在线，有空抽几分钟玩一局即可。</p>
<p>要说玩腻了呢，其实也没有，虽说已经玩了好几个月，但是很多酷炫的卡我依然还没有开到。</p>
<p>然后，问题在哪里呢？</p>
<span id="more"></span>

<p><strong>我在这个游戏里面完全找不到快乐。</strong></p>
<p>很奇葩啊。一个在其它方面如此优秀的游戏，却完全忽视了一个游戏应该拥有的最基本的要素：它至少要能够让人感到快乐，哪怕是历尽八十一难以后的快乐。</p>
<p>然而，这个游戏，除了给予痛苦，愤怒，以及绝望以外，完全没有其它产出。</p>
<p><strong>痛苦</strong></p>
<p>一个人在这个游戏里能够获得的成就，由什么来决定呢？很不幸，我给出的答案是，5% 的技术，35% 的运气，以及 60% 的氪金。简单来说，这是一个氪金决定一切的游戏，因此，人民币战士就不讨论了，重点说一下像我这样的零氪玩家。</p>
<p>零氪玩家群体，在游戏中就是一个平等的群体了吗？很不幸，依然不是。在这种前提下，运气就是决定成就的最终因素。因为，皇室战争是一款卡牌对战游戏，卡牌在前，对战在后，你连卡都没有，拿什么对战呢？手上一堆屌丝卡牌，想凭借过人的技术和风骚的走位屹立在零氪之巅？我只能说，这个梦做得可以。</p>
<p>于此同时，更加残酷的现实是，游戏并没有零氪专区，就好像现实世界也没有设置单身狗专区一样。我除了要与运气比我好得多的零氪玩家斗智斗勇以外，时不时还要充当一下游戏本身为人民币玩家提供的服务。</p>
<p><strong>愤怒</strong></p>
<p>如果这个游戏仅仅是由以上内容，那它并不会使我感到愤怒，因为至少我还可以安静地玩我自己的游戏。</p>
<p>然而，很遗憾，游戏有一项特色机制，我觉得，应该称之为嘲讽机制。</p>
<p>在对战过程中，对手可以不断地发表情对我进行调戏，其实认真地说，都是一些很普通的表情，但是在某些场景下，就一定会让人觉得是一种嘲讽。</p>
<p>就很像 DOTA 中的“技不如人，甘拜下风”。</p>
<p>也许你会说，这不是很正常吗，任何对抗类游戏都会存在嘲讽这样的东西吧。</p>
<p>但是，皇室战争中的嘲讽，比较蛋疼。面对对手的嘲讽，97% 的情况都是无能为力的。为什么是 97% 呢？因为刚才说了，选手技术对游戏胜负只有 5% 的决定作用，而我对自己比较自信，给自己多加 1% 不过分吧。</p>
<p>也就是说，开局第一波交锋以后发现怼不过对面并且受到了嘲讽，97% 的情况下我都做不了任何改变。只能选择默默地被继续嘲讽，或者直接退出游戏。</p>
<p>这种情况，一开始遇到也许会觉得有趣，但是认真玩下去以后就会使人感到愤怒。</p>
<p><strong>绝望</strong></p>
<p>我痛苦着，我愤怒着，我卧薪尝胆总可以吧，前期痛苦越大，后面不就会获得更强烈的成就感吗？这样一来，它也可以稳稳地留住我这样的玩家。</p>
<p>然而并不会。</p>
<p>这也就是我说“绝望”的原因。</p>
<p>前期运气差，通过长时间的收集，总能够获得一些稀有卡片的。但是，有意义吗？卡片变好了就会进入更高阶的竞技场，结果是继续被更高阶的玩家吊打。就算我冲到了零氪玩家之巅，又如何？依然要被人民币战士吊打。</p>
<p>我要氪金呢？很遗憾，这个游戏，小氪完全不能给玩家带来任何改变，因为除了氪金，还有 35% 的运气成分在啊！而且，就算我疯狂氪金，在吊打一波渣渣以后，我也还是得继续被比我更有钱的人吊打。这个游戏带给我的东西不会有任何变化。</p>
<p>至于嘲讽，自然而然，我也可以嘲讽别人。但是问题在于，唯一能让我感到有趣的嘲讽是在首先受到了对手的嘲讽并成功翻盘的案例。这种情况，聊胜于无。</p>
<p>那么，我可以故意降杯去欺负新人吗？</p>
<p>啊，终于，发现了一条可行的路子。但是，我依然要保持一定的负场率，不然还是会在吊打菜狗的过程中不知不觉爬回到原本的竞技场，继续被吊打。</p>
<p>其实有很多人也确实是这么做了。我经常玩着玩着看到一些人掏出几个 9 级甚至 10 级的卡片，就会想，你这么厉害，还在这里干什么啊。然后就只能等死。这真是一个忧伤的故事。</p>
<p>其实这游戏有一个缺陷：它只有一种游戏模式。虽然它对游戏性把握得比较好，不容易感到疲倦，但是，这也就导致了我完全无法回避上面所提出的种种问题。最近新出的一个锦标赛模式就不谈了，我连加入都从来没有成功过，谈何体验。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>失望</title>
    <url>/2018/disappointed/</url>
    <content><![CDATA[<p>今年的 TI 本子到目前为止已经充了 ￥850 左右，770 级。</p>
<ul>
<li>不朽 1 没有开到极其珍稀（PA），其它齐全</li>
<li>不朽 2 齐全，一件极其珍稀（黑鸟）</li>
<li>不朽 3 没有开到极其珍稀（巫医），其它齐全</li>
<li>宝瓶 1 一轮，一件稀有额外（术士）</li>
<li>宝瓶 2 一轮，一件稀有额外（大屁股）</li>
</ul>
<p>战绩可以说非常不尽人意。虽然中途 V 社承认自己失误（被迫？）发了一次补偿，但依然没我。</p>
<p>现在每周就肝肝幽穴风云，肝肝代币，箱子开了马上又是一次轮回，感觉除了中看不中用的等级以外什么都没留下。想要的东西永远开不到，除了失望以外说不出别的感受来。</p>
<p>今天中午又开了一个箱子，依然是熟悉的啥都没有，突然就觉得好累，有点不想肝了。人生啊。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>《中国药神》</title>
    <url>/2018/dying-to-survive/</url>
    <content><![CDATA[<p>《我不是药神》是一部好电影。</p>
<p>影片最打动我的一段，是小吕请勇哥去他家吃饭的那几分钟。这些小人物倾家荡产，拼了命地活着，到底只不过就是为了一些「小事」而已。不然何苦呢？得了绝症的小吕幸福吗？从某个角度看，他非常幸福：有一个至死都不离不弃的爱人，还有一个至少到现在为止都健健康康的孩子。但生活就是这样残酷。</p>
<p>吃不起特效药的人，去抗议药厂卖天价药，对于不幸的患者来说，我命都快没了，管你是对是错呢？影片故意刻画了一个近乎反派立场的药厂，是不得已而为之，但我们要记住：真正对人类社会的发展做出贡献的是药厂。它卖天价药，卖任何价格，都没有问题，你永远不知道药厂为了第一片药付出了多少。至于吃不起，那是你的问题。就像影片说的一样：穷病，没法治。</p>
<p>影片从「病」这个角度，揭露出了绝大部分人生活在这个社会上的一些无奈。除非你有钱到刘强东这种程度，否则这个世界上总有你付不起的代价，这一刻是公平的。</p>
<p>这部电影好就好在，它选取了一个能够引发共鸣，但又值得深思的角度，同时把故事给讲好了。其实真的不难，真心希望它能够赚一笔大的，让大家以后都有样学样，多拍点有营养的东西。</p>
<p>PS. 毕导可以出来点评一下了，我猜这绝对又是境外势力的阴谋？</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>高效 CSS 与 Reflow &amp; Repaint</title>
    <url>/2016/efficient-css-and-reflow-repaint/</url>
    <content><![CDATA[<h2 id="高效-CSS"><a href="#高效-CSS" class="headerlink" title="高效 CSS"></a>高效 CSS</h2><p>如何编写高效 CSS 其实是一个过时的话题。</p>
<p>这方面曾经存在许多真知灼见，比如说 CSS 选择器的解析方向是从子到父，比如说 ID 选择器是最快的，不应该给 Class 选择器加上 Tag 限制，尽量避免使用后代选择器等。但是，随着浏览器解析引擎的发展，这些都已经变得不再那么重要了。MDN 上阐述高效 CSS 的文章也已经被标记为过时。</p>
<p>Antti Koivisto 是 Webkit 核心的贡献者之一，他曾说：</p>
<blockquote>
<p>My view is that authors should not need to worry about optimizing selectors (and from what I see, they generally don’t), that should be the job of the engine.</p>
</blockquote>
<p>因此，如果把“高效 CSS”的含义限制为“高效 CSS 选择器”的话，那么实际上现在它已经不是开发者需要关心的问题了。我们需要做的事情变得更“政治正确”：保证功能与结构的良好可维护性即可。</p>
<p>那么 CSS 的性能还能通过什么方式提升呢？这就是下面的内容。</p>
<span id="more"></span>

<h2 id="Reflow-Repaint"><a href="#Reflow-Repaint" class="headerlink" title="Reflow &amp; Repaint"></a>Reflow &amp; Repaint</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>Reflow （回流）和 Repaint（重绘）是浏览器的两种动作。</p>
<ul>
<li>Repaint 会在某个元素的外观发生变化，但没有影响布局时触发。比如说 <code>visibility</code>  &#x2F; <code>outline</code>  &#x2F; <code>background-color</code>  等 CSS 属性的变化将会触发 Repaint</li>
<li>Reflow 在元素变化影响到布局时触发</li>
</ul>
<p>显然，Reflow 的代价要比 Repaint 高昂得多，它影响到了页面部分（或者所有）的布局。一个 元素的 Reflow 动作同时也会触发它的所有后代 &#x2F; 祖先 &#x2F; 跟随它的 DOM 节点产生 Reflow</p>
<p>比如说：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h4</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Welcome: <span class="tag">&lt;/<span class="name">strong</span>&gt;</span>......<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h5</span>&gt;</span>......<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>......<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>......<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对这一小段 HTML 来说，如果 <code>&lt;p&gt;</code> 元素上产生了 Reflow，那么 <code>&lt;strong&gt;</code> 将会受到影响（因为它属于前者的后代元素），当然也跑不了 <code>&lt;div&gt;</code> 和 <code>&lt;body&gt;</code> （祖先元素），<code>&lt;h5&gt;</code> 和 <code>&lt;ol&gt;</code> 则躺枪：没事跟在别人后面干啥呢。</p>
<p>因此，大多数的 Reflow，其实都导致了整个页面重新渲染。这对于计算能力稍低的设备（如手机）来说是非常困难的。我经常发现桌面计算机上运行良好的动画效果到了手机上就看起来很痛苦。</p>
<h3 id="Reflow-的触发点"><a href="#Reflow-的触发点" class="headerlink" title="Reflow 的触发点"></a>Reflow 的触发点</h3><ul>
<li>Window resizing</li>
<li>改变字体</li>
<li>增删样式表</li>
<li>内容改变，比如用户在输入框中输入</li>
<li>触发 CSS 伪类，比如 <code>:hover</code>  等</li>
<li>更改 class 属性</li>
<li>脚本操作 DOM</li>
<li>计算 <code>offsetWidth</code> 与 <code>offsetHeight</code></li>
<li>更改 style 属性</li>
<li>……</li>
</ul>
<h3 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h3><p>恩。。。看了这么多发现，要完全避免 Reflow 还是比较困难的。那么我们至少可以有一些办法去减少它们的影响吧。</p>
<p>以下的方法都是收集于一些国外作者的博客。</p>
<h4 id="尽量选择-DOM-树底层的元素去修改-Class"><a href="#尽量选择-DOM-树底层的元素去修改-Class" class="headerlink" title="尽量选择 DOM 树底层的元素去修改 Class"></a>尽量选择 DOM 树底层的元素去修改 Class</h4><p>比如说，不要选择类似 Wrapper 这样的元素去修改 Class，而尽量找更加底层的元素。因为 Reflow 会影响所有后代祖先以及后邻，这么干可以尽量地减少 Reflow 的影响，从而提高 CSS 渲染性能。</p>
<h4 id="避免设置多个内联样式"><a href="#避免设置多个内联样式" class="headerlink" title="避免设置多个内联样式"></a>避免设置多个内联样式</h4><p>这里的意思其实是说不要使用 JS 来给元素按部就班地设置样式 —— 因为每一次样式变化都会引起一次 Reflow，最好把样式整合为一个 Class 然后一次性加到元素上面去。</p>
<p>还有另外一种解决办法是在设置样式前先将其脱离正常文档流，比如 <code>display</code> 属性设为 <code>none</code>，然后所有设置都完成后再变回来。这样也是可以接受的。</p>
<h4 id="如果要使用动画尽量选择-Position-为-Fixed-或-Absolute-的元素"><a href="#如果要使用动画尽量选择-Position-为-Fixed-或-Absolute-的元素" class="headerlink" title="如果要使用动画尽量选择 Position 为 Fixed 或 Absolute 的元素"></a>如果要使用动画尽量选择 Position 为 Fixed 或 Absolute 的元素</h4><p>动画的每一帧都会引起 Repaint 或者 Reflow，最好是可以让它脱离正常文档流，这样就绝对不会引起大规模持续的 Reflow</p>
<h4 id="不要选用-Table-布局"><a href="#不要选用-Table-布局" class="headerlink" title="不要选用 Table 布局"></a>不要选用 Table 布局</h4><p>虽然我们已经有很多理由不去使用 table 布局了，但这又是另外一个 —— 任意一个单元格的小改动都很有可能触发整个布局所有节点的变化，带来巨大的性能开销。</p>
<p>&nbsp;</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Egret Note</title>
    <url>/2017/egret-note/</url>
    <content><![CDATA[<p>Egret Engine 的学习笔记。</p>
<p>Egret Engine 是一款基于 JavaScript 的游戏制作引擎，支持 2D 与 3D 模式，支持 Canvas 与 WebGL 渲染，目前使用 TypeScript 编写。</p>
<span id="more"></span>

<h2 id="显示对象"><a href="#显示对象" class="headerlink" title="显示对象"></a>显示对象</h2><p>“显示对象”，准确的含义是可以在舞台上显示的对象。可以显示的对象，既包括可以直接看见的图形、文字、视频、图片等，也包括不能看见但真实存在的显示对象容器。</p>
<p>在Egret中，视觉图形都是由显示对象和显示对象容器组成的。</p>
<h3 id="对象树"><a href="#对象树" class="headerlink" title="对象树"></a>对象树</h3><ul>
<li>根：舞台 <code>DisplayObjectContainer:Stage</code></li>
<li>茎：主容器（文档类） <code>DisplayObjectContainer</code></li>
<li>树枝：容器 <code>DisplayObjectContainer</code></li>
<li>树叶：显示对象 <code>DisplayObject</code></li>
</ul>
<h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><ul>
<li><code>DisplayObject</code>	显示对象基类，所有显示对象均继承自此类</li>
<li><code>Bitmap</code>	位图，用来显示图片</li>
<li><code>Shape</code>	用来显示矢量图，可以使用其中的方法绘制矢量图形</li>
<li><code>TextField</code>	文本类</li>
<li><code>BitmapText</code>	位图文本类</li>
<li><code>DisplayObjectContainer</code>	显示对象容器接口，所有显示对象容器均实现此接口</li>
<li><code>Sprite</code>	带有矢量绘制功能的显示容器</li>
<li><code>Stage</code>	舞台类</li>
</ul>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>二维坐标系。原点位于<strong>左上角</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="attr">shape</span>:egret.<span class="property">Shape</span> = <span class="keyword">new</span> egret.<span class="title class_">Shape</span>();</span><br><span class="line">shape.<span class="property">x</span> = <span class="number">100</span>;</span><br><span class="line">shape.<span class="property">y</span> = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p>支持的操作：</p>
<ul>
<li>alpha：透明度</li>
<li>width：宽度</li>
<li>height：高度</li>
<li>rotation：旋转角度</li>
<li>scaleX：横向缩放</li>
<li>scaleY：纵向缩放</li>
<li>skewX：横向斜切</li>
<li>skewY：纵向斜切</li>
<li>visible：是否可见</li>
<li>x：X 轴坐标值</li>
<li>y：Y 轴坐标值</li>
<li>anchorOffsetX：对象绝对锚点 X</li>
<li>anchorOffsetY：对象绝对锚点 Y</li>
</ul>
<h4 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h4><p>Display Object 显示在舞台上的的位置需要通过 Anchor 来计算（初始值位于 Display Object 的左上角），可以通过 <code>anchorOffsetX</code> 和 <code>anchorOffsetY</code> 方法来改变对象的锚点（比如移至中点）。</p>
<h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><p>Display Object 的初始坐标为 <strong>(0, 0)<strong>，即位于</strong>容器的左上角</strong>（而非舞台）。</p>
<ul>
<li>相对于容器的位置可以类比作 <code>position: relative</code></li>
<li>相对于舞台的位置可以类比作 <code>position: absolute</code></li>
</ul>
<p>如果要获取绝对位置，需要调用 <code>container.globalToLocal(x, y)</code> 方法，参数代表舞台坐标，返回值为容器坐标。</p>
<p>至于 <code>z-index</code> 则跟 svg 的处理类似。</p>
<h4 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h4><p>两种方法更改尺寸：</p>
<ul>
<li>height &#x2F; width</li>
<li>scaleX &#x2F; scaleY</li>
</ul>
<h4 id="斜切"><a href="#斜切" class="headerlink" title="斜切"></a>斜切</h4><p>斜切可以造成类似矩形变形为平行四边形的效果。</p>
<ul>
<li>skewX：横向斜切</li>
<li>skewY：纵向斜切</li>
</ul>
<h2 id="对象容器"><a href="#对象容器" class="headerlink" title="对象容器"></a>对象容器</h2><p><code>DisplayObjectContainer</code> 是 <code>DisplayObject</code> 的子类。</p>
<p>向 Container 中添加 DisplayObject：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">container.<span class="title function_">addChild</span>(displayObject);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>同一个显示对象无论被代码加入显示列表多少次，在屏幕上只绘制一次。如果一个显示对象 A 被添加到了 B 这个容器中，然后 A 又被添加到了 C 容器中。那么在第二次执行 C.addChild(A) 的时候，A 自动的从 B 容器中被删除，然后添加到 C 容器中。</p>
</blockquote>
<p>移除：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">container.<span class="title function_">removeChild</span>(displayObject);</span><br></pre></td></tr></table></figure>

<h3 id="深度管理"><a href="#深度管理" class="headerlink" title="深度管理"></a>深度管理</h3><p>DisplayObject 的 <code>z-index</code> 由其插入到容器中的顺序决定。后插入的显示在上层。</p>
<p>插入到指定位置使用 <code>container.addChildAt(object, index)</code> 方法。</p>
<p>同时也有 <code>container.removeChileAt(index)</code> 方法。</p>
<p>删除全部对象使用 <code>container.removeChildren()</code> 方法。</p>
<p>交换 DisplayObject 的位置有两个方法：</p>
<ul>
<li><code>container.swapChildren(object, object)</code></li>
<li><code>container.swapChildrenAt(index, index)</code></li>
</ul>
<p>手动设置 z-index 使用 <code>container.setChildIndex( object, index )</code> 方法。</p>
<h3 id="子对象选择"><a href="#子对象选择" class="headerlink" title="子对象选择"></a>子对象选择</h3><p>通过 z-index 获取：<code>container.getChildAt(index)</code></p>
<p>通过 name 获取（需要预先给 DisplayObject 设置 name 属性）：<code>container.getChildByName(name)</code></p>
<blockquote>
<p>通过 z-index 获取子对象性能更佳。</p>
</blockquote>
<h2 id="矢量绘图"><a href="#矢量绘图" class="headerlink" title="矢量绘图"></a>矢量绘图</h2><blockquote>
<p>Egret中可以直接使用程序来绘制一些简单的图形，这些图形在运行时都会进行实时绘图。要进行绘图操作，我们需要使用 Graphics 这个类。但并非直接使用。 一些显示对象中已经包含了绘图方法，我们可以直接调用这些方法来进行绘图。 Graphics 中提供多种绘图方法。</p>
</blockquote>
<p>已有的绘图方法包括：矩形、圆形、直线、曲线、圆弧。</p>
<p>以下的 <code>shp</code> 代表 shape，即一个 Shape 对象的实例。</p>
<p><code>shp.graphics.clear()</code> 是通用的清楚绘图方法。</p>
<h3 id="基本图形"><a href="#基本图形" class="headerlink" title="基本图形"></a>基本图形</h3><h4 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="attr">shp</span>:egret.<span class="property">Shape</span> = <span class="keyword">new</span> egret.<span class="title class_">Shape</span>();</span><br><span class="line">shp.<span class="property">graphics</span>.<span class="title function_">beginFill</span>( <span class="number">0xff0000</span>, <span class="number">1</span>); <span class="comment">//color and alpha</span></span><br><span class="line">shp.<span class="property">graphics</span>.<span class="title function_">drawRect</span>( <span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span> ); <span class="comment">// x y width height</span></span><br><span class="line">shp.<span class="property">graphics</span>.<span class="title function_">lineStyle</span>( <span class="number">10</span>, <span class="number">0x00ff00</span> ); <span class="comment">// border-width and border-color</span></span><br><span class="line">shp.<span class="property">graphics</span>.<span class="title function_">endFill</span>();</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">addChild</span>( shp );</span><br></pre></td></tr></table></figure>

<h4 id="圆形"><a href="#圆形" class="headerlink" title="圆形"></a>圆形</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">shp.<span class="property">graphics</span>.<span class="title function_">lineStyle</span>( <span class="number">10</span>, <span class="number">0x00ff00</span> );</span><br><span class="line">shp.<span class="property">graphics</span>.<span class="title function_">beginFill</span>( <span class="number">0xff0000</span>, <span class="number">1</span>);</span><br><span class="line">shp.<span class="property">graphics</span>.<span class="title function_">drawCircle</span>( <span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span> ); <span class="comment">// x y r</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>此处需要注意的是，圆形的X轴和Y轴位置是相对于Shape对象的锚点计算的。</p>
</blockquote>
<h4 id="直线"><a href="#直线" class="headerlink" title="直线"></a>直线</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">shp.<span class="property">graphics</span>.<span class="title function_">lineStyle</span>( <span class="number">2</span>, <span class="number">0x00ff00</span> );</span><br><span class="line">shp.<span class="property">graphics</span>.<span class="title function_">moveTo</span>( <span class="number">10</span>,<span class="number">10</span> ); <span class="comment">// 起点</span></span><br><span class="line">shp.<span class="property">graphics</span>.<span class="title function_">lineTo</span>( <span class="number">100</span>, <span class="number">20</span> ); <span class="comment">// 终点（可以多次执行 lineTo）</span></span><br></pre></td></tr></table></figure>

<h4 id="曲线"><a href="#曲线" class="headerlink" title="曲线"></a>曲线</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">shp.<span class="property">graphics</span>.<span class="title function_">lineStyle</span>( <span class="number">2</span>, <span class="number">0x00ff00</span> );</span><br><span class="line">shp.<span class="property">graphics</span>.<span class="title function_">moveTo</span>( <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">shp.<span class="property">graphics</span>.<span class="title function_">curveTo</span>( <span class="number">100</span>,<span class="number">100</span>, <span class="number">200</span>,<span class="number">50</span>); <span class="comment">// 控制点 x y ，终点 x y</span></span><br></pre></td></tr></table></figure>

<h4 id="圆弧"><a href="#圆弧" class="headerlink" title="圆弧"></a>圆弧</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">drawArc</span>( <span class="attr">x</span>:number, <span class="attr">y</span>:number, <span class="attr">radius</span>:number, <span class="attr">startAngle</span>:number, <span class="attr">endAngle</span>:number, <span class="attr">anticlockwise</span>:boolean ):<span class="keyword">void</span></span><br></pre></td></tr></table></figure>

<p>前面的参数跟前面绘制圆形的一样，圆弧路径的圆心在 (x, y) 位置，半径为 radius 。后面的参数表示根据 anticlockwise ： 如果为 true，逆时针绘制圆弧，反之，顺时针绘制。</p>
<blockquote>
<p>需要注意是传入的 startAngle 和 endAngle 均为弧度而不是角度。</p>
</blockquote>
<h2 id="遮罩"><a href="#遮罩" class="headerlink" title="遮罩"></a>遮罩</h2><p>DisplayObject 有一个 <code>mask</code> 属性，简单来说，就是类似蒙版上面的一个洞。但这个 <code>mask</code> 是洞而不是蒙版。如果添加了 <code>mask</code> 属性，则 Object 只能显示这个“洞中”的内容。</p>
<p>用作遮罩的显示对象可设置动画、动态调整大小。遮罩显示对象不一定需要添加到显示列表中。<strong>但是，如果希望在缩放舞台时也缩放遮罩对象，或者如果希望支持用户与遮罩对象的交互（如调整大小），则必须将遮罩对象添加到显示列表中</strong>。</p>
<blockquote>
<p>不能使用一个遮罩对象来遮罩另一个遮罩对象。</p>
</blockquote>
<p>通过将 mask 属性设置为 null 可以删除遮罩。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mySprite.<span class="property">mask</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h2 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h2><ul>
<li>非精确：<code>var isHit:boolean = shp.hitTestPoint( 10, 10 );</code></li>
<li>精确：<code>shp.hitTestPoint( 10, 10，ture);</code></li>
</ul>
<p>非精确大概可以看做面积相交，精确则是边缘相交。</p>
<blockquote>
<p>大量使用精确碰撞检测，会消耗更多的性能。</p>
</blockquote>
<h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><p>Egret 提供三种不同的文本类型，不同类型具有以下特点：</p>
<ul>
<li>普通文本：用于显示标准文本内容的文本类型</li>
<li>输入文本：允许用户输入的文本类型</li>
<li>位图文本：借助位图字体渲染的文本类型</li>
</ul>
<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="attr">label</span>:egret.<span class="property">TextField</span> = <span class="keyword">new</span> egret.<span class="title class_">TextField</span>(); </span><br><span class="line">label.<span class="property">text</span> = <span class="string">&quot;这是一个文本&quot;</span>;</span><br><span class="line">label.<span class="property">size</span> = <span class="number">20</span>; <span class="comment">// 全局默认值 egret.TextField.default_size，下同</span></span><br><span class="line">label.<span class="property">width</span> = <span class="number">70</span>;</span><br><span class="line">label.<span class="property">height</span> = <span class="number">70</span>;</span><br><span class="line">label.<span class="property">textAlign</span> = egret.<span class="property">HorizontalAlign</span>.<span class="property">RIGHT</span>; <span class="comment">// CENTER LEFT</span></span><br><span class="line">label.<span class="property">verticalAlign</span> = egret.<span class="property">VerticalAlign</span>.<span class="property">BOTTOM</span>; <span class="comment">// MIDDLE TOP</span></span><br><span class="line">label.<span class="property">fontFamily</span> = <span class="string">&quot;KaiTi&quot;</span>; <span class="comment">// default_fontFamily</span></span><br><span class="line">label.<span class="property">textColor</span> = <span class="number">0xff0000</span>; <span class="comment">// default_textColor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置粗体与斜体</span></span><br><span class="line">label.<span class="property">bold</span> = <span class="literal">true</span>;</span><br><span class="line">label.<span class="property">italic</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置描边属性</span></span><br><span class="line">label.<span class="property">strokeColor</span> = <span class="number">0x0000ff</span>;</span><br><span class="line">label.<span class="property">stroke</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">addChild</span>( label );</span><br></pre></td></tr></table></figure>

<p>支持格式混排：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSON 模式</span></span><br><span class="line">label.<span class="property">textFlow</span> = &lt;<span class="title class_">Array</span>&lt;egret.<span class="property">ITextElement</span>&gt;&gt;[</span><br><span class="line">    &#123;<span class="attr">text</span>: <span class="string">&quot;妈妈再也不用担心我在&quot;</span>, <span class="attr">style</span>: &#123;<span class="string">&quot;size&quot;</span>: <span class="number">12</span>&#125;&#125;</span><br><span class="line">    , &#123;<span class="attr">text</span>: <span class="string">&quot;Egret&quot;</span>, <span class="attr">style</span>: &#123;<span class="string">&quot;textColor&quot;</span>: <span class="number">0x336699</span>, <span class="string">&quot;size&quot;</span>: <span class="number">60</span>, <span class="string">&quot;strokeColor&quot;</span>: <span class="number">0x6699cc</span>, <span class="string">&quot;stroke&quot;</span>: <span class="number">2</span>&#125;&#125;</span><br><span class="line">    , &#123;<span class="attr">text</span>: <span class="string">&quot;里说一句话不能包含各种&quot;</span>, <span class="attr">style</span>: &#123;<span class="string">&quot;fontFamily&quot;</span>: <span class="string">&quot;楷体&quot;</span>&#125;&#125;</span><br><span class="line">    , &#123;<span class="attr">text</span>: <span class="string">&quot;五&quot;</span>, <span class="attr">style</span>: &#123;<span class="string">&quot;textColor&quot;</span>: <span class="number">0xff0000</span>&#125;&#125;</span><br><span class="line">    , &#123;<span class="attr">text</span>: <span class="string">&quot;彩&quot;</span>, <span class="attr">style</span>: &#123;<span class="string">&quot;textColor&quot;</span>: <span class="number">0x00ff00</span>&#125;&#125;</span><br><span class="line">    , &#123;<span class="attr">text</span>: <span class="string">&quot;缤&quot;</span>, <span class="attr">style</span>: &#123;<span class="string">&quot;textColor&quot;</span>: <span class="number">0xf000f0</span>&#125;&#125;</span><br><span class="line">    , &#123;<span class="attr">text</span>: <span class="string">&quot;纷&quot;</span>, <span class="attr">style</span>: &#123;<span class="string">&quot;textColor&quot;</span>: <span class="number">0x00ffff</span>&#125;&#125;</span><br><span class="line">    , &#123;<span class="attr">text</span>: <span class="string">&quot;、\n&quot;</span>&#125;</span><br><span class="line">    , &#123;<span class="attr">text</span>: <span class="string">&quot;大&quot;</span>, <span class="attr">style</span>: &#123;<span class="string">&quot;size&quot;</span>: <span class="number">36</span>&#125;&#125;</span><br><span class="line">    , &#123;<span class="attr">text</span>: <span class="string">&quot;小&quot;</span>, <span class="attr">style</span>: &#123;<span class="string">&quot;size&quot;</span>: <span class="number">6</span>&#125;&#125;</span><br><span class="line">    , &#123;<span class="attr">text</span>: <span class="string">&quot;不&quot;</span>, <span class="attr">style</span>: &#123;<span class="string">&quot;size&quot;</span>: <span class="number">16</span>&#125;&#125;</span><br><span class="line">    , &#123;<span class="attr">text</span>: <span class="string">&quot;一&quot;</span>, <span class="attr">style</span>: &#123;<span class="string">&quot;size&quot;</span>: <span class="number">24</span>&#125;&#125;</span><br><span class="line">    , &#123;<span class="attr">text</span>: <span class="string">&quot;、&quot;</span>&#125;</span><br><span class="line">    , &#123;<span class="attr">text</span>: <span class="string">&quot;格&quot;</span>, <span class="attr">style</span>: &#123;<span class="string">&quot;italic&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;textColor&quot;</span>: <span class="number">0x00ff00</span>&#125;&#125;</span><br><span class="line">    , &#123;<span class="attr">text</span>: <span class="string">&quot;式&quot;</span>, <span class="attr">style</span>: &#123;<span class="string">&quot;size&quot;</span>: <span class="number">16</span>, <span class="string">&quot;textColor&quot;</span>: <span class="number">0xf000f0</span>&#125;&#125;</span><br><span class="line">    , &#123;<span class="attr">text</span>: <span class="string">&quot;各&quot;</span>, <span class="attr">style</span>: &#123;<span class="string">&quot;italic&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;textColor&quot;</span>: <span class="number">0xf06f00</span>&#125;&#125;</span><br><span class="line">    , &#123;<span class="attr">text</span>: <span class="string">&quot;样&quot;</span>, <span class="attr">style</span>: &#123;<span class="string">&quot;fontFamily&quot;</span>: <span class="string">&quot;楷体&quot;</span>&#125;&#125;</span><br><span class="line">    , &#123;<span class="attr">text</span>: <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    , &#123;<span class="attr">text</span>: <span class="string">&quot;的文字了！&quot;</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML 模式 （标签与属性部分支持）</span></span><br><span class="line">label.<span class="property">textFlow</span> = (<span class="keyword">new</span> egret.<span class="property">HtmlTextParser</span>).<span class="title function_">parser</span>(</span><br><span class="line">    <span class="string">&#x27;没有任何格式初始文本，&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&lt;font color=&quot;#0000ff&quot; size=&quot;30&quot; fontFamily=&quot;Verdana&quot;&gt;Verdana blue large&lt;/font&gt;&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&lt;font color=&quot;#ff7f50&quot; size=&quot;10&quot;&gt;珊瑚色&lt;b&gt;局部加粗&lt;/b&gt;小字体&lt;/font&gt;&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&lt;i&gt;斜体&lt;/i&gt;&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="事件与链接"><a href="#事件与链接" class="headerlink" title="事件与链接"></a>事件与链接</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tx.<span class="property">textFlow</span> = <span class="keyword">new</span> <span class="title class_">Array</span>&lt;egret.<span class="property">ITextElement</span>&gt;(</span><br><span class="line">    &#123; <span class="attr">text</span>:<span class="string">&quot;这段文字有链接&quot;</span>, <span class="attr">style</span>: &#123; <span class="string">&quot;href&quot;</span> : <span class="string">&quot;event:text event triggered&quot;</span> &#125; &#125;</span><br><span class="line">    ,&#123; <span class="attr">text</span>:<span class="string">&quot;\n这段文字没链接&quot;</span>, <span class="attr">style</span>: &#123;&#125; &#125;</span><br><span class="line">);</span><br><span class="line">tx.<span class="property">touchEnabled</span> = <span class="literal">true</span>;</span><br><span class="line">tx.<span class="title function_">addEventListener</span>( egret.<span class="property">TextEvent</span>.<span class="property">LINK</span>, <span class="keyword">function</span>(<span class="params"> evt:egret.TextEvent </span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( evt.<span class="property">text</span> );</span><br><span class="line">&#125;, <span class="variable language_">this</span> );</span><br></pre></td></tr></table></figure>

<p>也可以直接将 <code>href</code> 设置为 url，这样不需要事件监听，将直接打开链接。但<strong>只适用 Web 端</strong>。</p>
<h3 id="文本输入"><a href="#文本输入" class="headerlink" title="文本输入"></a>文本输入</h3><p>关键代码是设置其类型为 INPUT。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="attr">txInput</span>:egret.<span class="property">TextField</span> = <span class="keyword">new</span> egret.<span class="property">TextField</span>;</span><br><span class="line">txInput.<span class="property">type</span> = egret.<span class="property">TextFieldType</span>.<span class="property">INPUT</span>;</span><br></pre></td></tr></table></figure>

<p>绘制输入背景可以用其它 DisplayObject，目前没有内置实现。</p>
<p>获取焦点使用 <code>textIput.setFocus();</code> 方法。</p>
<p>除此以外，还有 <code>inputType</code> 属性表示输入内容的区别，这个主要用于移动端弹出相应的键盘。</p>
<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>事件类：<code>egret.Event</code></p>
<h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><blockquote>
<p>事件机制包含4个步骤：注册侦听器，发送事件，侦听事件，移除侦听器。这四个步骤是按照顺序来执行的。</p>
</blockquote>
<h3 id="事件类"><a href="#事件类" class="headerlink" title="事件类"></a>事件类</h3><p>其构建器可以传 3 个参数：事件类型、是否冒泡、是否可取消（什么是取消？）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DateEvent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">egret.Event</span></span><br><span class="line">&#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="attr">DATE</span>:string = <span class="string">&quot;约会&quot;</span>;</span><br><span class="line">    public <span class="attr">_year</span>:number = <span class="number">0</span>;</span><br><span class="line">    public <span class="attr">_month</span>:number = <span class="number">0</span>;</span><br><span class="line">    public <span class="attr">_date</span>:number = <span class="number">0</span>;</span><br><span class="line">    public <span class="attr">_where</span>:string = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    public <span class="attr">_todo</span>:string = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    public <span class="title function_">constructor</span>(<span class="params">type:string, bubbles:boolean=<span class="literal">false</span>, cancelable:boolean=<span class="literal">false</span></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">super</span>(type,bubbles,cancelable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><p>跟常见的情况不太一样，Egret 的事件<strong>绑定在发送者上</strong>（而不是接收者）。</p>
<h4 id="监听器函数"><a href="#监听器函数" class="headerlink" title="监听器函数"></a>监听器函数</h4><blockquote>
<p>一个侦听器必须是函数，它可以是一个独立函数，也可以是一个实例的方法。侦听器必须有一个参数，并且这个参数必须是 Event 类实例或其子类的实例， 同时，侦听器的返回值必须为空（void）。</p>
</blockquote>
<h4 id="注册与移除事件监听"><a href="#注册与移除事件监听" class="headerlink" title="注册与移除事件监听"></a>注册与移除事件监听</h4><p>注册侦听器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">eventDispatcher.<span class="title function_">addEventListener</span>(eventType, listenerFunction, <span class="variable language_">this</span>);</span><br></pre></td></tr></table></figure>

<p>移除侦听器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">eventDispatcher.<span class="title function_">removeEventListener</span>(eventType, listenerFunction, <span class="variable language_">this</span>);</span><br></pre></td></tr></table></figure>

<p>检测侦听器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">eventDispatcher.<span class="title function_">hasEventListener</span>(eventType);</span><br></pre></td></tr></table></figure>

<h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">public <span class="title function_">addEventListener</span>(<span class="attr">type</span>:string, <span class="attr">listener</span>:<span class="title class_">Function</span>, <span class="attr">thisObject</span>:any, <span class="attr">useCapture</span>:boolean = <span class="literal">false</span>, <span class="attr">priority</span>:number = <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该属性为一个number类型，当数字越大，则优先级越大。在触发事件的时候优先级越高。</p>
</blockquote>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>egret</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA 为 Markdown 文件默认启用 SoftWrap</title>
    <url>/2020/enable-soft-wrap-for-markdown-files-in-idea-by-default/</url>
    <content><![CDATA[<p>应该 JetBrains 家的所有 IDE 都有这个配置。习惯了用 Markdown 写博客的人每次都要手动点一下 SoftWrap 挺烦的。后来发现了一个配置可以帮我省去这一步：</p>
<p>打开设置，找到：<code>Editor</code> &gt; <code>General</code> &gt; <code>Soft Wraps</code>，将 <code>Soft-wrap files</code> 选项勾上即可。IDE 默认已经填上了 <code>*.md; *.txt; *.rst; *.adoc</code>，因此不需要再做别的事情。</p>
<p><img src="/2020/enable-soft-wrap-for-markdown-files-in-idea-by-default/98069913-fc341280-1e9a-11eb-82d4-2dbaa96672bd.png" alt="image"></p>
<p>这样一来，每次只要打开以上格式的文件，编辑器就会自动开启 SoftWrap，一劳永逸。</p>
]]></content>
      <tags>
        <tag>markdown</tag>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>etcd 队列引发的问题一则及源码解析</title>
    <url>/2024/etcd-queue-problem/</url>
    <content><![CDATA[<p>etcd 是分布式系统中的一个重要基础中间件，为 K8s 等关键基础设施提供了底层的 KV 储存能力。摘自 Github 描述：</p>
<blockquote>
<p>Distributed reliable key-value store for the most critical data of a distributed system.</p>
</blockquote>
<p>由于业务需要，我项目中使用了 etcd 官方客户端 clientv3 及其源码仓库中提供的队列实现（当时的版本为 3.5.11），并意外地发现了一系列问题，故事从这里开始。</p>
<span id="more"></span>



<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在项目的本地开发过程中，我通过 docker 部署了一个 etcd 服务器，开发过程非常顺畅，没有遇到任何问题。但是将服务部署上测试环境，连接上测试环境的 etcd 后，发现服务运行一段时间后就会报如下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2024-01-10T11:49:21.911042+0800&quot;,&quot;logger&quot;:&quot;etcd-client&quot;,&quot;caller&quot;:&quot;v3@v3.5.11/retry_interceptor.go:62&quot;,&quot;msg&quot;:&quot;retrying of unary invoker failed&quot;,&quot;target&quot;:&quot;etcd-endpoints://0xc0001ab500/127.0.0.1:2379&quot;,&quot;attempt&quot;:0,&quot;error&quot;:&quot;rpc error: code = Unauthenticated desc = etcdserver: invalid auth token&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>以及如下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">panic: runtime error: invalid memory address or nil pointer dereference</span><br><span class="line">[signal 0xc0000005 code=0x0 addr=0x8 pc=0x1088656]</span><br><span class="line"></span><br><span class="line">goroutine 37 [running]:</span><br><span class="line">go.etcd.io/etcd/client/v3/experimental/recipes.(*Queue).Dequeue(0xc000380780)</span><br><span class="line">        xxx/go/pkg/mod/go.etcd.io/etcd/client/v3@v3.5.11/experimental/recipes/queue.go:70 +0x136</span><br></pre></td></tr></table></figure>

<p>由于协程内部没有做 recover，所以这个 panic 会导致 pod 崩溃重启，部分接口调用出错或超时。但由于在本地从来没有出现过该问题，所以初见崩溃时感觉有些诡异。</p>
<h2 id="错误定位"><a href="#错误定位" class="headerlink" title="错误定位"></a>错误定位</h2><h3 id="Dequeue"><a href="#Dequeue" class="headerlink" title="Dequeue"></a>Dequeue</h3><p>通过上述日志可以发现，panic 是从 clientv3 内部的代码发出的。因此我们直接来到 Dequeue 方法中查看：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dequeue returns Enqueue()&#x27;d elements in FIFO order. If the</span></span><br><span class="line"><span class="comment">// queue is empty, Dequeue blocks until elements are available.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Dequeue() (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">	ev, err := WaitPrefixEvents(</span><br><span class="line">		q.client,</span><br><span class="line">		q.keyPrefix,</span><br><span class="line">		resp.Header.Revision,</span><br><span class="line">		[]mvccpb.Event_EventType&#123;mvccpb.PUT&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// L70</span></span><br><span class="line">	ok, err := deleteRevKey(q.client, <span class="type">string</span>(ev.Kv.Key), ev.Kv.ModRevision)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> !ok &#123;</span><br><span class="line">		<span class="keyword">return</span> q.Dequeue()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="type">string</span>(ev.Kv.Value), err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，在产生报错的 L70 处，它尝试将获取到的一个队列元素删除。如果删除成功了，则认为出队成功。如果说这里有可能出现 nil pointer，那么应该只可能是 <code>ev.Kv</code>，也就是说 <code>WaitPrefixEvents</code> 同时返回了值为 <code>nil</code> 的 <code>ev</code> 和 <code>err</code>。</p>
<h3 id="WaitPrefixEvents"><a href="#WaitPrefixEvents" class="headerlink" title="WaitPrefixEvents"></a>WaitPrefixEvents</h3><p>继续进入 WaitPrefixEvents 查看：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WaitPrefixEvents</span><span class="params">(c *clientv3.Client, prefix <span class="type">string</span>, rev <span class="type">int64</span>, evs []mvccpb.Event_EventType)</span></span> (*clientv3.Event, <span class="type">error</span>) &#123;</span><br><span class="line">	ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">	<span class="keyword">defer</span> cancel()</span><br><span class="line">	wc := c.Watch(ctx, prefix, clientv3.WithPrefix(), clientv3.WithRev(rev))</span><br><span class="line">	<span class="keyword">if</span> wc == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, ErrNoWatcher</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> waitEvents(wc, evs), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">waitEvents</span><span class="params">(wc clientv3.WatchChan, evs []mvccpb.Event_EventType)</span></span> *clientv3.Event &#123;</span><br><span class="line">	i := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> wresp := <span class="keyword">range</span> wc &#123;</span><br><span class="line">		<span class="keyword">for</span> _, ev := <span class="keyword">range</span> wresp.Events &#123;</span><br><span class="line">			<span class="keyword">if</span> ev.Type == evs[i] &#123;</span><br><span class="line">				i++</span><br><span class="line">				<span class="keyword">if</span> i == <span class="built_in">len</span>(evs) &#123;</span><br><span class="line">					<span class="keyword">return</span> ev</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，它通过 etcd 的 Watch 功能来等待一个队列元素的 PUT 事件（在该场景下即添加）。那么它有可能同时返回值为 <code>nil</code> 的 <code>ev</code> 和 <code>err</code> 吗？很显然是有的：在 <code>waitEvents</code> 的最后一行，它返回了值为 nil 的 ev。也就是说，如果 <code>wc</code> 这个 channel 在被发送方 close 之前没有收到有效的 put event，那么这段代码就会返回 <code>nil</code>。</p>
<h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h2><p>在什么情况下 Watch channel 会被 close 呢？结合上面抛出的另一个错误来看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2024-01-10T11:49:21.911042+0800&quot;,&quot;logger&quot;:&quot;etcd-client&quot;,&quot;caller&quot;:&quot;v3@v3.5.11/retry_interceptor.go:62&quot;,&quot;msg&quot;:&quot;retrying of unary invoker failed&quot;,&quot;target&quot;:&quot;etcd-endpoints://0xc0001ab500/127.0.0.1:2379&quot;,&quot;attempt&quot;:0,&quot;error&quot;:&quot;rpc error: code = Unauthenticated desc = etcdserver: invalid auth token&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>合理推测：这应该与 etcd 的授权有关。这时候回看一下我本地开发环境与测试环境的区别：</p>
<ol>
<li>本地环境启动的 etcd 服务<strong>没有密码</strong>；</li>
<li>测试环境的 etcd 服务使用了<strong>帐号密码认证</strong>。</li>
</ol>
<p>是否说明如果我在本地部署一个带<strong>帐号密码认证</strong>的服务则可以稳定复现该问题呢？</p>
<p>首先，通过 docker 快速部署一个带有授权认证的 etcd 服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -e ETCD_ROOT_PASSWORD=root -e ETCD_AUTH_TOKEN_TTL=5 -p 2379:2379 --name etcd bitnami/etcd:3.5.5</span><br></pre></td></tr></table></figure>

<p>在这个服务器中，我们：</p>
<ol>
<li>为 root 用户启用了密码，密码为 root。</li>
<li>为了快速复现，设置了 token 的 ttl (time to live，即过期时间) 为 5 秒钟。</li>
</ol>
<p>然后，编写一段简单的客户端代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	clientv3 <span class="string">&quot;go.etcd.io/etcd/client/v3&quot;</span></span><br><span class="line">	recipe <span class="string">&quot;go.etcd.io/etcd/client/v3/experimental/recipes&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">		Endpoints:   []<span class="type">string</span>&#123;<span class="string">&quot;http://127.0.0.1:2379&quot;</span>&#125;,</span><br><span class="line">		Username:    <span class="string">&quot;root&quot;</span>,</span><br><span class="line">		Password:    <span class="string">&quot;root&quot;</span>,</span><br><span class="line">		DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	queue := recipe.NewQueue(cli, <span class="string">&quot;/test&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> start(queue, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	time.Sleep(<span class="number">6</span> * time.Second)</span><br><span class="line">	<span class="keyword">go</span> start(queue, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">	time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">(q *recipe.Queue, idx <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;#%d start...\n&quot;</span>, idx)</span><br><span class="line">		item, err := q.Dequeue()</span><br><span class="line">		fmt.Printf(<span class="string">&quot;dequeue: %v, err: %v\n&quot;</span>, item, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在程序运行一段时间后将崩溃，控制台输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1 start...</span><br><span class="line">#2 start...</span><br><span class="line">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2024-01-10T10:17:39.062521+0800&quot;,&quot;logger&quot;:&quot;etcd-client&quot;,&quot;caller&quot;:&quot;v3@v3.5.11/retry_interceptor.go:62&quot;,&quot;msg&quot;:&quot;retrying of unary invoker failed&quot;,&quot;target&quot;:&quot;etcd-endpoints://0xc0001f5500/127.0.0.1:2379&quot;,&quot;attempt&quot;:0,&quot;error&quot;:&quot;rpc error: code = Unauthenticated desc = etcdserver: invalid auth token&quot;&#125;</span><br><span class="line">panic: runtime error: invalid memory address or nil pointer dereference</span><br><span class="line">[signal 0xc0000005 code=0x0 addr=0x8 pc=0x1088656]</span><br><span class="line"></span><br><span class="line">goroutine 37 [running]:</span><br><span class="line">go.etcd.io/etcd/client/v3/experimental/recipes.(*Queue).Dequeue(0xc000380780)</span><br><span class="line">        C:/Users/G40NTC3/go/pkg/mod/go.etcd.io/etcd/client/v3@v3.5.11/experimental/recipes/queue.go:70 +0x136</span><br><span class="line">main.start(0x0?, 0x0?)</span><br><span class="line">        E:/githome/backend/code-interpreter/sbscheduler/test/watchproblem/main.go:33 +0xcf</span><br><span class="line">created by main.main</span><br><span class="line">        E:/githome/backend/code-interpreter/sbscheduler/test/watchproblem/main.go:25 +0x245</span><br><span class="line"></span><br><span class="line">Process finished with the exit code 2</span><br></pre></td></tr></table></figure>

<p>可以看到 2 号协程出现了 panic，并且同时抛出了一个 <code>etcdserver: invalid auth token</code> 的 warning。与上述服务在测试环境出现的问题完全一致。</p>
<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>很显然该问题的出现与两个因素有关：</p>
<ol>
<li>etcd 的授权机制</li>
<li>Watch API</li>
</ol>
<h3 id="etcd-的授权机制"><a href="#etcd-的授权机制" class="headerlink" title="etcd 的授权机制"></a>etcd 的授权机制</h3><p>在 etcdv3 中，client 与 server 的连接方式出现了较大变化：从 v2 的简单 http1 json 调用升级为了基于 http2 的 gRPC 调用。 etcdv3 支持 4 种授权机制：</p>
<ol>
<li>无授权</li>
<li>simple token</li>
<li>JWT (JSON Web Token)</li>
<li>TLS</li>
</ol>
<p>其中：</p>
<ol>
<li>无授权，顾名思义，没有授权，不存在 token 过期等问题</li>
<li>simple token 和 JWT 都是基于用户名、密码下发 token 的策略，token 默认情况下 5 分钟会过期一次，过期需要向 server 重新授权获取</li>
<li>TLS 是基于证书的授权认证，性能显著优于 token 的同时，不需要下发 token</li>
</ol>
<p>在本次问题过程中，测试环境的 etcd server 采用了用户名+密码的认证策略，因此存在 token 过期问题。但是一个巴掌拍不响：为什么 clientv3 的其它接口都没有因为 token 过期而出现异常，唯独 Watch 不行呢？</p>
<h3 id="Watch-API"><a href="#Watch-API" class="headerlink" title="Watch API"></a>Watch API</h3><p>通过 <code>etch watch token</code> 关键词搜索，排名第一的结果已经直接找到答案：<a href="https://github.com/etcd-io/etcd/issues/12385">#12385 watch stream return “permission denied” if token expired</a>：</p>
<p>简要过程描述：</p>
<ol>
<li>在 2020 年 10 月，有人提出了 etcd 的 watch stream 在 token 过期的时候会遇到 permission denied 的问题。这个问题是由于 clientv3 内部没有对 Watch 接口的 Token 过期错误进行处理和重试导致的。</li>
<li>在 <a href="https://github.com/etcd-io/etcd/pull/14322/files">#14322</a> 中，有人为这个问题添加了一个重试机制，发布为 v3.5.6</li>
<li>在 v3.5.7 中，上述 PR 被 <a href="https://github.com/etcd-io/etcd/pull/14995">#14995</a> 回滚了。理由是它在同时修改了 server 和 client 实现的前提下，改动方式过于脆弱（通过字符串比对的方式来比较错误类型）。</li>
<li>在 <a href="https://github.com/etcd-io/etcd/issues/15058">#15058</a> 中，团队成员决定为 WatchResponse 添加一个基于 Code 的 cancel reason，但是这个 issue 还处于 open 状态，按照计划它将于 v3.6.0 的 server+client 中提供。</li>
</ol>
<p>在 <a href="https://github.com/etcd-io/etcd/pull/14995">#14995</a> 中，回滚者提到：</p>
<blockquote>
<p>It’s very easy for client application to workaround the issue.<br>The client just needs to create a new client each time before watching.</p>
</blockquote>
<p>所以，这个问题的答案是：</p>
<ol>
<li>没错，Watch API 目前确实不支持 token 过期的重试</li>
<li>如果想要 work around，可以为每次 Watch 创建新的 client</li>
<li>如果要彻底解决，需要等待 v3.6.0</li>
</ol>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="方式一：为每次-Watch-创建新的-client"><a href="#方式一：为每次-Watch-创建新的-client" class="headerlink" title="方式一：为每次 Watch 创建新的 client"></a>方式一：为每次 Watch 创建新的 client</h3><p>按照 #14995 的说法（create a new client each time before watching），经过我的实践，答案是：这个做法不一定可行，取决于使用场景。</p>
<p>其主要原因是，在创建一个新的 client 的过程中，client 和 server 需要进行一定的连接建立、授权认证等初始化工作，这些工作的耗时非常惊人，可能会达到几百毫秒。这样一来，如果我需要为进入服务器的每一个请求启动一个 watch 进程，那么每一个请求都可能会被拖慢几百毫秒。同时由于用户名+密码授权的过程耗费大量的 etcd server 计算性能，在请求量较大时，etcd server 可能会被频繁的授权工作拖累，出现耗时增加甚至崩溃的情况。</p>
<p>因此，我觉得这并不是一个“very easy workaround”。</p>
<h3 id="方式二：修改队列源码，只在启动时-Watch"><a href="#方式二：修改队列源码，只在启动时-Watch" class="headerlink" title="方式二：修改队列源码，只在启动时 Watch"></a>方式二：修改队列源码，只在启动时 Watch</h3><p>既然每次都创建新 client 不现实，那么很容易想到另一个办法：既然不能在服务运行的过程中动态 watch，那我在启动时只 watch 一次是不是就好了？答案是：确实可行。</p>
<p>队列代码修改后，大致思路如下，我们使用一个 channel 来作为 Dequeue 时的通信手段，在程序启动时，先通过 get 获取到所有的元素，一个一个消费完后，启动 Watch 来观测后续其它元素的入队：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> DequeueResult <span class="keyword">struct</span> &#123;</span><br><span class="line">	result <span class="type">string</span></span><br><span class="line">	err    <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Queue <span class="keyword">struct</span> &#123;</span><br><span class="line">	ctx      context.Context</span><br><span class="line">	prefix   <span class="type">string</span></span><br><span class="line">	cli      *clientv3.Client</span><br><span class="line">	dequeueC <span class="keyword">chan</span> DequeueResult</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewQueue</span><span class="params">(cli *clientv3.Client, prefix <span class="type">string</span>)</span></span> *Queue &#123;</span><br><span class="line">	q := &amp;Queue&#123;</span><br><span class="line">		ctx:      context.TODO(),</span><br><span class="line">		prefix:   prefix,</span><br><span class="line">		cli:      cli,</span><br><span class="line">		dequeueC: <span class="built_in">make</span>(<span class="keyword">chan</span> DequeueResult, <span class="number">1</span>),</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="comment">// 先清空队列</span></span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			resp, err := q.cli.Get(q.ctx, q.prefix, clientv3.WithFirstRev()...)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				q.dequeueC &lt;- DequeueResult&#123;result: <span class="string">&quot;&quot;</span>, err: err&#125;</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			kv, err := q.claimFirstKey(resp.Kvs)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				q.dequeueC &lt;- DequeueResult&#123;result: <span class="string">&quot;&quot;</span>, err: err&#125;</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> kv != <span class="literal">nil</span> &#123;</span><br><span class="line">				q.dequeueC &lt;- DequeueResult&#123;result: <span class="type">string</span>(kv.Value), err: <span class="literal">nil</span>&#125;</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> resp.More &#123;</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 开始watch</span></span><br><span class="line">		wc := q.cli.Watch(q.ctx, q.prefix, clientv3.WithPrefix())</span><br><span class="line">		<span class="keyword">for</span> wresp := <span class="keyword">range</span> wc &#123;</span><br><span class="line">			<span class="keyword">if</span> wresp.Canceled &#123;</span><br><span class="line">				log.WithField(<span class="string">&quot;error&quot;</span>, wresp.Err()).Fatal(<span class="string">&quot;dequeue watcher exit&quot;</span>)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> _, ev := <span class="keyword">range</span> wresp.Events &#123;</span><br><span class="line">				<span class="keyword">switch</span> ev.Type &#123;</span><br><span class="line">				<span class="keyword">case</span> mvccpb.PUT:</span><br><span class="line">					ok, err := q.deleteRevKey(<span class="type">string</span>(ev.Kv.Key), ev.Kv.ModRevision)</span><br><span class="line">					<span class="comment">//log.Debugln(&quot;dequeue&quot;, ok, err)</span></span><br><span class="line">					<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">						q.dequeueC &lt;- DequeueResult&#123;</span><br><span class="line">							result: <span class="string">&quot;&quot;</span>,</span><br><span class="line">							err:    err,</span><br><span class="line">						&#125;</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> ok &#123;</span><br><span class="line">						q.dequeueC &lt;- DequeueResult&#123;</span><br><span class="line">							result: <span class="type">string</span>(ev.Kv.Value),</span><br><span class="line">							err:    <span class="literal">nil</span>,</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">return</span> q</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Enqueue(val <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		newKey := fmt.Sprintf(<span class="string">&quot;%s/%v&quot;</span>, q.prefix, time.Now().UnixNano())</span><br><span class="line">		_, err := q.putNewKv(newKey, val, clientv3.NoLease)</span><br><span class="line">		<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> !errors.Is(err, ErrKeyExists) &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Dequeue() (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	res := &lt;-q.dequeueC</span><br><span class="line">	<span class="keyword">return</span> res.result, res.err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然自己实现的队列能够解决问题，但是稳定性可能相比 clientv3 内部的实现会有些许欠缺。在可能的情况下还是希望尽量使用 clientv3 的实现。</p>
<h3 id="方式三：认证方式改为-TLS"><a href="#方式三：认证方式改为-TLS" class="headerlink" title="方式三：认证方式改为 TLS"></a>方式三：认证方式改为 TLS</h3><p>上面的授权机制小节有提到，除了“无授权”、“用户名+密码”外，etcd 还提供另一种方式来进行授权，即“TLS 证书认证”。证书认证在稳定性、性能上都优于密码认证，同时因为它不需要下发 token，所以可以避免任何因为 token 失效而触发的问题。</p>
<p>TLS 连接需要三个证书：CA、Client、Client Key，以下是一个使用 TLS 连接服务器的 client 例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">tlsInfo := transport.TLSInfo&#123;</span><br><span class="line">	CertFile:      <span class="string">&quot;client.pem&quot;</span>,</span><br><span class="line">	KeyFile:       <span class="string">&quot;client-key.pem&quot;</span>,</span><br><span class="line">	TrustedCAFile: <span class="string">&quot;ca.pem&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">tlsConf, err := tlsInfo.ClientConfig()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">	Endpoints:   strings.Split(c.Addr, <span class="string">&quot;;&quot;</span>),</span><br><span class="line">	TLS:         tlsConf,</span><br><span class="line">	DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>服务端修改为 TLS 认证后，只需要按上述方法同步修改客户端创建的过程即可，其它代码可以一行不动，完美！</p>
<h2 id="etcd-队列源码赏析"><a href="#etcd-队列源码赏析" class="headerlink" title="etcd 队列源码赏析"></a>etcd 队列源码赏析</h2><p>抛开上面遇到的问题不谈，etcd clientv3 中实现的“多读多写”分布式队列还是很值得学习的。队列源码文件位于 <code>client/v3/experimental/recipes/queue.go</code>，其暴露的接口如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> recipe <span class="comment">// import &quot;go.etcd.io/etcd/client/v3/experimental/recipes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Queue <span class="keyword">struct</span> &#123;</span><br><span class="line">        <span class="comment">// Has unexported fields.</span></span><br><span class="line">&#125;</span><br><span class="line">    Queue implements a multi-reader, multi-writer distributed queue.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewQueue</span><span class="params">(client *v3.Client, keyPrefix <span class="type">string</span>)</span></span> *Queue</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Dequeue() (<span class="type">string</span>, <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Enqueue(val <span class="type">string</span>) <span class="type">error</span></span><br></pre></td></tr></table></figure>

<p>该 package 非常简洁，只暴露了三个函数：创建队列，出队和入队。下面一一解读。</p>
<h3 id="NewQueue"><a href="#NewQueue" class="headerlink" title="NewQueue"></a>NewQueue</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewQueue</span><span class="params">(client *v3.Client, keyPrefix <span class="type">string</span>)</span></span> *Queue &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;Queue&#123;client, context.TODO(), keyPrefix&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>NewQueue</code> 函数接收一个 client 实例指针和一个 <code>keyPrefix</code> 字符串（可以认为是队列名），返回一个队列实例指针。队列实例还额外创建了一个 <code>context</code> 实例，但是并没有允许使用者自定义该参数。这里貌似是一个值得商榷的点：从 <code>context.TODO</code> 也可以看出。正常来说，<code>context</code> 实例应该在调用 <code>Enqueue</code> 或 <code>Dequeue</code> 的时候单独传入，这样才能发挥它的预期作用（配置超时时间等）。</p>
<h3 id="Enqueue"><a href="#Enqueue" class="headerlink" title="Enqueue"></a>Enqueue</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Enqueue(val <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">	_, err := newUniqueKV(q.client, q.keyPrefix, val)</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Enqueue</code> 函数的实现非常简单：从 <code>newUniqueKV</code> 这个函数来看，是根据 <code>keyPrefix</code> 和 <code>value</code> 来创建了一个唯一的键值对。然而 etcd 要怎么在“多写”的环境下保证键的唯一性呢？继续深入 <code>newUniqueKV</code> 函数：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newUniqueKV</span><span class="params">(kv v3.KV, prefix <span class="type">string</span>, val <span class="type">string</span>)</span></span> (*RemoteKV, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		newKey := fmt.Sprintf(<span class="string">&quot;%s/%v&quot;</span>, prefix, time.Now().UnixNano())</span><br><span class="line">		rev, err := putNewKV(kv, newKey, val, v3.NoLease)</span><br><span class="line">		<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> &amp;RemoteKV&#123;kv, newKey, rev, val&#125;, <span class="literal">nil</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err != ErrKeyExists &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原来 <code>newUniqueKV</code> 是通过一个循环，不断尝试用 <code>prefix/时间戳</code> 为 key 去创建 KV：</p>
<ol>
<li>如果创建成功了，则返回键值对；</li>
<li>如果出错了：<ol>
<li>出现了 <code>ErrKeyExists</code> 错误，代表这个 key 已经被使用了，因此回到循环开始处继续尝试创建；</li>
<li>出现了其它任意错误，返回错误信息。</li>
</ol>
</li>
</ol>
<p>这里其实还有一个知识点：etcd 的储存模式是 MVCC (Multi-Version Concurrency Control，即多版本并发控制)。也就是说，如果对同一个键进行多次写，etcd 本身并不会报 <code>ErrKeyExists</code> 错，而是会为这个 key 创建一个新的版本号和值。那么这里 <code>putNewKV</code> 要如何保证创建该 key 时它必须是不存在的呢？继续深入源码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// putNewKV attempts to create the given key, only succeeding if the key did</span></span><br><span class="line"><span class="comment">// not yet exist.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">putNewKV</span><span class="params">(kv v3.KV, key, val <span class="type">string</span>, leaseID v3.LeaseID)</span></span> (<span class="type">int64</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	cmp := v3.Compare(v3.Version(key), <span class="string">&quot;=&quot;</span>, <span class="number">0</span>)</span><br><span class="line">	req := v3.OpPut(key, val, v3.WithLease(leaseID))</span><br><span class="line">	txnresp, err := kv.Txn(context.TODO()).If(cmp).Then(req).Commit()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> !txnresp.Succeeded &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>, ErrKeyExists</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> txnresp.Header.Revision, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先看注释：<code>putNewKV</code> 尝试创建一个 key，且只有在这个 key 不存在的情况下才会成功。</p>
<p>这里其实利用了 etcd 提供的事务（<code>kv.Txn</code>）功能，etcd 设计了一套易读且强大的事务接口：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">cmp := v3.Compare(v3.Version(key), <span class="string">&quot;=&quot;</span>, <span class="number">0</span>)</span><br><span class="line">req := v3.OpPut(key, val, v3.WithLease(leaseID))</span><br><span class="line">txnresp, err := kv.Txn(context.TODO()).If(cmp).Then(req).Commit()</span><br></pre></td></tr></table></figure>

<p>字面意义理解：如果 <code>cmp</code> 条件成立（<code>key</code> 的 <code>version</code> 为 <code>0</code>，即当前不存在这个 <code>key</code>），则执行 <code>req</code>（创建这个 <code>key</code>），然后提交（<code>Commit</code>）。结合 <code>newUniqueKV</code> 中的 <code>for</code> 循环来看，这其实是一把乐观锁。</p>
<p><code>Enqueue</code> 函数到这里就结束了：该函数通过创建一个 <code>key</code> 来代表元素入队，同时通过乐观锁的方式，保证了多写的情况下一个 <code>key</code> 不会被重复入队。一个看似简单的函数，里面包含了很多知识点！</p>
<h3 id="Dequeue-1"><a href="#Dequeue-1" class="headerlink" title="Dequeue"></a>Dequeue</h3><p><code>Dequeue</code> 是队列的另一个核心函数，同时也是本次实践中出现问题的函数。它的源码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dequeue returns Enqueue()&#x27;d elements in FIFO order. If the</span></span><br><span class="line"><span class="comment">// queue is empty, Dequeue blocks until elements are available.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Dequeue() (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> fewer round trips by fetching more than one key</span></span><br><span class="line">	resp, err := q.client.Get(q.ctx, q.keyPrefix, v3.WithFirstRev()...)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	kv, err := claimFirstKey(q.client, resp.Kvs)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> kv != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">string</span>(kv.Value), <span class="literal">nil</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> resp.More &#123;</span><br><span class="line">		<span class="comment">// missed some items, retry to read in more</span></span><br><span class="line">		<span class="keyword">return</span> q.Dequeue()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// nothing yet; wait on elements</span></span><br><span class="line">	ev, err := WaitPrefixEvents(</span><br><span class="line">		q.client,</span><br><span class="line">		q.keyPrefix,</span><br><span class="line">		resp.Header.Revision,</span><br><span class="line">		[]mvccpb.Event_EventType&#123;mvccpb.PUT&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ok, err := deleteRevKey(q.client, <span class="type">string</span>(ev.Kv.Key), ev.Kv.ModRevision)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> !ok &#123;</span><br><span class="line">		<span class="keyword">return</span> q.Dequeue()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="type">string</span>(ev.Kv.Value), err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先看注释：<code>Dequeue</code> 会将入队的元素按 FIFO （先入先出）的顺序出队，如果当前没有可出队的元素则会阻塞直到出队成功。</p>
<p>出队的流程总结：</p>
<ol>
<li>尝试通过 <code>keyPrefix</code> 为前缀获取一个元素，其中 <code>WithFirstRev</code> 指定获取最老的修订版本号（即最早入队的元素）；</li>
<li>尝试“claim”获取到的这个 key，“claim”的方式即删除：<ol>
<li>如果该客户端成功执行了删除，则认为出队成功，返回元素；</li>
<li>如果没有成功删除（在“多读”的场景下，代表这个元素被其它客户端“claim”了），但还有更多元素可以获取，则递归调用自己，重复上述流程</li>
</ol>
</li>
<li>如果即没有成功“claim”，也没有更多元素可以获取了，则启动一个 watch 进程，开始监听新创建的元素，同时函数在这里阻塞</li>
<li>监听到新元素后，同样的，尝试将该元素删除：<ol>
<li>如果成功删除，则认为出队成功，返回元素</li>
<li>如果删除失败（在“多读”的场景下，代表这个元素被其它客户端出队了），则递归调用自己，重复上述流程</li>
</ol>
</li>
</ol>
<p><code>claimFirstKey</code> 中调用了 <code>deleteRevKey</code> 来删除元素，该函数同样利用了事务来确保不重复删除（不重复出队）：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// deleteRevKey deletes a key by revision, returning false if key is missing</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteRevKey</span><span class="params">(kv v3.KV, key <span class="type">string</span>, rev <span class="type">int64</span>)</span></span> (<span class="type">bool</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	cmp := v3.Compare(v3.ModRevision(key), <span class="string">&quot;=&quot;</span>, rev)</span><br><span class="line">	req := v3.OpDelete(key)</span><br><span class="line">	txnresp, err := kv.Txn(context.TODO()).If(cmp).Then(req).Commit()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>, err</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> !txnresp.Succeeded &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样的，由于 MVCC 的特殊性，这里需要通过在删除前比较 key 的 <code>ModRevision</code> （即最新版本号），确保执行删除时该版本号没有发生变化，然后才执行删除。这是因为在 etcd 中，删除一个 key 并不会真正将它物理意义上的删除，而是在版本数据库中插入一条“删除”的记录，并且修改版本号。如果不做事务判断，则有可能出现重复删除（重复出队）的情况。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://etcd.io/docs/v3.2/learning/auth_design/">https://etcd.io/docs/v3.2/learning/auth_design/</a></li>
<li><a href="https://github.com/etcd-io/etcd/issues/12385">https://github.com/etcd-io/etcd/issues/12385</a></li>
<li><a href="https://github.com/etcd-io/etcd/pull/14322">https://github.com/etcd-io/etcd/pull/14322</a></li>
<li><a href="https://etcd.io/docs/v3.2/op-guide/security/">https://etcd.io/docs/v3.2/op-guide/security/</a></li>
<li><a href="https://github.com/etcd-io/etcd/blob/main/client/v3/experimental/recipes/queue.go">https://github.com/etcd-io/etcd/blob/main/client/v3/experimental/recipes/queue.go</a></li>
</ul>
]]></content>
      <tags>
        <tag>go</tag>
        <tag>etcd</tag>
      </tags>
  </entry>
  <entry>
    <title>Ext 使用总结</title>
    <url>/2015/ext-usage-summary/</url>
    <content><![CDATA[<p>公司要求会用Ext Js，没办法必须学，下面总结了一些学习与使用过程中的经验。<span id="more"></span></p>
<h2 id="从一开始就使用英文文档"><a href="#从一开始就使用英文文档" class="headerlink" title="从一开始就使用英文文档"></a>从一开始就使用英文文档</h2><p>这点是我认为最重要的，有人也许会觉得很奇怪，不是有国人翻译的中文文档吗？而且很全，为什么要强行用原版呢？</p>
<p>两种文档我都参考与使用过，最终还是选择了直接使用原版文档。最重要的原因是Ext本身自定义的名字与行为很多，不去看原版的话很难将两个或多个多个地方出现的同一个词语联系起来，另外这些词语也与代码有最直接的联系，看翻译版的话也许很容易就会出现被翻译误导的情况，翻译能正确地指出一个词的意思，但不能建立像原版那样名词之间的联系。</p>
<p>另一个原因是，英文文档中自带了很多基本与扩展使用的例子，我们在完成一些日常功能的时候都可以去参考文档内的例子而不用自己去根据API文档苦思冥想。</p>
<p>需要大量使用Ext文档的时候我们一般可以把它下载回来到本机搭建一个本地文档，这样就可以解决国内访问国外网站延迟较高的问题。需要注意的是文档需要部署在Http服务器（如Tomcat，Apache等）上方可正常访问。</p>
<p>下载文档的链接可以在<a href="http://docs.sencha.com/extjs/6.0/" target="_blank">http://docs.sencha.com/extjs/6.0/</a>找到，如图所示：</p>
<p><img src="https://static.wxsm.space/blog/48595776-3b58b880-e991-11e8-9c65-216cefe812c6.png"></p>
<h2 id="关于是否使用Sencha-Architect"><a href="#关于是否使用Sencha-Architect" class="headerlink" title="关于是否使用Sencha Architect"></a>关于是否使用Sencha Architect</h2><p>Sencha Architect的所有功能都可以无限期试用，基本上就是一款免费软件，它可以帮助Ext Js开发者使用可视化界面快速开发复杂结构与逻辑的页面，以及添加自定义插件，缺点就是做出来的页面在build之前体积非常大（一个页面大概100至200 MB），build以后也经常会出现问题。用不用它是一个很纠结的问题。</p>
<p>公司开发部门的老师们看起来都不太喜欢这款工具，主要原因大概是使用工具会妨碍自己对代码的理解，担心在脱离工具以后不能很好地掌控代码的行为（准确地说应该是不如从一开始手打代码掌控得好）。但我觉得这对于一个有一定经验的Ext开发者应该完全不成问题，不知道为什么老师们不喜欢这款工具。手撸Ext界面是一件再痛苦不过的事，一个复杂的Ext页面动辄成千上万个括号，根本不是普通代码的形式，可阅读性与可修改性都非常差。而且Ext号称完全兼容IE，但这是基于我们的代码不出错的情况，IE浏览器相比于其它浏览器最常见的问题是Js数组最后面的元素多了一个逗号后导致报错，很不幸Ext简直就是这种情况的代言人，更致命的是一个逗号就能够导致整个页面崩溃而且IE调试工具根本找不到这个错误所在，于是才出现了神奇的“二分调试法”。</p>
<p>我个人的建议是，Ext Js的初学者与有经验的开发者都可以尝试使用Sencha Architect去搭建View页面，但最好仅限于View页面，搭建完最初始的结构后就可以将代码Copy到自己的项目中去，然后转为自己编码控制。毕竟Ext的工具性这么强，也不在乎再强一点，Ext的Layout学到飞起来又怎样，对其它形式的Web开发没有任何帮助，然并卵。</p>
<h2 id="Config-Property-Method与Event"><a href="#Config-Property-Method与Event" class="headerlink" title="Config, Property, Method与Event"></a>Config, Property, Method与Event</h2><p>Ext的所有类一开始对于这几个概念的理解比较模糊，尤其是Config与Property之间的关系，后来用多了才慢慢开始感觉到其中的区别。</p>
<p>Config是在创建一个Ext类的时候给予的参数，相当于Java中Constructor的参数，有些时候某些config是必要的，有时候又有默认值，每个类所需要以及能配置的config都不太一样，所以在我习惯在使用之前查看一遍文档，顺便吐槽一下，个人觉得在Ext的世界里只有文档和源码是可靠的，经验往往不可靠。Config在配置以后不能通过直接的方式修改，修改必须重新配置该类，使用 <code>Ext.apply</code> 或者 <code>Ext.applyIf</code>，最后再说一遍，不要直接去修改config中的变量，这样往往会导致预想之外的结果。</p>
<p>Property很容易就能联想到成员变量，这里的值在类创建后就会存在，可以被修改（与config的区别），不过在Method中一般能找到与其对应的Getter和Setter方法，所以一般情况下也不会直接去修改Property的值。</p>
<p>Method自然而然就是一个类中的成员方法了，一般是在controller里面使用。Ext的文档中会列举所有该类本身以及继承的方法，在使用任何方法之前都强烈建议先查看文档，可以找到方法接受的参数，行为以及返回类型，在Ext的世界里面游戏规则最重要，一切按部就班才不会出问题。</p>
<p>Event是该类可以触发的事件，并不是所有类都能触发所有类型的事件，比如panel并不能触发Ext的Click事件，所以，在绑定事件之前也有必要查看文档，文档会介绍事件的触发条件以及返回参数，十分有用，千万不要自己去想像。当然这里可以有些许的变通，我们知道Js本身可以对任何DOM节点绑定任何事件，所以当我们需要做一些Ext不打算帮我们做好的事情的时候也并不是没有办法。</p>
<h2 id="HTML-Element-Element与Component"><a href="#HTML-Element-Element与Component" class="headerlink" title="HTML Element, Element与Component"></a>HTML Element, Element与Component</h2><h3 id="HTML-Element"><a href="#HTML-Element" class="headerlink" title="HTML Element"></a>HTML Element</h3><p>HTML Element就是Ext对HTML世界中最普通的DOM节点的称呼，后两位是Ext自己创造的东西，也是其精华所在（精华与糟粕并存）。不过，就算Ext没有了Element与Component，它依然是一个出色的MVC框架。</p>
<h3 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h3><blockquote>
<p>Encapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences.</p>
</blockquote>
<p>正如其文档所言，Element是Ext对DOM节点进行了一次封装以后产生的对象。该对象的主要目的是为其添加一些简单的DOM操作，以及标准化浏览器之间的差异。构造这个对象的目的与jQuery对DOM封装的目的非常相似，不过对Ext来说，它主要的目的应该还是为更上层的建筑服务。</p>
<h3 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h3><p>Ext的精华与糟粕所在地，吐槽重灾区。</p>
<p>Ext的Component基本上涵盖了Web开发平常会用到的所有控件与功能，极大地简化了Web开发的流程，我们只需要在用的时候创建一个相应的component，Ext就会为我们完成所有事情，其中Grid（表格）控件更是登峰造极，让人不得不服，基本上一个人一般情况下能想到的所有功能都能被一一满足。同时，Ext所创建的十数种Layout类型更是为这些Component提供了强大的定位支持，再也不用担心做不出像样的页面。同时，Ext考虑到开发者可能不一定能在任何情况下满足，也提供了插件与自定义控件的开发方式，至此，component已经超神了。</p>
<p>但是这些强大且丰富的component也带来了或多或少的问题。</p>
<p>表面上看起来强大的东西，它背后一定更强大，所以，Ext真的非常强大，2 MB走起的Js库文件，远远超出了前端所能容忍的极限。搭一个本机环境跑一个debug库，页面刷新一次居然要超过两秒，复杂的页面更是四五秒，可见一斑。所以这东西注定只适合在内网用。</p>
<p>Ext 4.0开始，构建一个component所用到的HTML元素变得非常臃肿，一个普通的panel创建出来少说要七八层结构，这些都是为了高度可定制性做出的妥协，而且我们为了一些布局的需要常常会大量使用容器类 component，其后果就是浏览器不堪重负，渲染效率大打折扣。结合上一点来看更是惨不忍睹。</p>
<p>Ext的component虽说可以自定义，但是实际上一些复杂度高的需求自定义起来会比较困难。首先它必须继承某一个component，因为我们生产中不可能从头开始写，所以需要熟悉原来的component有哪些东西。然后我们在自定义的过程中也不能脱离Ext世界的游戏规则，否则这个新的东西很可能就会与其他已有的component脱节。一种常见的情况就是在操作component的一个element或者HTML element的时候一定要使用Ext提供的方法，否则就会产生预料之外的结果。</p>
<h2 id="版本更替与版权问题"><a href="#版本更替与版权问题" class="headerlink" title="版本更替与版权问题"></a>版本更替与版权问题</h2><p>Ext不是免费工具，商业使用需要购买，即使是个人使用也只能将项目开源才能享有免费版的Ext Js，虽然Js代码都是想用就能用，但是作为公司的话还是要考虑一下这个问题。这个原因也导致了Ext的网络资源非常缺乏，系统的教程非常少，基本上遇到了问题都只能在文档里面打滚。</p>
<p>Ext大版本之间基本不兼容，改动代价也非常高，所以我目前见过的都是选择了一个版本就只能一个版本用到死的情况，另外再补一刀，就算购买了低版本的使用权，再想购买升级版依然需要付费。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>个人不太喜欢使用Ext作为前端框架，虽然是作为非常适合搭建内网系统的技术存在，抛开千遍一律的UI不谈，用过Ext的人应该都有一种被包养的感觉。Ext帮我们做好了所有事情，久而久之我们就会忘记事情原本应该是怎样的，从而走上一条不归路。</p>
]]></content>
      <tags>
        <tag>extjs</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Puppeteer 自动输入京东滑动验证码</title>
    <url>/2018/fill-jd-slider-captcha-by-puppeteer/</url>
    <content><![CDATA[<p>京东网页端登录有时候需要输入滑动验证码，就像这样：</p>
<p><img src="https://static.wxsm.space/blog/48596434-ff732280-e993-11e8-94db-2f82be82a1ab.png" alt="jd-verify"></p>
<p>在做自动签到脚本的时候遇到这个很不舒服，如果不处理的话就只能每次弹出浏览器手动登录，因此稍微研究了下。下面是一个非常简单，但成功率很高（达到80%）的自动识别并输入方案，使用 puppeteer 实现。</p>
<p><strong>总体思路：通过图像特征识别出滑块缺口的位置，然后通过模拟用户点击将滑块拖动到该处。</strong></p>
<span id="more"></span>

<p>首先，我们能够看到这个滑块缺口是一个黑色半透明的遮罩区域，通过代码分析并不能得到它的具体色值。因此只能自行比对尝试。通过肉眼测试与对比，可以得到这个遮罩的色值大约为 <code>rgba(0,0,0,0.65)</code></p>
<p><img src="https://static.wxsm.space/blog/48612937-52b19900-e9c5-11e8-97c4-eab52883c540.png" alt="img"></p>
<p>得到这个色值的目的是：通过判断相邻像素点 a, b 的色值之差，来决定像素点 b 的色值是否是像素点 a 的色值加上遮罩之后的结果，以此来推断遮罩所在的位置。</p>
<p>下面介绍两个函数：</p>
<ul>
<li><code>combineRgba</code> rgba 色值相加，返回相加结果</li>
<li><code>tolerance</code> rgba 色值比对，通过传入一个「容忍值」，返回颜色是否相似</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * combine rgba colors [r, g, b, a]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rgba1 底色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rgba2 遮罩色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">combineRgba</span> (<span class="attr">rgba1</span>: <span class="built_in">number</span>[], <span class="attr">rgba2</span>: <span class="built_in">number</span>[]): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> [r1, g1, b1, a1] = rgba1</span><br><span class="line">  <span class="keyword">const</span> [r2, g2, b2, a2] = rgba2</span><br><span class="line">  <span class="keyword">const</span> a = a1 + a2 - a1 * a2</span><br><span class="line">  <span class="keyword">const</span> r = (r1 * a1 + r2 * a2 - r1 * a1 * a2) / a</span><br><span class="line">  <span class="keyword">const</span> g = (g1 * a1 + g2 * a2 - g1 * a1 * a2) / a</span><br><span class="line">  <span class="keyword">const</span> b = (b1 * a1 + b2 * a2 - b1 * a1 * a2) / a</span><br><span class="line">  <span class="keyword">return</span> [r, g, b, a]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断两个颜色是否相似</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">rgba1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">rgba2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">t</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">tolerance</span> (<span class="attr">rgba1</span>: <span class="built_in">number</span>[], <span class="attr">rgba2</span>: <span class="built_in">number</span>[], <span class="attr">t</span>: <span class="built_in">number</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [r1, g1, b1] = rgba1</span><br><span class="line">  <span class="keyword">const</span> [r2, g2, b2] = rgba2</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    r1 &gt; r2 - t &amp;&amp; r1 &lt; r2 + t</span><br><span class="line">    &amp;&amp; g1 &gt; g2 - t &amp;&amp; g1 &lt; g2 + t</span><br><span class="line">    &amp;&amp; b1 &gt; b2 - t &amp;&amp; b1 &lt; b2 + t</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来就可以写出距离算法了，通过传入包含缺口的验证码图片的 base64 编码，以及图片的实际宽度，返回缺口位置 x 值。具体思路是：通过自左而右，自上而下的逐列像素分析，找出第一个跟上个像素的色值与遮罩色值相加后的结果相似的像素点，就认为是遮罩的 x 位置。</p>
<p><img src="https://static.wxsm.space/blog/48612892-33b30700-e9c5-11e8-94d7-a6cc6ec30c87.png" alt="img"></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getVerifyPosition</span> (<span class="attr">base64</span>: <span class="built_in">string</span>, <span class="attr">actualWidth</span>: <span class="built_in">number</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="title function_">createCanvas</span>(<span class="number">1000</span>, <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">    img.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">width</span>: <span class="built_in">number</span> = img.<span class="property">naturalWidth</span></span><br><span class="line">      <span class="keyword">const</span> <span class="attr">height</span>: <span class="built_in">number</span> = img.<span class="property">naturalHeight</span></span><br><span class="line">      ctx.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">maskRgba</span>: <span class="built_in">number</span>[] = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.65</span>]</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">t</span>: <span class="built_in">number</span> = <span class="number">10</span> <span class="comment">// 色差容忍值</span></span><br><span class="line">      <span class="keyword">let</span> prevPixelRgba = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; width; x++) &#123;</span><br><span class="line">        <span class="comment">// 重新开始一列，清除上个像素的色值</span></span><br><span class="line">        prevPixelRgba = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">0</span>; y &lt; height; y++) &#123;</span><br><span class="line">          <span class="keyword">const</span> rgba = ctx.<span class="title function_">getImageData</span>(x, y, <span class="number">1</span>, <span class="number">1</span>).<span class="property">data</span></span><br><span class="line">          <span class="keyword">if</span> (prevPixelRgba) &#123;</span><br><span class="line">            <span class="comment">// 所有原图中的 alpha 通道值都是1</span></span><br><span class="line">            prevPixelRgba[<span class="number">3</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">const</span> maskedPrevPixel = <span class="title function_">combineRgba</span>(prevPixelRgba, maskRgba)</span><br><span class="line">            <span class="comment">// 只要找到了一个色值匹配的像素点则直接返回，因为是自上而下，自左往右的查找，第一个像素点已经满足&quot;最近&quot;的条件</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">tolerance</span>(maskedPrevPixel, rgba, t)) &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(x * actualWidth / width)</span><br><span class="line">              <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prevPixelRgba = rgba</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 没有找到任何符合条件的像素点</span></span><br><span class="line">      <span class="title function_">resolve</span>(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    img.<span class="property">onerror</span> = reject</span><br><span class="line">    img.<span class="property">src</span> = base64</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到 x 位置后，就可以使用 puppeteer 操纵滑块来实现验证了：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 验证码图片（带缺口）</span></span><br><span class="line"><span class="keyword">const</span> img = <span class="keyword">await</span> page.$(<span class="string">&#x27;.JDJRV-bigimg &gt; img&#x27;</span>)</span><br><span class="line"><span class="comment">// 获取缺口左x坐标</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">distance</span>: <span class="built_in">number</span> = <span class="keyword">await</span> <span class="title function_">getVerifyPosition</span>(</span><br><span class="line">  <span class="keyword">await</span> page.evaluate(<span class="function"><span class="params">element</span> =&gt;</span> element.<span class="title function_">getAttribute</span>(<span class="string">&#x27;src&#x27;</span>), img),</span><br><span class="line">  <span class="keyword">await</span> page.evaluate(<span class="function"><span class="params">element</span> =&gt;</span> <span class="built_in">parseInt</span>(<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(element).<span class="property">width</span>), img)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 滑块</span></span><br><span class="line"><span class="keyword">const</span> dragBtn = <span class="keyword">await</span> page.$(<span class="string">&#x27;.JDJRV-slide-btn&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> dragBtnPosition = <span class="keyword">await</span> page.evaluate(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 此处有 bug，无法直接返回 getBoundingClientRect()</span></span><br><span class="line">  <span class="keyword">const</span> &#123;x, y, width, height&#125; = element.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line">  <span class="keyword">return</span> &#123;x, y, width, height&#125;</span><br><span class="line">&#125;, dragBtn)</span><br><span class="line"><span class="comment">// 按下位置设置在滑块中心</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">x</span>: <span class="built_in">number</span> = dragBtnPosition.<span class="property">x</span> + dragBtnPosition.<span class="property">width</span> / <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">y</span>: <span class="built_in">number</span> = dragBtnPosition.<span class="property">y</span> + dragBtnPosition.<span class="property">height</span> / <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (distance &gt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果距离够长，则将距离设置为二段（模拟人工操作）</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">distance1</span>: <span class="built_in">number</span> = distance - <span class="number">10</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">distance2</span>: <span class="built_in">number</span> = <span class="number">10</span></span><br><span class="line">  <span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">move</span>(x, y)</span><br><span class="line">  <span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">down</span>()</span><br><span class="line">  <span class="comment">// 第一次滑动</span></span><br><span class="line">  <span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">move</span>(x + distance1, y, &#123;<span class="attr">steps</span>: <span class="number">30</span>&#125;)</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">waitFor</span>(<span class="number">500</span>)</span><br><span class="line">  <span class="comment">// 第二次滑动</span></span><br><span class="line">  <span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">move</span>(x + distance1 + distance2, y, &#123;<span class="attr">steps</span>: <span class="number">20</span>&#125;)</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">waitFor</span>(<span class="number">500</span>)</span><br><span class="line">  <span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">up</span>()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 否则直接滑到相应位置</span></span><br><span class="line">  <span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">move</span>(x, y)</span><br><span class="line">  <span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">down</span>()</span><br><span class="line">  <span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">move</span>(x + distance, y, &#123;<span class="attr">steps</span>: <span class="number">30</span>&#125;)</span><br><span class="line">  <span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">up</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等待验证结果</span></span><br><span class="line"><span class="keyword">await</span> page.<span class="title function_">waitFor</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://static.wxsm.space/blog/48613026-91dfea00-e9c5-11e8-988b-42d823a3699a.png" alt="img"></p>
<p>大概就这样。</p>
]]></content>
      <tags>
        <tag>nodejs</tag>
        <tag>puppeteer</tag>
      </tags>
  </entry>
  <entry>
    <title>毕业后的第一个中秋</title>
    <url>/2015/first-mid-autumn-after-graduation/</url>
    <content><![CDATA[<p>学生渐渐开学，才意识到毕业以来已经过了一个暑假的时间。公司为期三个月的培训终于快结束了，我也终于有空回家休息一段时间。培训结束后，感觉自己的变化除了学到的知识以外，就是多了一些自信，对很多东西的理解不再是处于未知或一知半解的状态。学习使人进步。</p>
<p>挺久没有回过家，上一次应该是在五一的时候，所以比较想念家人。不知道家里现在是怎样的了，应该没有什么变化。前段时间出租屋的椅子坏了，往后靠就会摔倒，想买一把才发现椅子挺贵的，房东不给换，郁闷的时候想到在家里从来没有操心过类似的问题，只要跟爸爸或者妈妈说一句就会有替代品，虽然可能不合己意但却不需要付出任何代价。这些事情可能只有在独立生活后才能发现，饭要自己做，碗要自己洗，衣要自己晾，门要自己锁，下班回来累了一躺就是到半夜，醒来发现灯还亮着，门禁卡还戴着，一看手机早上四点多，这时候就能体会到一些孤独。体会到在家是多么的幸福。感谢爸妈给我的回忆里充满的都是快乐。</p>
<p>马上过完今年的生日，我也要24岁了，人生走到了一个过渡期，从学生到打工者，从学校到到职场，时间过得这么快，觉得有一些不适。生活还没有转变过来，以后的路还那么长，对未知的未来充满了恐惧。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>Git SSH key 生成与 GitExtension 配置</title>
    <url>/2015/git-ssh-key-gen-and-gitextension-configuration/</url>
    <content><![CDATA[<p>使用ssh key配置git可以省去每次操作时输入ID&#x2F;Password的麻烦，操作一旦频繁起来还是很有必要的。实际操作需要添加一些环境变量，或者到git&#x2F;bin目录下执行。<span id="more"></span></p>
<h3 id="设置Git的默认username和email"><a href="#设置Git的默认username和email" class="headerlink" title="设置Git的默认username和email"></a>设置Git的默认username和email</h3><p>这一步没有验证过是否可以省略。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;xxx&quot;</span><br><span class="line">$ git config --global user.email &quot;xxx@xxx.xxx&quot;</span><br></pre></td></tr></table></figure>

<h3 id="本地生成SSH-Key"><a href="#本地生成SSH-Key" class="headerlink" title="本地生成SSH Key"></a>本地生成SSH Key</h3><h4 id="查看是否已有密钥"><a href="#查看是否已有密钥" class="headerlink" title="查看是否已有密钥"></a>查看是否已有密钥</h4><p>有的教程说通过 <code>$ cd ~/.ssh</code> 查看目录是否存在，不过我的机器上测试无论有没有这一步的结果都是不存在。所以我的方法是到c:&#x2F;users&#x2F;username&#x2F;下查看是否存在.ssh文件夹，存在则将里面的内容删除。</p>
<h4 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h4><p>执行 <code>$ ssh-keygen</code>，连续回车确认，到最后 ssh key 就会在 <code>.ssh</code> 文件夹下生成，带 .pub 后缀的为公钥。遇到找不到路径的情况则需要手动指定 <code>.ssh</code> 文件夹的正确位置，我尝试把它放在 D 盘结果 server 不认，还是要指定 <code>c:/users/username/.ssh</code> 这个目录去生成，密钥名字为 id_rsa</p>
<h4 id="上传到server"><a href="#上传到server" class="headerlink" title="上传到server"></a>上传到server</h4><p>生成结束后需要将公钥上传到相应 server，以 <a href="https://github.com" target="_blank">Github</a> 为例：</p>
<p><img src="https://static.wxsm.space/blog/48595777-3b58b880-e991-11e8-8ba0-c12bab65ad9e.png"></p>
<p>将公钥文件中的所有内容copy到key输入框中，添加保存即可。</p>
<h3 id="配置Git-Extension（windows）"><a href="#配置Git-Extension（windows）" class="headerlink" title="配置Git Extension（windows）"></a>配置Git Extension（windows）</h3><p>以上步骤执行完后可以使用命令行执行推拉等操作，但是在Git Extension就死活不行，后来发现这个工具安装的时候默认使用了putty作为ssh代理，需要手动换成git自带的ssh工具，如图所示：</p>
<p><img src="https://static.wxsm.space/blog/48595778-3b58b880-e991-11e8-831a-0966dd6ec738.png"></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Pages and SSL</title>
    <url>/2016/github-pages-and-ssl/</url>
    <content><![CDATA[<p>经过一些努力，把博客迁移到了 Github Pages，将域名改成了自定义，并且成功启用了 SSL，以下是步骤（就不截图了）。</p>
<span id="more"></span>

<h2 id="部署代码"><a href="#部署代码" class="headerlink" title="部署代码"></a>部署代码</h2><p>Github Pages 支持两种级别的部署：</p>
<ol>
<li><strong>user &#x2F; organization</strong> 方式<ul>
<li>repo 名字必须为 <code>&lt;user-name or org-name&gt;.github.io</code></li>
<li>pages build branch 固定为 <code>master</code></li>
<li>部署后的发布域名即为 repo 名</li>
</ul>
</li>
<li><strong>project</strong> 方式<ul>
<li>repo 名字没有限制</li>
<li>pages build branch 可以任意指定</li>
<li>发布域名为 <code>&lt;user-name or org-name&gt;.github.io/&lt;project-name&gt;</code></li>
</ul>
</li>
</ol>
<p>因此，如果要做个人页面则必然选择第一种方式。</p>
<p>因为 build branch 限制为 master，因此我一开始选择了重建 repo，实际上没有必要，可以直接 rename 旧的 repo</p>
<p>rename 后，到 repo settings -&gt; options -&gt; Github Pages，即可发现自动部署已经开始了。即刻访问 <code>&lt;user-name or org-name&gt;.github.io</code> 可以看到部署结果。</p>
<h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><ol>
<li>在 repo settings -&gt; options -&gt; Github Pages -&gt; Custom Domain 中，填入自己的域名，如 <code>wxsm.space</code>，保存</li>
<li>在自己的域名供应商处修改域名解析，添加两条 A 记录（此处可以参考最新<a href="https://help.github.com/articles/setting-up-an-apex-domain/">文档</a>）：<ul>
<li><code>192.30.252.153</code></li>
<li><code>192.30.252.154</code></li>
</ul>
</li>
<li>等待记录生效</li>
</ol>
<p>过一会就可以发现，使用自定义域名可以访问网站了，并且原 <code>&lt;user-name or org-name&gt;.github.io</code> 会重定向到自定义域名。</p>
<h2 id="启用-SSL"><a href="#启用-SSL" class="headerlink" title="启用 SSL"></a>启用 SSL</h2><p>这里是最麻烦的。虽然 Github Pages 原生支持 SSL，但是只针对 <code>*.github.io</code> 域名，对于自定义域名，无法直接启用。因此需要找一个支持 SSL 的 CDN 供应商。考虑到免费这个关键因素，选择了 CloudFlare（以下简称 CF）</p>
<ol>
<li>前往 CF 官网，注册账号，填入自己的域名，点几个 Continue</li>
<li>到注册的最后一步时，需要将域名的 DNS 服务器切换为 CF 服务器（CF 会提供两个，两个都要填上），到原域名供应商处修改域名 DNS 服务器即可，24 小时内生效</li>
<li>生效后可以打开网站查看是否正常。控制台页面上方有一个 Crypto Tab，点开，SSL 选择 <code>Flexible</code> 或者 <code>Full</code>，同样需要等待一段时间生效</li>
<li>生效后即可以通过 <code>https</code> 访问网站了，如果需要强制 SSL，可以到 Page Rules Tab，添加一些记录，为某些域名段设置强制 SSL <code>Aways use https</code></li>
</ol>
]]></content>
      <tags>
        <tag>personal</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab CE Code-Review Bot</title>
    <url>/2020/gitlab-ce-code-review-bot/</url>
    <content><![CDATA[<p>由于 Gitlab CE 做代码评审时缺少了关键的评审员功能（详情参考此 <a href="https://gitlab.com/gitlab-org/gitlab-foss/-/issues/42096">issue</a>），因此在使用 CE 的同时又想要做代码评审的话，就必须要自己想办法了。</p>
<p>网上能找到的最多的解决方案就是在 Gitlab 前面再部署一套 Gerrit，通过拦截推送的代码以及同步两个库来实现。但是这种方案有诸多弊端。比如：</p>
<ol>
<li>割裂的用户体验。原本习惯了使用 Gitlab 系统的人，要开始学习晦涩难懂的 Gerrit；</li>
<li>代码同步的不稳定性和不确定性。系统每增加一层逻辑，可靠性就降低一些；</li>
<li>复杂的使用方式：代码必须要从 Gerrit clone，同时 push 时分支名必须加上 refs 前缀，否则无法进入评审</li>
<li>…</li>
</ol>
<p>总体来说，以上的种种原因让我觉得 Gerrit 并不是最好的解决方案。对于凡事追求完美的处女座的我来说，我想要的东西大概应该具备以下几点：</p>
<ol>
<li>最好是能直接在 Gitlab 上面进行评审。因为 CE 可以说是万万事俱备，只差流程；</li>
<li>最好是对原 Git 和 Gitlab 使用流程、习惯没有任何更改和侵入，仅增加评审流程；</li>
<li>最好是可以可以自动化整个流程（评审人自动分配、评审完自动合并，等等）。</li>
</ol>
<p>好在，Gitlab 有一套完备的 <a href="https://docs.gitlab.com/ee/user/project/integrations/webhooks.html">Web hook</a> 以及 <a href="https://docs.gitlab.com/ee/api/">API</a> 系统，可以支撑起我的想法。</p>
<span id="more"></span>

<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>首先，所有评审流程要基于一些分支使用原则：</p>
<ol>
<li>分支分为主干分支与特性分支，另外还有一些额外的分支（如发布分支）；</li>
<li>除业务分支外，其它分支均为保护分支，不允许直接推送，只能通过 Merge Request 添加代码；</li>
<li>特性分支可以任意使用、推送</li>
</ol>
<p>因此，代码评审的环节就设计在 Merge Request （以下简称 MR）中，这是一个合理的时机。</p>
<p>整个评审流程如下所示：</p>
<div id="flowchart-0" class="flow-chart"></div>

<p>可以看到，除了最后的「合并」操作外，评审系统只是作为一个「旁观者」的角色，帮助我们完成了整个评审流程，并没有任何侵入性的操作。</p>
<h2 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2><p>评审系统的实现，我选择的是一个用 Node.js 和 Koa2 搭建的普通 web 服务器。它会做两件事情：</p>
<ol>
<li>监听从 web hook 进入到系统的请求，分析请求参数，实现具体逻辑；</li>
<li>调用 Gitlab API，完成诸如评论、合并等操作。</li>
</ol>
<p>因为 Gitlab web hook 访问时仅存在参数区别，因此服务器入口只需要一个路径监听就够了：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gitlab.route.js</span></span><br><span class="line"><span class="keyword">const</span> gitlab = <span class="built_in">require</span>(<span class="string">&#x27;./gitlab.controller&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">router</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 所有请求都进入到 gitlab controller</span></span><br><span class="line">  router.<span class="title function_">all</span>(<span class="string">&#x27;(.*)&#x27;</span>, gitlab)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gitlab.controller.js</span></span><br><span class="line"><span class="keyword">const</span> mr = <span class="built_in">require</span>(<span class="string">&#x27;./merge-request.handler&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mrc = <span class="built_in">require</span>(<span class="string">&#x27;./merge-request-comment.handler&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; object_kind, object_attributes &#125; = ctx.<span class="property">request</span>.<span class="property">body</span></span><br><span class="line">    <span class="keyword">if</span> (object_kind === <span class="string">&#x27;merge_request&#x27;</span> &amp;&amp; object_attributes.<span class="property">action</span> === <span class="string">&#x27;open&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 新的 merge request</span></span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">mr</span>(ctx)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object_kind === <span class="string">&#x27;note&#x27;</span> &amp;&amp; object_attributes.<span class="property">noteable_type</span> === <span class="string">&#x27;MergeRequest&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// merge request 收到评论</span></span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">mrc</span>(ctx)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 这里的返回并不重要</span></span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;gitlab-bot&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MR-创建时通知到评审系统"><a href="#MR-创建时通知到评审系统" class="headerlink" title="MR 创建时通知到评审系统"></a>MR 创建时通知到评审系统</h3><p>在上面的 <code>mr(ctx)</code> 中，可以实现新 MR 创建时的逻辑：</p>
<ol>
<li>从预先配置好的小组名单（可以是写死在代码中的，也可以是储存在 db 中的）中，随机抽取 N 位成员（假设为 B&#x2F;C）；</li>
<li>通过 Gitlab API 向 MR 添加评论，说明意图，并且 @B @C。</li>
</ol>
<p>至于如何向 API 发出请求，开源世界有许多现成的解决方案，也可以直接参考 <a href="https://docs.gitlab.com/ee/api/">API 文档</a>，这里不再赘述。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pid 为 projectId，mid 为 mergeRequestId，webhook 调用内均会携带。下同</span></span><br><span class="line"><span class="keyword">await</span> service.<span class="title function_">addMergeRequestComment</span>(pid, mid, <span class="string">`请 [@<span class="subst">$&#123;ra&#125;</span>] 与 [@<span class="subst">$&#123;rb&#125;</span>] 评审`</span>)</span><br></pre></td></tr></table></figure>

<p>这里面有几个问题：</p>
<ol>
<li>如何防止小组成员略过评审系统，主动合并？</li>
<li>不是所有分支合并都需要评审（如主干分支到发布分支），如何避免？</li>
</ol>
<h4 id="如何防止手动合并"><a href="#如何防止手动合并" class="headerlink" title="如何防止手动合并"></a>如何防止手动合并</h4><p>Gitlab 提供了一种方式：WIP (work in progress)，只要标记了 WIP 的 MR 就无法直接点击合并。使用方式也很简单，只需要在原 MR 的标题前面加上 <code>WIP:</code> 字符串即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> service.<span class="title function_">updateMergeRequest</span>(pid, mid, &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">`WIP:<span class="subst">$&#123;object_attributes.title&#125;</span>`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>效果如下图所示：</p>
<p><img src="/2020/gitlab-ce-code-review-bot/93973898-8e7ace00-fda7-11ea-9735-8ee3de0e663d.png" alt="wip"></p>
<p>可以看到，WIP 并不是一个强制状态。在 Web UI 上点击 <code>Resolve WIP status</code> 或手动去除标题中的 <code>WIP:</code> 都可以解除 WIP 状态，从而允许手动合并。也就是说，这是一个「防君子不防小人」的状态。如果是在一个团队内的成员中使用，我觉得这样已经足够了。</p>
<h4 id="如何兼容不需要评审的场景"><a href="#如何兼容不需要评审的场景" class="headerlink" title="如何兼容不需要评审的场景"></a>如何兼容不需要评审的场景</h4><p>这里其实可以利用保护分支的规则，作出一个共识：凡是已合并到保护分支上的代码，都是已经过评审的「安全」代码，无需再次评审。</p>
<p>因此可以得出结论：只有从非保护分支（特性分支）往保护分支合并的场景需要评审，其它场景均无需评审。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> targetBranch = <span class="keyword">await</span> service.<span class="title function_">getBranchInfo</span>(pid, object_attributes.<span class="property">target_branch</span>)</span><br><span class="line"><span class="keyword">const</span> sourceBranch = <span class="keyword">await</span> service.<span class="title function_">getBranchInfo</span>(pid, object_attributes.<span class="property">source_branch</span>)</span><br><span class="line"><span class="keyword">if</span> (sourceBranch.<span class="property">protected</span> || !targetBranch.<span class="property">protected</span>) &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过评论实现评审流程"><a href="#通过评论实现评审流程" class="headerlink" title="通过评论实现评审流程"></a>通过评论实现评审流程</h3><p>在 <code>mrc(ctx)</code> 中，可以实现 MR 收到新评论时的逻辑，如下图所示：</p>
<div id="flowchart-1" class="flow-chart"></div>

<p>部分关键代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 mr 下的所有评论</span></span><br><span class="line"><span class="keyword">const</span> notes = <span class="keyword">await</span> service.<span class="title function_">listCommentsOfMergeRequest</span>(pid, mid)</span><br><span class="line"><span class="comment">// 找出邀请评论</span></span><br><span class="line"><span class="keyword">const</span> inviteNote = _.<span class="title function_">find</span>(notes, <span class="function"><span class="params">v</span> =&gt;</span> v.<span class="property">author</span>.<span class="property">username</span> === <span class="string">&#x27;bot&#x27;</span> &amp;&amp; <span class="regexp">/请.+?@.+?评审/</span>.<span class="title function_">test</span>(v.<span class="property">body</span>))</span><br><span class="line"><span class="comment">// 找出邀请了的人</span></span><br><span class="line"><span class="keyword">const</span> inviters = inviteNote.<span class="property">body</span>.<span class="title function_">match</span>(<span class="regexp">/\[@.+?]/g</span>).<span class="title function_">map</span>(<span class="function"><span class="params">v</span> =&gt;</span> v.<span class="title function_">replace</span>(<span class="string">&#x27;[@&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line"><span class="comment">// 找出没有 lgtm 的人</span></span><br><span class="line"><span class="keyword">const</span> notReviewPeople = []</span><br><span class="line">inviters.<span class="title function_">forEach</span>(<span class="function">(<span class="params">uid, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;lgtm&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!_.<span class="title function_">find</span>(notes, <span class="function"><span class="params">v</span> =&gt;</span> v.<span class="property">author</span>.<span class="property">username</span> === uid &amp;&amp; regex.<span class="title function_">test</span>(v.<span class="property">body</span>))) &#123;</span><br><span class="line">    notReviewPeople.<span class="title function_">push</span>(uid)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>以上评审流程，基本就是来自现在 Github 各大仓库流行的 bot 系统。可以发现，这套系统对比 Gerrit 等实现方案，除了对现有 Gitlab 用户十分友好之外，其最大的好处之一，就是控制权完全在自己手里。除了以上说到的逻辑以外，还可以自己实现任意想要的东西。如：</p>
<ol>
<li>为 MR 打标签。如评审人标签、评审状态标签、MR Change Size 标签，等等；</li>
<li>检查 MR 内的 Commit Msg 是否合法；</li>
<li>检查 MR 的 CI 是否通过；</li>
<li>实现管理员用户，拥有更高的权限，通过特殊评论可以略过其它评审员直接合并，或完成其他功能</li>
<li>…</li>
</ol>
<p>限制你的只有想象力。</p>
<p>在实现了以上的一些逻辑后，目前我司评审系统的代码量加起来也没有超过 300 行。可以说相比于购买 Gitlab EE 来说，性价比还是相当高的。</p>
<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.3.0/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.17.1/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始
e=>end: 结束
s1=>operation: 同事 A 往业务分支 feat/a 推送代码
s2=>operation: 同事 A 请求将 feat/a 合并到主干分支 dev，
创建了 MR
s3=>operation: Gitlab 通过 Web hook 通知到评审系统
s4=>operation: 评审系统从预定义的评审员从随机抽取 N 位，
假设为 2 位：同事 B 和同事 C
并通过 @ 的方式通知
s5=>operation: 评审员 B/C 在 Gitlab 上进行评审
c1=>condition: 评审通过？
s6=>operation: 同事 B/C 评论 lgtm
s7=>operation: 同事 B/C 指出问题，
在 Gitlab 上的代码中，
具体到某一行进行评论
s8=>operation: 同事 A 修改代码，再次提交
s9=>operation: 评审系统执行合并

st->s1->s2->s3->s4->s5->c1
c1(yes,right)->s6->s9->e
c1(no,bottom)->s7(left)->s8(top)->s5</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: 开始
e=>end: 结束
s1=>operation: MR 收到新评论
c1=>condition: 检查评论是否包含 lgtm
c2=>condition: 检查评论者是否为受邀评审员
s2=>operation: 忽略该评论
c3=>condition: 通过 API 获取到该 MR 下的所有评论，
检查是否还存在其它评审员未评审
s4=>operation: 去除 MR 的 WIP 标记
s5=>operation: 执行合并

st->s1->c1
c1(yes,bottom)->c2
c1(no,right)->s2(bottom)->e
c2(yes,bottom)->c3
c2(no,right)->s2(bottom)->e
c3(yes,right)->e
c3(no,bottom)->s4(bottom)->s5(right)->e</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script>]]></content>
      <tags>
        <tag>gitlab</tag>
        <tag>devops</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab CI Setup</title>
    <url>/2018/gitlab-ci-setup/</url>
    <content><![CDATA[<p>Gitlab 有一套内置的 CI 系统，相比集成 Jenkins 来说更加方便一些，用法也稍为简单。以下是搭建过程。</p>
<p>前置准备：须要准备一台用来跑 CI 任务的机器（可以是 Mac &#x2F; Linux &#x2F; Windows 之一）。</p>
<span id="more"></span>

<h2 id="创建-gitlab-ci-yml-文件"><a href="#创建-gitlab-ci-yml-文件" class="headerlink" title="创建 .gitlab-ci.yml 文件"></a>创建 <code>.gitlab-ci.yml</code> 文件</h2><p>和 Github CI 一样，Gitlab CI 也使用 <a href="https://en.wikipedia.org/wiki/YAML">YAML</a> 文件来定义项目的整个构建任务。只要在需要集成 CI 的项目根目录下添加这份文件并写入内容，默认情况下 Gitlab 就会为此项目启用构建。</p>
<p>配置文档：<a href="https://docs.gitlab.com/ee/ci/yaml/README.html">https://docs.gitlab.com/ee/ci/yaml/README.html</a></p>
<p>一份较为完整的配置文件样例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定 docker 镜像</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">node:9.3.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#为 docker 镜像安装 ssh-agent 以执行部署任务</span></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;which ssh-agent || ( apt-get update -y &amp;&amp; apt-get install openssh-client -y )&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">eval</span> <span class="string">$(ssh-agent</span> <span class="string">-s)</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$SSH_PRIVATE_KEY&quot;</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">&#x27;\r&#x27;</span> <span class="string">|</span> <span class="string">ssh-add</span> <span class="bullet">-</span> <span class="string">&gt;</span> <span class="string">/dev/null</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">-e</span> <span class="string">&quot;Host *\n\tStrictHostKeyChecking no\n\n&quot;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/config</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">chmod</span> <span class="number">700</span> <span class="string">~/.ssh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义构建的三个阶段</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义可缓存的文件夹</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#构建任务</span></span><br><span class="line"><span class="attr">build-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;npm install&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;npm run build&quot;</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#测试任务</span></span><br><span class="line"><span class="attr">test-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;npm install&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;npm run lint&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;npm test&quot;</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#部署任务</span></span><br><span class="line"><span class="attr">deploy-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">release</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;npm install&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;npm run build&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ssh</span> <span class="string">user@host</span> <span class="string">&quot;[any shell commands]&quot;</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node</span></span><br></pre></td></tr></table></figure>

<p>整个构建过程基本上一目了然，比 Jenkins 简便很多。Gitlab CI 会按顺序执行 build &#x2F; test &#x2F; deploy 三个 stage 的任务，遇到出错即中止，并不再往下执行。同个 stage 中的多个任务会并发执行。需要注意的是，各个 stage 的工作空间是独立的。</p>
<p>其中 <code>$SSH_PRIVATE_KEY</code> 是在相应 Gitlab 项目中配置的一个 Secret Value，是构建机的 ssh 私钥。后面再谈。</p>
<p>将 <code>.gitlab-ci.yml</code> 文件推送到服务器后，打开项目主页，点击 Commit 记录，会发现构建任务启动并处于 pending 状态：</p>
<p><img src="https://docs.gitlab.com/ee/ci/quick_start/img/new_commit.png" alt="img"></p>
<p>点击构建图标，则可以进入到 CI 详情页面：</p>
<p><img src="https://docs.gitlab.com/ee/ci/quick_start/img/single_commit_status_pending.png" alt="img"></p>
<p>点击具体任务查看 log 则提示项目没有配置相应的 runner 来执行构建任务。也就是下一步要做的事情。</p>
<h2 id="搭建-Gitlab-runner"><a href="#搭建-Gitlab-runner" class="headerlink" title="搭建 Gitlab runner"></a>搭建 Gitlab runner</h2><p><a href="https://docs.gitlab.com/runner/">Gitlab runner</a> 是用来执行 CI 任务的客户端，它可以在一台机器上搭建，并且同时为多个项目服务。<a href="https://docs.gitlab.com/runner/install/">安装教程</a>。</p>
<p>安装好 runner 后，还要为机器安装 <a href="https://www.docker.com/community-edition">Docker</a>，用来作为具体构建的容器。</p>
<p>以上均安装完成后，就可以开始配置 runner 了。配置过程中需要用到的一些信息可以在下图位置找到（项目主页 -&gt; Settings -&gt; CI &#x2F; CD -&gt; Runners settings）。</p>
<p><img src="https://docs.gitlab.com/ee/ci/quick_start/img/runners_activated.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo gitlab-runner register</span><br><span class="line"></span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</span><br><span class="line">(填写上图位置的地址)</span><br><span class="line"></span><br><span class="line">Please enter the gitlab-ci token for this runner</span><br><span class="line">(填写上图位置的token)</span><br><span class="line"></span><br><span class="line">Please enter the gitlab-ci description for this runner</span><br><span class="line">[hostame] my-runner</span><br><span class="line"></span><br><span class="line">Please enter the gitlab-ci tags for this runner (comma separated):</span><br><span class="line">node</span><br><span class="line"></span><br><span class="line">Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:</span><br><span class="line">docker</span><br><span class="line"></span><br><span class="line">Please enter the Docker image (eg. ruby:2.1):</span><br><span class="line">node:latest</span><br></pre></td></tr></table></figure>

<p>其中 description 与 tags 将来都可以在 Gitlab UI 中更改。注意 tag 必须与 <code>.gitlab-ci.yml</code> 中各个 job 指定的 tag 一致，这个 job 才会分配到这个 runner 上去。</p>
<p>如此一来则大功告成，回到 Gitlab UI，在 Runner settings 内可以看到配置好的 runner，并且可以执行任务了。</p>
<p><img src="https://docs.gitlab.com/ee/ci/quick_start/img/pipelines_status.png" alt="img"></p>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>其实本地构建基本上都没什么问题，遇到的坑基本集中在 deploy 阶段，即远程到服务器上去发布的这一步。按照 Gitlab 提供的<a href="https://docs.gitlab.com/ee/ci/ssh_keys/">文档</a>，走完了所有的步骤后，构建机总是无法使用 private key 直接登录，而是必须输入密码登录。尝试了查看 ssh 日志，重启服务器 sshd 服务，修改文件夹权限等等，debug 了半天还是没有解决该问题。后来偶然发现在部署服务器上使用 sshd 开启一个新的服务，用新的端口即可顺利登录，也不知道是为什么。</p>
<p>更新：另外一个方法，可以使用 <code>sshpass</code> 命令来进行登录。用法：</p>
<ol>
<li>在 docker 镜像中安装 <code>sshpass</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ which sshpass || ( apt-get update -y &amp;&amp; apt-get install sshpass -y )</span><br></pre></td></tr></table></figure>
其中 <code>-y</code> 是为了防止安装过程中出现需要选择的项目，一律选 YES</li>
<li>在项目 CI 变量中设置 ssh 密码</li>
<li>使用 <code>sshpass</code> 复制文件，或登录远程服务器<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># scp</span><br><span class="line">$ SSHPASS=$YOUR_PASSWORD_VAR sshpass -e scp -r local_folder user@host:remote_folder&quot;</span><br><span class="line"># ssh</span><br><span class="line">$ SSHPASS=$YOUR_PASSWORD_VAR sshpass -e ssh user@host</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>gitlab</tag>
        <tag>devops</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 语言性能调试与分析工具：pprof 用法简介</title>
    <url>/2023/go-pprof-note/</url>
    <content><![CDATA[<p><a href="https://github.com/google/pprof">pprof</a> 是 Google 开发的一款用于数据分析和可视化的工具。</p>
<p>最近我编写的 go 程序遇到了一次线上 OOM，于是趁机学习了一下 Go 程序的性能问题排查相关知识。其基本路线是：先通过内置的 <code>net/http/pprof</code> 模块生成采集数据，然后在使用 pprof 命令行读取并分析。Go 语言目前已经内置了该工具。</p>
<p>本文不会介绍 pprof 的太多细节，只关注主要流程（主要的是太细的我现在也不会）。</p>
<span id="more"></span>

<h2 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h2><p>由于 Go 语言内置了对 pprof 的支持，因此无需额外安装其它依赖，只需要在程序入口处引入相关包，并且启动一个服务即可：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    _ <span class="string">&quot;net/http/pprof&quot;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// pprof 服务器，将暴露在 6060 端口</span></span><br><span class="line">        <span class="keyword">if</span> err := http.ListenAndServe(<span class="string">&quot;:6060&quot;</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">panic</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是 pprof 服务需要使用独立的协程运行，否则会阻塞代码运行。添加这段代码后，程序除了运行原本的逻辑外，还将额外监听一个端口（此处为 6060），在本地运行程序，打开 <a href="http://localhost:6060/debug/pprof/">http://localhost:6060/debug/pprof/</a>，将看到如下界面：</p>
<p><img src="/2023/go-pprof-note/f03c5ccb2076423c9ae6ba75aa6f4747.png"></p>
<p>数据采集服务即启动成功。</p>
<div class="note info"><p>我刚开始看到这段代码的时候有点好奇：为什么它的 <code>handler</code> 传了 <code>nil</code>，但是却能够启动一个 debug 服务呢？</p>
<p>后来仔细看了一下源码后就发现，handler 如果传 nil 的话，即默认为 <code>DefaultServeMux</code>：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// net/http/server.go</span></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    Handler Handler <span class="comment">// handler to invoke, http.DefaultServeMux if nil</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sh serverHandler)</span></span> ServeHTTP(rw ResponseWriter, req *Request) &#123;</span><br><span class="line">    handler := sh.srv.Handler</span><br><span class="line">    <span class="keyword">if</span> handler == <span class="literal">nil</span> &#123;</span><br><span class="line">        handler = DefaultServeMux</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HandleFunc registers the handler function for the given pattern</span></span><br><span class="line"><span class="comment">// in the DefaultServeMux.</span></span><br><span class="line"><span class="comment">// The documentation for ServeMux explains how patterns are matched.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleFunc</span><span class="params">(pattern <span class="type">string</span>, handler <span class="keyword">func</span>(ResponseWriter, *Request)</span></span>) &#123;</span><br><span class="line">    DefaultServeMux.HandleFunc(pattern, handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而 <code>net/http/pprof/pprof.go</code> 在 init 函数中，向 <code>DefaultServeMux</code> 注册了几个路径：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// net/http/pprof/pprof.go</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/debug/pprof/&quot;</span>, Index)</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/debug/pprof/cmdline&quot;</span>, Cmdline)</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/debug/pprof/profile&quot;</span>, Profile)</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/debug/pprof/symbol&quot;</span>, Symbol)</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/debug/pprof/trace&quot;</span>, Trace)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此，如果启动一个 handler 为 nil 的 http 服务，即默认会添加上 pprof 的一系列路由。</p>
</div>


<p>这个 web 界面上面有一些链接，每个链接代表一个监控项目，页面下方也对它们做了一些解释。直接点进去的话，会展示一些数据，但是目前这些数据比较原始，可读性不佳。但好消息是，后面可以通过 pprof 命令行对它们进行进一步的分析。</p>
<h2 id="指标解释"><a href="#指标解释" class="headerlink" title="指标解释"></a>指标解释</h2><p>除了 <code>cmdline</code> 和 <code>trace</code> 以外，上面的每一个链接都代表一种指标。常用指标如下：</p>
<ul>
<li>profile：CPU 占用率</li>
<li>heap：当前时刻的内存使用情况</li>
<li>allocs：所有时刻的内存使用情况，包括正在使用的及已经回收的</li>
<li>goroutine：目前的 goroutine 数量及运行情况</li>
<li>mutex：锁争用情况</li>
<li>block：协程阻塞情况</li>
</ul>
<h2 id="pprof-命令行工具"><a href="#pprof-命令行工具" class="headerlink" title="pprof 命令行工具"></a>pprof 命令行工具</h2><p>程序运行一段时间后，我们就可以通过 <code>pprof</code> 命令行来进行数据分析了。打开一个终端环境，输入 <code>go tool pprof http://localhost:6060/debug/pprof/allocs</code> 并按下回车，就能看到如下界面：</p>
<p><img src="/2023/go-pprof-note/ab39c95412bb488f8878c13a72a2ae84.png"></p>
<p>此时即连接成功。接下来在终端中操作，将展示命令行启动时刻的监控数据。输入 <code>help</code> 可以展示所有的命令，输入 <code>help [command]</code> 可以展示具体命令的帮助界面。</p>
<p>现在回到上面那个链接 <code>http://localhost:6060/debug/pprof/allocs</code>，观察一下它的构成：</p>
<ol>
<li>首先，是一个常规的 host+port 组合，由于我们在本地启动服务且指定监听 6060 端口，因此这里填写 <code>localhost:6060</code>。但是它同样也支持远程连接。即对部署在服务器上的程序进行分析。只要遵循同样的格式，以及保证路径可访问即可；</li>
<li>然后跟随的是一个 <code>/debug/pprof/</code> 路径，此为固定值；</li>
<li>最后是一个 <code>allocs</code>，这个代表某一种监控指标。回到刚刚的那个 web 界面，除了 <code>cmdline</code> 以外，每一个链接都代表一种指标，可以在此处直接填入，即可更换分析目标。</li>
</ol>
<div class="note info"><p>命令行实际上读取的是一个由 pprof web 服务提供的 <code>.pb.gz</code> 文件，它是一个通过 gzip 压缩的 protocol buffer 数据。其源码在 <code>runtime/pprof</code> 包中。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> profileBuilder <span class="keyword">struct</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  zw        *gzip.Writer</span><br><span class="line">  pb        protobuf</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newProfileBuilder</span><span class="params">(w io.Writer)</span></span> *profileBuilder &#123;</span><br><span class="line">	zw, _ := gzip.NewWriterLevel(w, gzip.BestSpeed)</span><br><span class="line">	b := &amp;profileBuilder&#123;</span><br><span class="line">		<span class="comment">// ...</span></span><br><span class="line">	&#125;</span><br><span class="line">	b.readMapping()</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>如果要退出 pprof，可以输入 <code>exit</code> 并回车。</p>
<p>下面介绍几个常用命令。</p>
<h3 id="top：列出数据"><a href="#top：列出数据" class="headerlink" title="top：列出数据"></a>top：列出数据</h3><p>要列出当前资源的占用情况，可以在 pprof 中使用 top 命令：</p>
<p><img src="/2023/go-pprof-note/b3732fa081ba444c815af0f4d7992ce8.png"></p>
<p>默认会按照资源占用率从高到低，显示 10 条数据。</p>
<p>它上面的每项指标（flat&#x2F;flat%&#x2F;sum&#x2F;cum&#x2F;cum%）大致理解就是数值越大则资源占用情况越严重。结果默认按照 flat 排序。其指标含义的详细解释可以参考 <a href="https://github.com/google/pprof/blob/main/doc/README.md">pprof 文档</a>：</p>
<blockquote>
<p>flat: the value of the location itself.<br>cum: the value of the location plus all its descendants.</p>
</blockquote>
<div class="note info"><p>cum 是 cumulative（累积） 的缩写。</p>
</div>

<p>我的理解是：</p>
<ul>
<li>flat：函数内所有直接语句的时间或内存消耗；</li>
<li>cum：函数内所有直接语句，以及其调用的子函数的时间或内存消耗；</li>
<li>sum：没有在文档中找到对应解释，但是通过观察可以发现，它是 flat% 的累加值。</li>
</ul>
<div class="note info"><p>通过一个例子来解释：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a()                               <span class="comment">// step1，假设消耗 1s</span></span><br><span class="line">    b()                               <span class="comment">// step2，假设消耗 2s</span></span><br><span class="line">    time.Sleep(<span class="number">3</span> * time.Second)       <span class="comment">// step3，消耗 3s</span></span><br><span class="line">    c()                               <span class="comment">// step4，假设消耗 4s</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数总共将花费 <code>1 + 2 + 3 + 4 = 10</code> 秒，其中：</p>
<ul>
<li>flat 等于 3，因为该函数的直接操作只有 step3</li>
<li>cum 包含所有直接语句以及子函数的消耗，即 step1 + step2 + step3 + step4</li>
<li>step 4 的 sum% 为 step1、step2、step3、step4 的 flat% 总和</li>
</ul>
</div>

<h3 id="list：显示详情"><a href="#list：显示详情" class="headerlink" title="list：显示详情"></a>list：显示详情</h3><p>当发现某个函数资源占用情况可疑时，可以通过 <code>list 函数名</code> 定位到具体的代码位置。举例：</p>
<p><img src="/2023/go-pprof-note/011d3b578be449a796e550d80e9e364f.png"></p>
<p>该案例显示，在第 666 行处，<code>dw</code> 占用了 8.81MB 的内存，667 行占用 5.95MB 内存，该函数合计占用 14.76 MB。</p>
<div class="note info"><p>此处也可以对应到上面提及的 flat&#x2F;cum 含义：666 行计入 flat，666 + 667 行计入 cum。</p>
</div>

<h3 id="web：可视化分析"><a href="#web：可视化分析" class="headerlink" title="web：可视化分析"></a>web：可视化分析</h3><p>在使用 web 命令之前需要做一个准备工作：安装 <a href="https://graphviz.gitlab.io/download/">Graphviz</a> 工具，并将它添加到系统 path 中。</p>
<p>直接在命令行输入 <code>web</code>，pprof 将打开一个浏览器，并展示一个可视化的分析界面：</p>
<p><img src="/2023/go-pprof-note/ed645cd64588431b8e6c11e29f7c6e46.png"></p>
<p>在 web 界面上将显示函数的完整调用链路，界面可以通过鼠标拖拽、缩放。其图形详细的解释（来自 <a href="https://github.com/google/pprof/blob/main/doc/README.md#interpreting-the-callgraph">pprof 文档</a>）：</p>
<ul>
<li>节点颜色与 cum 值有关：<ul>
<li>正值大的为红色</li>
<li>负值大的为绿色（负值通常在 profile 对比时出现）</li>
<li>值接近 0 的为灰色</li>
</ul>
</li>
<li>节点的字号与 flat 的绝对值有关：值越大则字号越大</li>
<li>边的粗细与该路径下的资源使用有关：资源使用越多则线条越粗</li>
<li>边的颜色与节点颜色类似</li>
<li>边的形状：<ul>
<li>虚线：两个节点之间的部分节点被移除了（间接调用）</li>
<li>实现：两个节点之间存在直接调用关系</li>
</ul>
</li>
</ul>
<div class="note info"><p>粗略地来说，每个节点的方块越大、线条越粗、颜色越红，则代表资源占用情况（相对来说）越严重，需要重点关注。</p>
</div>

<p>对应上图的例子来说：</p>
<ul>
<li><code>(*Rand).Read</code> 的 flat 值较小（字号较小、灰色）</li>
<li><code>(*compressor).deflate</code> 的 flat 值与 cum 值均较大（字号较大、红色）</li>
<li><code>(*Writer).Flush</code> 的 flat 值较小（字号较小），但 cum 值较大（红色）</li>
<li><code>(*Writer).Write</code> 与 <code>(*compressor).write</code> 之前的线条是较粗、红色的虚线，因此它们之间的某些节点被移除了，且使用的资源较多</li>
<li><code>(*Rand).Read</code> 与 <code>read</code> 之前的线条是较细、灰色的虚线，因此它们之间的某些节点被移除了，且使用的资源较少</li>
<li><code>read</code> 与 <code>(*rngSource).Int63</code> 之前的线条是较细、灰色的实线，因此它们之间存在直接调用关系，且使用的资源较少</li>
</ul>
<h3 id="sample-index：切换采样值"><a href="#sample-index：切换采样值" class="headerlink" title="sample_index：切换采样值"></a>sample_index：切换采样值</h3><p>某些监测类型会拥有多种采样值，可以通过 <code>help sample_index</code> 查看当前可用的采样值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(pprof) help sample_index</span><br><span class="line">Sample value to report (0-based index or name)</span><br><span class="line">Profiles contain multiple values per sample.</span><br><span class="line">Use sample_index=i to select the ith value (starting at 0).</span><br><span class="line">Or use sample_index=name, with name in [alloc_objects alloc_space inuse_objects inuse_space].</span><br></pre></td></tr></table></figure>

<p>通过 <code>sample_index=i</code> 可以切换采样方式。切换后再次使用 top 命令，展示的结果将会有些区别。</p>
<h2 id="pprof-的-Web-界面"><a href="#pprof-的-Web-界面" class="headerlink" title="pprof 的 Web 界面"></a>pprof 的 Web 界面</h2><p>可以通过 <code>go tool pprof -http=:8888 http://localhost:6060/debug/pprof/allocs</code> 命令直接打开一个 web 界面，这个 web 界面将拥有与命令行类似的功能，并且可以显示火焰图。同样，这个命令需要先安装 <a href="https://graphviz.gitlab.io/download/">Graphviz</a> 工具。</p>
<p><img src="/2023/go-pprof-note/149dcc3708494697bdcd2f4822adb34d.png"></p>
<ul>
<li>View 菜单展示的几项功能：<ul>
<li>Top 与命令行的 top 类似</li>
<li>Graph 与命令行的 web 类似</li>
<li>Peek&#x2F;Source 与 list 命令类似：在 Top 选中一行，或者 Graph 选中一个节点后，切换到 Peek 或 Source 界面，将展示该行&#x2F;节点的代码详情</li>
<li>Frame Graph 为火焰图</li>
<li>Disassemble：查看汇编代码</li>
</ul>
</li>
<li>Sample 菜单与命令行的 sample_index 类似</li>
</ul>
<h3 id="火焰图"><a href="#火焰图" class="headerlink" title="火焰图"></a>火焰图</h3><p>此处以 Frame Graph (new) 举例。</p>
<p><img src="/2023/go-pprof-note/b428af1b09094765a67f58bfeb42e24d.png"></p>
<p>解释：</p>
<ul>
<li>节点的颜色是由它的包名决定的，相同包名的节点将拥有相同的颜色</li>
<li>节点的字号可能会有区别，但是与上面的图形不同的是，此处的字号仅为适应其节点大小，并无其它含义</li>
<li>上方的节点为调用者，下方的节点为被调用者</li>
<li>节点的宽度表示资源使用情况，越宽则资源使用越多<ul>
<li>其总宽度代表 cum</li>
<li>去除其子节点后，剩余的宽度代表 flat</li>
</ul>
</li>
<li>如果上下节点之间没有边框，则表示这两个函数被“内联”了。关于内联的具体含义，可以参考 <a href="https://medium.com/a-journey-with-go/go-inlining-strategy-limitation-6b6d7fc3b1be">Go: Inlining Strategy &amp; Limitation</a></li>
</ul>
<div class="note info"><p>一个函数可能会被多个不同的函数调用，因此 pprof 对传统的火焰图进行了改良：点击任意函数将显示所有最终导向该函数的调用栈，而非仅当前点击节点的调用栈。</p>
</div>]]></content>
      <tags>
        <tag>go</tag>
        <tag>pprof</tag>
      </tags>
  </entry>
  <entry>
    <title>“渐进增强”与“优雅降级”</title>
    <url>/2016/graceful-degradation-versus-progressive-enhancement/</url>
    <content><![CDATA[<p>“渐进增强”与“优雅降级”是 Web 页面两种不同的开发理念，为了简单起见，先给出定义（By W3C）：</p>
<blockquote>
<p>Graceful degradation Providing an alternative version of your functionality or making the user aware of shortcomings of a product as a safety measure to ensure that the product is usable. Progressive enhancement Starting with a baseline of usable functionality, then increasing the richness of the user experience step by step by testing for support for enhancements before applying them.</p>
</blockquote>
<p>翻译：“优雅降级”的目的是为你的功能模块提供一种替代方案，或者让用户意识到某种产品（浏览器）的缺陷来保证你的产品的可用性。“渐进增强”是在一个最基本的可用功能之上，通过在拓展功能前检测（浏览器的）支持性逐步地提升用户体验。</p>
<p>这两种方案看起来好像没有什么太大区别，并且最终的结果貌似也是一样的。但是看完后面更多的解释和示例，就会更明白一些，其实这里面是真的有区别的。</p>
<p>一些博文将其简单地归结为如下内容：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.transition</span> &#123;   <span class="comment">/*渐进增强写法*/</span></span><br><span class="line">  -webkit-<span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">     -moz-<span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">       -o-<span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">          <span class="attribute">transition</span>: all .<span class="number">5s</span>;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.transition</span> &#123;   <span class="comment">/*优雅降级写法*/</span> </span><br><span class="line">          <span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">       -o-<span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">     -moz-<span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个解释是<strong>完全错误的</strong>。实际上任何情况下我们都应该使用前者的 CSS 写法。</p>
<span id="more"></span>

<h2 id="在不断变化的环境中开发"><a href="#在不断变化的环境中开发" class="headerlink" title="在不断变化的环境中开发"></a>在不断变化的环境中开发</h2><p>稍微接触过 Web 开发的同学都能发现，我们目前所面对的最大难题不是如何实现强大的功能，而是如何保证即使是不那么强大的功能也能够被所有（退一步说，大多数）用户正常地使用。</p>
<blockquote>
<p>The web was invented and defined to be used with any display device, in any language, anywhere you want. The only thing expected of end users is that they are using a browsing device that can reach out to the web and understand the protocols used to transmit information — http, https, ftp and so on.</p>
</blockquote>
<p>正是因为可以访问 Web 的设备、语言、环境等因素太多太复杂，在极大促进 Web 发展的同时，也导致了以上困境。我们开发者无法对用户所使用的设备有任何期待。因此，我们无法保证 Web 应用上的所有功能都能够正确运行。</p>
<p>我们需要在未知中寻找出路，这就是“渐进增强”与“优雅降级”出现的原因。</p>
<h2 id="二者概览"><a href="#二者概览" class="headerlink" title="二者概览"></a>二者概览</h2><p>上面有对二者有一个简单的定义，这里再作一些扩展。</p>
<p><strong>优雅降级：</strong></p>
<p>首先确保使用现代浏览器的用户能够获得最好的用户体验，然后为使用老旧浏览器的用户优雅降级。降级的结果可能会导致功能不再那么美好，但是，只要能够为用户保留住访问网站的最后一点价值就算是达到了目的。让他们至少能看到正常的页面。</p>
<p><strong>渐进增强：</strong></p>
<p>相似，但又不一样。首先为所有浏览器都提供一个能够正常渲染并工作的版本，然后为更高级的浏览器构建高级功能。</p>
<p>换句话说，“优雅降级”是从复杂的现状开始，尝试去修复一些问题；而“渐进增强”则从最基础入手，为更好的环境提供扩展。“渐进增强”可以让你的基础更加牢固，并且始终保持向前看的姿态。</p>
<h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><p>光说真的很难理解，我们来看个例子。（By W3C）</p>
<p><strong>“打印此页”链接</strong></p>
<p>有时候我们会想让用户可以点击一个链接或按钮以打印整个页面，于是拍脑袋就有了如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;printthis&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:window.print()&quot;</span>&gt;</span>Print this page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这段语句在启用 JavaScript 并且支持 <code>print</code> 方法的浏览器中非常完美。然而，悲催的是，万一浏览器禁用了 JavaScript，或者根本就不支持，那么点击它就完全没有任何反应了。这就造成了一个问题，作为站点开发者，你写出这个链接就相当于向用户保证了这项功能，然而并没有，用户会感到困惑、被欺骗，并且责怪你提供了如此差的用户体验。</p>
<p>为了减轻问题的严重程度，开发者通常会使用<strong>优雅降级</strong>的策略：</p>
<p>告诉用户这个链接可能会不起作用，或者提供替代方案。一般来说我们会使用 <code>noscript</code> 元素来达到目的，就像这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;printthis&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:window.print()&quot;</span>&gt;</span>Print this page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;scriptwarning&quot;</span>&gt;</span></span><br><span class="line">    Printing the page requires JavaScript to be enabled. </span><br><span class="line">    Please turn it on in your browser.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这就是优雅降级的一种体现 —— 我们告诉用户发生了错误并且如何去修复。但是，这有一个前提，用户必须是：</p>
<ul>
<li>知道什么是 JavaScript</li>
<li>知道怎么启用它</li>
<li>有权限去启用它</li>
<li>愿意去启用它</li>
</ul>
<p>下面这种方式可能会更好些：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;printthis&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:window.print()&quot;</span>&gt;</span>Print this page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;scriptwarning&quot;</span>&gt;</span></span><br><span class="line">    Print a copy of your confirmation. </span><br><span class="line">    Select the &quot;Print&quot; icon in your browser,</span><br><span class="line">    or select &quot;Print&quot; from the &quot;File&quot; menu.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样上面所说的问题就都解决了。然而它的前提是所有浏览器都提供了“打印”功能。并且，事实依然没有任何改变：我们提供了一些可能完全没用的功能，并且需要做出解释。实际上这个“打印此页”链接完全就是没有必要存在的。</p>
<p>如果我们换一种方式，使用“<strong>渐进增强</strong>”法，则步骤如下。</p>
<p>首先我们考虑是否有一种方式可以不用写脚本实现打印功能，事实上并没有，因此我们从一开始就不应该选择“链接”这种 HTML 元素来使用。如果一项功能依赖 JavaScript 来实现，那就应该用 button</p>
<p>第二步，告诉用户去打印这个页面，就这么简单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;printthis&quot;</span>&gt;</span>Thank you for your order. Please print this page for your records.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意，这无论在什么情况下都一定是适用的。接下来，我们使用“循序渐进”的 JavaScript 来给支持此功能的浏览器添加一个打印按钮：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;printthis&quot;</span>&gt;</span>Thank you for your order. Please print this page for your records.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span>(<span class="variable language_">document</span>.<span class="property">getElementById</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> pt = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;printthis&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(pt &amp;&amp; <span class="keyword">typeof</span> <span class="variable language_">window</span>.<span class="property">print</span> === <span class="string">&#x27;function&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> but = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      but.<span class="title function_">setAttribute</span>(<span class="string">&#x27;type&#x27;</span>,<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      but.<span class="title function_">setAttribute</span>(<span class="string">&#x27;value&#x27;</span>,<span class="string">&#x27;Print this now&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      but.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">print</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      pt.<span class="title function_">appendChild</span>(but);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意到何为“循序渐进”了吗：</p>
<ul>
<li>使用自执行匿名函数包装法，不留下任何影响</li>
<li>测试 DOM 方法的支持性，并且尝试获取节点</li>
<li>测试节点是否存在，<code>window</code> 对象以及 <code>print</code> 方法是否存在</li>
<li>如果全都没问题，我们就创建这个功能按钮</li>
<li>把按钮添加到需要的位置上去</li>
</ul>
<p>我们永远不给用户提供不能工作的 UI —— 只在它真正能工作时才显示出来。</p>
<h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p><strong>优雅降级</strong>适用场景：</p>
<ul>
<li>当你在改进一个旧项目但时间有限的时候</li>
<li>当你没有足够的时间使用渐进增强法去完成项目的时候</li>
<li>当你要做的产品比较特别，比如说对性能要求特别高的时候</li>
<li>当你的项目必须要有一些基础功能的时候（地图，邮箱等）</li>
</ul>
<p>其余的所有情况下，<strong>渐进增强</strong>都能让用户与你都更开心：</p>
<ul>
<li>不管环境如何，你的产品都能工作</li>
<li>当新技术或浏览器发布的时候，你只需在原有基础上扩展功能，而无需修改最基础的解决方案</li>
<li>技术可以更“用得其所”，而不仅仅是为了实现功能</li>
<li>维护方便</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>“渐进增强”与“优雅降级”最终都是为了实现一个目标：让所有用户都能够使用我们的产品。“渐进增强”方案看起来更优雅，但它需要更多的时间与资源去达成。“优雅降级”可以看成是现有产品的补丁：易于开发但难以维护。</p>
<p>注：本文大部分内容来自 <a href="https://www.w3.org/wiki/Graceful_degradation_versus_progressive_enhancement" target="_blank">W3C</a></p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>毕业</title>
    <url>/2015/graduation/</url>
    <content><![CDATA[<p>在家上中学的时候并不知道每天可以有家可归是一种怎样的幸福，直到后来再也没有这样的机会。如今人生已走过三分之一，想到以后都不会有机会在自己熟悉的地方长住，心里很不是滋味。有时候会想，如果目前还是自己一个人在生活的话，我就可以回到家这边来找一份不痛不痒的工作，先做个一两年。然而，看到以往的玩伴也渐渐走上正轨，供车供房，同学纷纷开始工作，读研留学，自己也会有些迷惘。尤其羡慕留学的朋友，从此以往告别这片神奇的土地。后悔大学没有好好学习，不然可以争取一些保研的机会，就不用这么早和自己的学生生涯说再（可以再打两年dota）。</p>
<p>三分之一已经过去了，学生时代的一些人和一些事也都应该告一段落了，该奋斗的奋斗，该拼爹的拼爹，都要上路了，也没什么闲暇来和老同学扯淡。一些当年觉得很好的朋友，如今看来也不过如此，以后估计也难再有交集。虽然不知道自己以后还能走多远，但是想到人生过了这么长，没有留下多少美好的记忆，也没有交到很多很好的朋友，满房间的物件，却并没有承载很多过去，觉得自己虚度了很多光阴，却也无法弥补，就总是会觉得很伤感。小学时候的课本笔记等早已不知所踪，只留下一两张泛黄的照片，初中的记忆本该满满却没有珍惜，高中不谈，大学更差，就是dota的一千个日与夜。我以后再也不想通宵玩游戏了，每次看到天亮都十分不安。如果我以后有了小孩，一定会帮她（他）把成长过程中的物件都收拾整理好，待到长大，将会是珍贵的回忆。</p>
<p>说到小孩，如今父母也会开始谈及小孩了，真是措手不及，我不还是个孩子吗，怎么就说到我的孩子了。你们一定是在逗我。</p>
<p>感谢毕业照那天来看我的同学朋友们，当日一别，更不知道何时再见。</p>
<p>大四最后一个学期都是在外居住，并不知道学校里的冷暖。周末回校，也只是洗洗衣服，打打游戏，完全感受不到自己还是一个在校学生。有一次在工作日请假回了学校，中午过了饭点仍自信下楼，才猛然想起原来大家还是要上课的，这会刚下课呢。这几年来我也算是有惊无险的体验了，挂了不少课，还好重修能过，马哲顺利，不然极有可能自信心受到打击从而陷入无尽轮回（需要感谢一下窦庆萍老师）。在知道自己大四上没有挂科，毋须延迟毕业后，心里面真的是很轻松，那么我也算是走过来了。</p>
<p>大学的同学里，我并没有与很多人熟识，也没有交到许多朋友，有几位可能甚至四年来都没有说过一句话，不过也不能完全怪我，我们的专业选得好，完全不用与人交流。谢师宴过后，很多人我仍然是只知道名字，其它一无所知，可能再也不会有机会相见了，然而我并不在乎，因为本来就跟不认识一样。对事不对人，自己的大学生活失败，与同学无关。</p>
<p>工作的地方在唐家湾的软件园，近期也可能会一直住在这一片，在珠海的同学朋友没事可以来找我玩，有活动也可以带上我，有麻烦如果能帮上忙也请找我。从学校到工作地点的一路上都是海岸，大概有二十多公里，每次经过都觉得很舒服，然而不知道台风会不会封路。</p>
<p>有一个正经的女朋友会给自己带来压力与动力，同时也会非常大程度地限制自己的自由，不能想去哪里就去哪里，不能想做什么就做什么，这点让我非常不自在。也许现在到了一个我需要照顾别人的时候，但是我还没有完全准备好。并没有想到大学最后一年能找到女朋友，我也没有准备好。要出外工作，住两三年出租屋，同样没有准备好。 我本来只是一个呆在宿舍每天打dota的大学生，现在生活需要做出这么大的转变，有点不知所措。独生儿习惯了被照顾，现在要开始学会自己打理一切，总有些转不过来。说到底，我就是想呆在家里睡觉。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>终于要放假了</title>
    <url>/2017/holiday-soon-finally/</url>
    <content><![CDATA[<p>最近事情有点多，导致好久没有更新过博客。过完后天终于要到国庆假期了，希望可以多点时间在家休息（睡觉）。经常加班到 10 点，周末也时常单休，连续下来还是挺累人的。</p>
<p>公司的饭菜开始吃腻了，每天都能找到不想吃的菜（或者找不到想吃的菜）。</p>
<p>假期一定要抽空把这几个月学到的东西总结一下。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress 博客搭建</title>
    <url>/2016/how-to-build-a-wordpress-blog/</url>
    <content><![CDATA[<p>本文是本站的建站历程记录。每个人都可以使用极少的代价（甚至免费）拥有一个域名独立且完全自主的个人网站或博客，在于怎么选择而已。此类网站的搭建很多情况下并不要求其操作者是一个程序狗，所以个人感觉可玩性还是挺强的。整个过程一共需要准备三种事物：<strong>域名</strong>，<strong>托管</strong>与<strong>程序</strong>（特殊情况，如果选择国内主机则需要准备第四种，即<strong>备案</strong>）。</p>
<span id="more"></span>

<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>搭建一个网站首先必不可少的就是自己的域名，比如本站的域名是<a href="http://wxsm.space/">wxsm.space</a>，域名可以在任意服务商处购买，不需要与托管的服务商一致。根据域名后缀的不同，价格在几十元至百元每年之间不等，大多数服务商都会提供首年优惠，少部分首年的价格甚至可以达到个位数（比如万网的 <code>.top</code> 域名购买首年只需4软妹币）。</p>
<p>域名的选择没什么技术含量，主要就是自己喜欢。本站的域名是在<a href="http://wanwang.aliyun.com/">万网</a>购买。域名购买以后可以解析到托管的IP地址。</p>
<p>需要注意的地方：</p>
<ol>
<li>如果打算购买国内（特指大陆）主机，就一定要确定自己购买的域名后缀是可以备案的类型。具体可以在工信部网站（公共查询 ⇒ 域名类型）查询，能查到的则是可备案后缀。切记切记。</li>
<li>为自己的安全着想，最好不要使用 <code>.cn</code> 类型的域名。</li>
</ol>
<h2 id="托管"><a href="#托管" class="headerlink" title="托管"></a>托管</h2><p>托管有很多种选择，首先从大的方向说，尽量选择靠谱的供应商。淘宝小商家之类的虽然便宜，但是很多时候我们需要的更多是稳定，毕竟是把代码和数据都放在别人家，还是很要命的一件事。当然如果免费的话又另当别论。至于配置就纯看个人需求了。如果是玩玩个人小网站，一般选最低的那些都没问题。</p>
<h3 id="国内-香港-国外"><a href="#国内-香港-国外" class="headerlink" title="国内&#x2F;香港&#x2F;国外"></a>国内&#x2F;香港&#x2F;国外</h3><p>国内主机理论上来说从国内访问速度最快，其最大的特点是需要备案，其二是会被GFW限制，主机上的程序将会无法访问到Google等公司提供的服务。</p>
<p>香港主机速度可媲美国内主机，是主攻国内但是又不想备案的不二之选。</p>
<p>国外主机在国内的访问速度可能会非常之慢，尤其是欧美地区，稍快一些的可以选择新加坡。其特点是很多都相对国内以及香港主机较为便宜，以及有部分免费（比如AppHarbor，免费空间，免费SQL Server，无限流量，同步Github仓库，自动部署，简直不要太良心，可惜只能跑.Net）。</p>
<p>本站目前使用的是万网提供的国内主机。</p>
<h3 id="虚机-VPS-其它"><a href="#虚机-VPS-其它" class="headerlink" title="虚机&#x2F;VPS&#x2F;其它"></a>虚机&#x2F;VPS&#x2F;其它</h3><p>虚机即虚拟主机。该类型主机一般都是共享系统资源，如CPU，内存，带宽，IP等。虚机好像只有ASP.Net和PHP两种类型（反正我是没见过其它的），并且所有功能都是由外部配置好的，用户只能使用服务商所提供的功能，超出范围则无能为力，因此它的限制会比较大。操作方式就是通过FTP访问其储存空间，然后将写好的程序上传，马上就能在浏览器看到结果，不需要考虑部署、环境等。如果使用CMS（如Wordpress）的话，这种主机已经足够用了。</p>
<p>VPS相当于一台属于自己的计算机，用户可以通过各种方式登录并且对它操作，安装环境，部署网站等。Java，Node.js等类型的程序好像只能跑在VPS上。因为没有用过所以不太了解。其价格要普遍比虚机贵一些。</p>
<p>还有一些是类似Github Pages的静态服务器，它们只能够作为静态网页的托管。这些可能会很便宜，但是需要一定的技巧才能玩出花样来。</p>
<p>本站目前使用的是万网提供的虚机，免费版。每个人都可以申请，使用期限为两年。运行Wordpress完全没有问题。传送门：<a href="http://wanwang.aliyun.com/hosting/free/">http://wanwang.aliyun.com/hosting/free/</a></p>
<h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><p>有了域名和托管，我们需要的最后一件事物就是程序。程序才是真正运行着的东西。</p>
<p>程序可以自己写，也可以用开源软件。自己写的好处就是完全控制，以及比较有意思，但如果更多的是想要做内容的话还是用开源软件比较好，这样就可以更好地关注于网站的内容本身而不是实现。</p>
<p>本站使用的是开源Wordpress CMS，我们要做的事情很简单，在中文官网<a href="https://cn.wordpress.org/">https://cn.wordpress.org/</a>首页把Wordpress程序下载回来，解压，然后将文件夹上传到服务器根目录，通过访问其任意页面来配置站点的基本信息，如名字，描述，数据库连接等，就可以非常方便地搭建好整个网站。数据库表等其它事物都会由程序自动生成。关于这个软件的安装和使用方法网络上有非常多的详细教程，遇到问题多用搜索就好啦。</p>
<p>WordPress的主题和插件简直数不过来，我觉得满足98%个人网站用户的需求完全是没问题的。加之它有强大的缓存插件，可以自动将所有的动态页面都缓存成HTML然后301之，所以访问性能也不在话下。当然如果想要实现某些特别的自定义功能的话，还是要懂一点点编程技巧才行。</p>
<h2 id="备案"><a href="#备案" class="headerlink" title="备案"></a>备案</h2><p>如果使用的是国内的托管，则需要进行最麻烦的一步：备案。</p>
<p>备案一般是由代理商完成，不需要我们自己直接与工信部沟通。</p>
<p>整个流程有两个地方稍微麻烦，一是初审填表，需要下载、打印、填表、扫描、上传这么多的步骤。其次是“当面核验”，其实就是拍个照上传，但是需要它专用的背景幕布，可以到指定的拍照地点免费拍摄，或者代理商以免费或者到付的形式快递幕布给申请人，然后自行拍照上传。</p>
<p>管局审核需要的时间从从两个小时到三十天不等，主要看运气。反正我是这个时间段内的都遇到过（广东）。</p>
<p>备案通过以后，需要把备案号以链接的形式加到网站的底部，然后就可以该干嘛干嘛了。</p>
]]></content>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA 滚动条问题</title>
    <url>/2016/idea-scrolling-issue/</url>
    <content><![CDATA[<p>用 IDEA 撸代码的时候有一个非常恶心的问题，它的滚动条经常会无缘无故地跳动，最常见的就是拖动滚动条之后它会马上跳回到原本的位置，纵向和横向都有此问题，因此基本上每次都至少要拖两次滚动条才能成功，烦不胜烦。升级版本等等都没有用。今天终于找到了真正的解决方法，就是<strong>关闭屏幕取词软件或禁用软件的取词功能（比如有道）</strong>。完全、彻底地解决此问题。</p>
]]></content>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>IE Cache Issue</title>
    <url>/2016/ie-cache-issue/</url>
    <content><![CDATA[<p>昨天发现了一个奇怪的问题，一个Web Application Update Entity的功能，在Chrome&#x2F;Firefox上测试都正常运行，到了IE 11上就不行了，主要表现就是Update成功以后再次读取记录会读取出Update之前的值。功能逻辑就是一些简单的通过RESTful API来执行CRUD操作的Ajax调用。在IE上用控制台仔细调试一番后，发现在打开控制台的时候居然能表现正常，而关掉以后就立刻不行，这明显就是IE爸爸不走寻常路，把API也Cache下来了。于是就有了以下的解决方案。</p>
<span id="more"></span>

<h2 id="前端解决方案"><a href="#前端解决方案" class="headerlink" title="前端解决方案"></a>前端解决方案</h2><p>既然是因为Cache产生的问题，那么就很容易解决，在API调用（主要是GET）中都添加一个随机数或者时间戳就行了，强制浏览器刷新。比如，原本请求的应该是这样的地址：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;/api/metadata/entity/list?type=car&amp;name=qq&#x27;</span></span><br></pre></td></tr></table></figure>

<p>可以通过添加一个时间戳修改成这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;/api/metadata/entity/list?type=car&amp;name=qq&amp;_t=&#x27;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br></pre></td></tr></table></figure>

<p>其中添加的 <code>_t</code> 参数如果服务端没有定义的话就会自然而然地被扔掉（如果是有意义的参数就换个key，或者不写key也行），浏览器缓存也会因为每次请求的URL实际上都不一样而失效，这样问题就解决了。但是，对于一个大型项目来说，如果每个URL都要怎么来一遍，那么用软件工程界的专业术语来说，叫做不好维护。很有可能什么时候漏掉了一个URL没有加时间戳，就埋下了一个BUG的种子。</p>
<h2 id="服务端解决方案"><a href="#服务端解决方案" class="headerlink" title="服务端解决方案"></a>服务端解决方案</h2><p>此处以使用ExpressJS搭建的NodeJS服务器为例，其它代码也可以使用类似的方法达到同样的效果。</p>
<p>以下是一本万利的解决思路：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// No cache for RESTful APIs</span></span><br><span class="line">    app.<span class="title function_">use</span>(<span class="string">&#x27;/api/*&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">        res.<span class="title function_">header</span>(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache, no-store, must-revalidate&quot;</span>);</span><br><span class="line">        res.<span class="title function_">header</span>(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        res.<span class="title function_">header</span>(<span class="string">&quot;Expires&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>这段代码所做的事情是，对于所有进来的以 <code>/api</code> 开头为路由的请求，都执行以下操作：</p>
<ul>
<li>给响应头添加 <code>&quot;Cache-Control&quot;: &quot;no-cache, no-store, must-revalidate&quot;</code> 键值对</li>
<li>给响应头添加 <code>&quot;Pragma&quot;: &quot;no-cache&quot;</code> 键值对</li>
<li>给响应头添加 <code>&quot;Expires&quot;: 0</code> 键值对</li>
<li>将请求交给下游中间件，继续处理，该干嘛干嘛</li>
</ul>
<p>Cache-Control ：</p>
<ul>
<li>no-cache：指示请求或响应消息不能缓存</li>
<li>no-store：用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。</li>
<li>must-revalidate：字面理解，必须重新验证</li>
</ul>
<p>Pragma ：</p>
<ul>
<li>no-cache：在HTTP&#x2F;1.1协议中，它的含义和Cache- Control:no-cache相同</li>
</ul>
<p>Expires：</p>
<ul>
<li>自然就是缓存的过期时间了</li>
</ul>
<p>那么通过以上方法，只要浏览器是支持基本HTTP协议的，它就应该能够做出相应的操作，从而不对API进行缓存。很显然这段代码应该在所有API的具体方法执行之前被执行，对于Express来说我们只需要把它放在其他路由代码之前就可以了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过验证，两种方法都可以达到预期的效果。至于实际使用哪一种，可能还要视具体需求而定。</p>
]]></content>
      <tags>
        <tag>nodejs</tag>
        <tag>express</tag>
        <tag>ie</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 事件代理</title>
    <url>/2016/javascript-event-delegation/</url>
    <content><![CDATA[<p>jQuery 曾经存在 3 种绑定事件的方法：bind &#x2F; live &#x2F; delegate，后来 live 被砍掉了，只留下 bind 与 delegate，它们之间的区别是，通过 bind 方法绑定的事件，只对当前存在的元素生效，而通过 delegate 则可以绑定“现在”以及“将来”的所有元素。</p>
<p>为“将来”元素绑定事件的适用场景还是挺多的。比如一个列表，或者一个表格，它可能会动态地被插入或者移除一些子元素，然后每个元素都需要有一个点击事件，这样的话我们就需要保证“现在”已存在的元素以及“将来”可能被添加进去的元素都能够正常工作。怎么办呢，我们总不能每插入一个元素就给它绑一次事件吧（事实上我以前没少干这事），因此 jQuery 就为我们提供了后者的方法。</p>
<p>一开始我觉得很奇怪，像 delegate 这样的方法是怎么实现的呢？通过监听 DOM 树变化吗？性能开销会不会特别大？后来知道了 JavaScript 有一种机制叫事件代理（event delegation），也就是本文要说的东西，才明白，原来一切都很简单。</p>
<span id="more"></span>

<h2 id="事件代理及其工作原理"><a href="#事件代理及其工作原理" class="headerlink" title="事件代理及其工作原理"></a>事件代理及其工作原理</h2><p>何为代理呢，大概就是，你把你要做的事情告诉我，我帮你做，我就是你的代理。</p>
<p>那么事件代理，顾名思义，在一个元素上触发的事件，由另一个元素去处理，后者就是前者的事件代理。</p>
<p>大概就是这么回事。那么，如何实现呢？</p>
<p>这里就涉及两个关于 JavaScript 事件的知识：事件冒泡（event bubbling）以及目标元素（target element）：</p>
<ul>
<li>当一个元素上触发事件的时候，比如说鼠标点击了一个按钮，同样的事件将会在它的所有祖先元素上触发。这就是所谓的事件冒泡。</li>
<li>所有事件的目标元素都将是最原始触发它的那个特定元素，就比如说那个按钮，其引用将被储存在事件对象内。</li>
</ul>
<p>因此，我们可以做到：</p>
<ul>
<li>给一个节点绑定事件</li>
<li>等待其子孙节点的冒泡事件</li>
<li>判断事件实际来源</li>
<li>做出相应处理</li>
</ul>
<p>这就是事件代理的工作原理。</p>
<h2 id="有什么用"><a href="#有什么用" class="headerlink" title="有什么用"></a>有什么用</h2><p>一个典型的场景是，如果一个表格有 100 行 100 列，你需要给每一个单元格都添加点击事件，怎么办？</p>
<p>当然可以说一次性把它们全选出来，绑定事件不就完了。但是，内存 BOOM，浏览器 BOOM</p>
<p>用事件代理就简单多了，给 table 绑一次事件，然后等它们冒泡上来就行了。</p>
<p>还有就是动态添加的元素。比如某一时刻 table 被添加了一行，那么新的一行其事件同样能冒泡并且被 table 上的事件处理器接收到。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>Talk is cheap, show me the code.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Some browser diff issue handler</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getEventTarget</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e = e || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">  <span class="keyword">return</span> e.<span class="property">target</span> || e.<span class="property">srcElement</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Easy event handler on &#x27;table&#x27; element</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">editCell</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> target = <span class="title function_">getEventTarget</span>(e);</span><br><span class="line">  <span class="keyword">if</span>(target.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>() === <span class="string">&#x27;td&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// DO SOMETHING WITH THE CELL</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Integrate Renovate with GitLab</title>
    <url>/2020/integrate-renovate-with-gitlab/</url>
    <content><![CDATA[<p>企业项目群中往往会有部分代码逻辑需要公用，将其抽离作为公共包发布到私有源的做法是比较优雅的解决方式。但是这么做的话后期需要面临一个问题：<strong>当一个公共依赖包的使用者数量逐渐庞大的时候，如何保证当此包发布新版本时，所有使用者都能尽可能快地得到更新？</strong></p>
<p>传统的解决方案：</p>
<ol>
<li>手工对所有项目逐个升级。这种办法相当繁琐，且容易产生遗漏，当项目数量足够庞大的时候，发布一次将会是相当痛苦的体验；</li>
<li>在依赖安装时指定版本为 <code>latest</code>。这种办法虽然能保证每次安装时都能得到最新版本，但是却有诸多弊端，如：<ol>
<li>无法保证依赖的安全性，有可能一次更新不慎造成大面积的瘫痪；</li>
<li>对「依赖锁」不友好，如 <code>yarn.lock</code> 等。</li>
</ol>
</li>
</ol>
<p>因此，如何使这个过程变得优雅，是一个亟待解决的问题。</p>
<span id="more"></span>

<h2 id="关于-Renovate"><a href="#关于-Renovate" class="headerlink" title="关于 Renovate"></a>关于 Renovate</h2><p><a href="https://github.com/renovatebot/renovate">Renovate</a> 是一个专注于解决依赖问题的库，使用 Node.js 编写，因此它也许会更适合于使用 NPM 或 Yarn 作为依赖管理的项目。我最早从 <a href="https://zexo.dev/posts/2020/03/01/keep-your-repo-dependencies-up-to-date-with-renovate">zexo.dev&#x2F;使用 renovate 监控第三方依赖更新</a> 这篇博文中得知了这个工具，在 GitHub 上托管的个人项目上尝试了一段时间后发现它非常好用。</p>
<h2 id="如何工作？"><a href="#如何工作？" class="headerlink" title="如何工作？"></a>如何工作？</h2><p>复杂的流程就不讲了。总的来说，它会对启用了它的项目做以下几件事情：</p>
<ol>
<li>发起一个 Onboard PR（<a href="https://github.com/uiv-lib/uiv/pull/348">示例</a>），将它的配置文件以 PR 的形式合并到项目中。在这个 PR 被合并前，不会有任何后续操作。</li>
<li>在 Onboard 被合并后，发起一个 Pin PR（<a href="https://github.com/uiv-lib/uiv/pull/349">示例</a>），将项目中用到的依赖的版本锁定，对于 <code>package.json</code> 来说，即去除任何模糊的通配符，如 <code>^</code> &#x2F; <code>~</code> 等，改用精确的版本号。在这个 PR 被合并前，不会有任何后续操作。</li>
<li>Pin PR 被合并后，开始周期性地检索依赖。当发现有更新时，为每个依赖（或依赖群）更新发起一个 PR（<a href="https://github.com/uiv-lib/uiv/pull/677">示例</a>），内容包含依赖定义文件（如 <code>package.json</code>） 与依赖锁文件（如 <code>yarn.lock</code>）。</li>
<li>如果用户想要做本次升级，将其合并即可。将来如果该依赖再次有更新可用，会再次生成新的 PR；</li>
<li>如果用户不想做本次升级，不理会或将其关闭即可：<ol>
<li>若不理会，在将来该依赖再次升级时，Renovate 会更新该 PR 至新版本；</li>
<li>若关闭，Renovate 将忽略该版本，不再发起 PR。</li>
</ol>
</li>
</ol>
<p>以上只是大致流程，实际上 Renovate 还有非常多的配置项可以发掘，可以提供高度定制化的使用体验。</p>
<h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><p>如果是在 GitHub 上使用，只需到应用市场安装 Renovate 并为它提供想要开启服务的项目的访问权限即可，过几分钟就能在项目内收到 Onboard PR。但这部分不是本文的重点。</p>
<p>本文重点是如何在私有环境中使用它，即 Self-hosted 环节，与我司的自建 GitLab 进行集成。</p>
<p>根据 <a href="https://github.com/renovatebot/renovate/blob/master/docs/usage/self-hosting.md">官方文档</a>，自建 Renovate 服务有以下几种方式：</p>
<h3 id="方式-1：npm-install-g-renovate"><a href="#方式-1：npm-install-g-renovate" class="headerlink" title="方式 1：npm install -g renovate"></a>方式 1：<code>npm install -g renovate</code></h3><p>该方式最简便，只需要安装了 Node.js 环境以后，通过以上 cli 工具即可实现所有功能。但是官方文档对他的描述十分简略，几乎没有，勉强通过 <code>--help</code> 才试出了用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GITHUB_COM_TOKEN=your-github-token renovate \</span><br><span class="line">    --platform=gitlab \</span><br><span class="line">    --endpoint=https://gitlab.cpmpany.com/api/v4/ \</span><br><span class="line">    --token=your-gitlab-token \</span><br><span class="line">    --onboarding=<span class="literal">true</span> \</span><br><span class="line">    --onboarding-config=<span class="string">&quot;&#123;\&quot;extends\&quot;: [\&quot;config:base\&quot;]&#125;&quot;</span> \</span><br><span class="line">    --log-level=debug \</span><br><span class="line">    --yarnrc=<span class="string">&quot;registry \&quot;http://npm-registry.cpmpany.com\&quot;&quot;</span> \</span><br><span class="line">    --npmrc=<span class="string">&quot;registry=\&quot;http://npm-registry.cpmpany.com\&quot;&quot;</span> \</span><br><span class="line">    path/to/project</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ol>
<li><code>GITHUB_COM_TOKEN</code> 是用来从 GitHub 上获取 Changelog 时要用到的。如果没有提供这个 token，则 Renovate 不会尝试去获取 Changelog；</li>
<li><code>platform</code> &#x2F; <code>endpoint</code> &#x2F; <code>token</code> 分别对应目标平台的参数；</li>
<li><code>onboarding</code> 表示项目必须先接受 Onboard PR 才会执行后续操作；</li>
<li><code>onboarding-config</code> 为 Onboard PR 所提供的默认配置文件；</li>
<li><code>log-level</code> 为 <code>debug</code> 时才能得到详细的日志，方便调试；</li>
<li>项目内一般自带了 yarnrc 与 npmrc，如果项目内自带的已经覆盖了私有源则无需配置，否则需要配置。需要注意的是，如果使用 npm 则只需要提供 <code>npmrc</code>，但如果使用 yarn 则需要同时提供 <code>yarnrc</code> 与 <code>npmrc</code>，缺一不可。</li>
</ol>
<p>命令行可以作为本地调试工具，最终部署的话还是直接使用打包好的镜像更好用一些。</p>
<h3 id="方式2：使用-Docker-镜像"><a href="#方式2：使用-Docker-镜像" class="headerlink" title="方式2：使用 Docker 镜像"></a>方式2：使用 Docker 镜像</h3><p>Renovate 提供了构建好的 <a href="https://hub.docker.com/r/renovate/renovate/">renovate&#x2F;renovate</a> 镜像，可以直接使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> -v <span class="string">&quot;/path/to/your/config.js:/usr/src/app/config.js&quot;</span> renovate/renovate</span><br></pre></td></tr></table></figure>

<p>这个镜像有多个版本，其中大体区分为 slim 版与完整版。它们之间的区别是：</p>
<ol>
<li>完整版包含了所有可能要用到的构件工具，如 Python 等，约 1.3GB；</li>
<li>slim 版仅包含 Renovate 自身，约 130MB。</li>
</ol>
<p>可以使用 GitLab CI 与该镜像直接集成，image 指定 <code>renovate/renovate</code> 即可。但是，最终我选择了使用 k8s 集成。</p>
<h3 id="方式3：使用-Kubernetes"><a href="#方式3：使用-Kubernetes" class="headerlink" title="方式3：使用 Kubernetes"></a>方式3：使用 Kubernetes</h3><p><a href="https://github.com/renovatebot/renovate/blob/master/docs/usage/self-hosting.md">官方文档</a> 贴心地提供了 k8s 的配置样例，基本上复制粘贴就能完成配置了：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">renovate-env</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">stringData:</span></span><br><span class="line">  <span class="attr">GITHUB_COM_TOKEN:</span> <span class="string">&#x27;any-personal-user-token-for-github-com-for-fetching-changelogs&#x27;</span></span><br><span class="line">  <span class="comment"># set to true to run on all repos you have push access to</span></span><br><span class="line">  <span class="attr">RENOVATE_AUTODISCOVER:</span> <span class="string">&#x27;false&#x27;</span></span><br><span class="line">  <span class="attr">RENOVATE_ENDPOINT:</span> <span class="string">&#x27;https://github.company.com/api/v3&#x27;</span></span><br><span class="line">  <span class="attr">RENOVATE_GIT_AUTHOR:</span> <span class="string">&#x27;Renovate Bot &lt;bot@renovateapp.com&gt;&#x27;</span></span><br><span class="line">  <span class="attr">RENOVATE_PLATFORM:</span> <span class="string">&#x27;github&#x27;</span></span><br><span class="line">  <span class="attr">RENOVATE_TOKEN:</span> <span class="string">&#x27;your-github-enterprise-renovate-user-token&#x27;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">renovate</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">&#x27;@hourly&#x27;</span></span><br><span class="line">  <span class="attr">concurrencyPolicy:</span> <span class="string">Forbid</span></span><br><span class="line">  <span class="attr">jobTemplate:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">renovate</span></span><br><span class="line">              <span class="comment"># Update this to the latest available and then enable Renovate on</span></span><br><span class="line">              <span class="comment"># the manifest</span></span><br><span class="line">              <span class="attr">image:</span> <span class="string">renovate/renovate:23.19.2</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">user/repo</span></span><br><span class="line">              <span class="comment"># Environment Variables</span></span><br><span class="line">              <span class="attr">envFrom:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">secretRef:</span></span><br><span class="line">                    <span class="attr">name:</span> <span class="string">renovate-env</span></span><br><span class="line">          <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure>

<p>但是，这里有一个地方比较坑的是，像 <code>RENOVATE_AUTODISCOVER</code> 这种环境变量的命名，官方并没有提供一个文档明确说明到底是以何种规则得到的（或者是我没有找到）。不过经过一番搜索，我找到了它的具体实现：</p>
<p><a href="https://github.com/renovatebot/renovate/blob/53ca91301f6a36c0c87e7d6b06b1bd8c9ec1b283/lib/config/env.ts">lib&#x2F;config&#x2F;env.ts</a>:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getEnvName</span>(<span class="params">option: Partial&lt;RenovateOptions&gt;</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (option.<span class="property">env</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (option.<span class="property">env</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> option.<span class="property">env</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> nameWithUnderscores = option.<span class="property">name</span>.<span class="title function_">replace</span>(<span class="regexp">/([A-Z])/g</span>, <span class="string">&#x27;_$1&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`RENOVATE_<span class="subst">$&#123;nameWithUnderscores.toUpperCase()&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是，将普通配置名（驼峰命名）：</p>
<ol>
<li>全部转为大写字母；</li>
<li>单词首字母前加上 <code>_</code>；</li>
<li>前面加上 <code>RENOVATE_</code></li>
</ol>
<p>就得到了环境变量的命名。</p>
<p>但是，经过实践发现这里有一个特例：<code>logLevel</code> 这个配置并不是转换为 <code>RENOVATE_LOG_LEVEL</code>，而仅仅是 <code>LOG_LEVEL</code> 而已。 </p>
<p>另外，官方提供的样例对于所有 secrets 都使用了 <code>stringData</code> 来储存，不提倡这种做法。我建议将 <code>token</code> 类密钥信息做 base64 编码储存在 <code>data</code> 中：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">renovate-secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">GITHUB_COM_TOKEN:</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">RENOVATE_TOKEN:</span> <span class="string">...</span></span><br><span class="line"><span class="attr">stringData:</span></span><br><span class="line">  <span class="attr">RENOVATE_AUTODISCOVER:</span> <span class="string">&#x27;false&#x27;</span></span><br><span class="line">  <span class="attr">RENOVATE_ENDPOINT:</span> <span class="string">&#x27;https://gitlab.company.com/api/v4/&#x27;</span></span><br><span class="line">  <span class="attr">RENOVATE_PLATFORM:</span> <span class="string">&#x27;gitlab&#x27;</span></span><br><span class="line">  <span class="attr">RENOVATE_ONBOARDING:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">  <span class="attr">RENOVATE_ONBOARDING_CONFIG:</span> <span class="string">&#x27;&#123;...&#125;&#x27;</span></span><br><span class="line">  <span class="attr">RENOVATE_SEMANTIC_COMMITS:</span> <span class="string">&#x27;enabled&#x27;</span></span><br><span class="line">  <span class="attr">RENOVATE_YARNRC:</span> <span class="string">&#x27;registry &quot;http://npm-registry.company.com&quot;&#x27;</span></span><br><span class="line">  <span class="attr">RENOVATE_NPMRC:</span> <span class="string">&#x27;registry=&quot;http://npm-registry.company.com&quot;&#x27;</span></span><br><span class="line">  <span class="attr">LOG_LEVEL:</span> <span class="string">&#x27;debug&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="集成-GitLab"><a href="#集成-GitLab" class="headerlink" title="集成 GitLab"></a>集成 GitLab</h2><p>在之前的博文 <a href="/posts/2020-09-23-gitlab-ce-code-review-bot.html">Gitlab CE Code-Review Bot</a> 中，我介绍了 GitLab CE 评审机器人的实现。由于 Renovate 也是基于 Merge Request 实现的，因此它们能够很好地相处：</p>
<ol>
<li>Renovate 发起 MR</li>
<li>评审机器人随机分派评审人</li>
<li>评审通过，合并</li>
</ol>
<p>但是有几点需要注意：</p>
<ol>
<li>由于评审机器人使用了 WIP 来阻止 MR 被手动合并，因此 Renovate 的配置中也需要将 MR 设置为 draft 状态，这样才能维持 MR 的 WIP 标记。否则，Renovate 会在发起 MR 后的第二次扫描中尝试去除 MR 的 WIP 标记；</li>
<li>最好给 Renovate 开设一个独立的账号。如果与其他用户或程序共用账号，Renovate 可能会在 force-push 的过程中使某些由其它用户做出的改动丢失；</li>
<li>因为 Renovate 的设计中存在一些高危操作（分支删除，强制推送等），因此最好只赋予 Developer 权限。实际上如果不启用自动合并，它也只需要 Developer 权限。</li>
</ol>
<p>符合我需求的最终配置 <code>renovate.json</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: [</span><br><span class="line">    &quot;config:base&quot;,</span><br><span class="line">    // 除了 peerDependencies 以外所有依赖都 pin，</span><br><span class="line">    // 注意仅适用于业务项目，在 library 中不要这样做</span><br><span class="line">    &quot;:pinAllExceptPeerDependencies&quot;</span><br><span class="line">  ],</span><br><span class="line">  // 仅启用 npm 依赖管理，项目里有其它依赖项不想被 Renovate 管理的，</span><br><span class="line">  // 如：Docker / Gradle / Cocoa Pod 等</span><br><span class="line">  &quot;enabledManagers&quot;: [</span><br><span class="line">    &quot;npm&quot;</span><br><span class="line">  ],</span><br><span class="line">  // 仅对 @company/ 开头的私有包启用依赖管理，其它外部依赖一律禁用</span><br><span class="line">  &quot;packageRules&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;packagePatterns&quot;: [</span><br><span class="line">        &quot;*&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;excludePackagePatterns&quot;: [</span><br><span class="line">        &quot;^@company/&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;enabled&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  // 将 MR 标记为 draft，即 WIP</span><br><span class="line">  &quot;draftPR&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol>
<li>将 Renovate 部署上 Kubernetes 的时候，要注意能够分配的节点是否都有私有源的访问权限。如果 CronJob 被分配到了无权访问的节点会导致私有包 Lookup Failed，从而更新失败。如果只有部分节点拥有访问权限，可以用 <code>nodeSelector</code> 或 <code>nodeName</code> 指定节点；</li>
<li>Changelog 在 GitLab (10.3.2) 上面会丢失，并且格式错乱，如图所示：<img src="/2020/integrate-renovate-with-gitlab/98614561-a5fc1f00-2333-11eb-8c9e-3d33107cd7ec.png" alt="screenshot"><br>这个问题猜测是由于我司的 GitLab 版本过低导致的。因为 <a href="http://gitlab.com/">gitlab.com</a> (13.x) 上不存在这个问题。但是因为 GitLab 不在我的管辖范围内，因此目前没有找到很好的解决方案，后续如果解决了会更新。</li>
</ol>
<h3 id="解决-Changelog-问题"><a href="#解决-Changelog-问题" class="headerlink" title="解决 Changelog 问题"></a>解决 Changelog 问题</h3><p>我在 GitHub 上提了一个 <a href="https://github.com/renovatebot/renovate/issues/7689">issue</a>，但是作者表示这是老版本 GitLab 出现的问题，建议升级 GitLab，不会为其做出改动及修复。不过他建议可以修改源码内的某些文件并自己构建一个 Docker 镜像来达到目的：</p>
<blockquote>
<p>You could perhaps try building your own image with a modified version of that file, or even just sed replace parts of it at runtime. You can find it at dist&#x2F;workers&#x2F;pr&#x2F;changelog&#x2F;hbs-template.js in the built&#x2F;distributed version.</p>
</blockquote>
<p>但是我不是很喜欢这种做法，这样的话会更新镜像会比较麻烦。不过如他所说，也可以选择在运行时进行替换。由于之前开发过一款 <a href="/posts/2020-09-23-gitlab-ce-code-review-bot.html">评审机器人</a>，机器人的执行逻辑刚好适合用来做这一块的热修复。只需要在 MR 创建逻辑内加多一个判断，如果是来自 renovate 的 MR 则执行修复操作；</p>
<ol>
<li>解决格式错乱问题：读取 MR 的 description 字段，并将 <code>&lt;details&gt;</code> 节点去除；</li>
<li>解决 changelog 丢失问题：调用 GitLab API 获取 Changelog，并粘贴到 description 中；</li>
<li>Renovate 更新 MR 时会丢失 description 中的更改，为了保险起见，再将 Changelog 作为输出到评论中去。</li>
</ol>
<p>大致代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (isRenovateMR &amp;&amp; enableRenovateFix) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// renovate 在旧版 gitlab 上有问题，此处为修复逻辑</span></span><br><span class="line">    <span class="keyword">const</span> &#123; description &#125; = object_attributes</span><br><span class="line">    <span class="comment">// 根据 mr 内容获取项目名与 tag 名</span></span><br><span class="line">    <span class="comment">// getStringBetween 函数：截取头尾字符串中间的内容</span></span><br><span class="line">    <span class="keyword">const</span> projectName = <span class="title function_">getStringBetween</span>(description, <span class="string">&#x27;&lt;summary&gt;&#x27;</span>, <span class="string">&#x27;&lt;/summary&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> tagName = <span class="title function_">getStringBetween</span>(description, <span class="string">&#x27;[Compare Source]&#x27;</span>, <span class="string">&#x27;)&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;...&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="comment">// 获取 release note</span></span><br><span class="line">    <span class="keyword">const</span> tag = <span class="keyword">await</span> service.<span class="title function_">getTagInfo</span>(projectName, tagName)</span><br><span class="line">    <span class="keyword">const</span> releaseNote = _.<span class="title function_">get</span>(tag, <span class="string">&#x27;release.description&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment">// 移除 details 标签，并添加 release note</span></span><br><span class="line">    <span class="keyword">const</span> _desc = description.<span class="title function_">replace</span>(<span class="string">&#x27;&lt;details&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;&lt;/details&gt;&#x27;</span>, releaseNote)</span><br><span class="line">    <span class="comment">// 更新 mr 内容</span></span><br><span class="line">    <span class="keyword">await</span> service.<span class="title function_">updateMergeRequest</span>(pid, mid, &#123;</span><br><span class="line">      <span class="attr">description</span>: _desc</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 添加评论</span></span><br><span class="line">    <span class="keyword">if</span> (!!releaseNote) &#123;</span><br><span class="line">      <span class="keyword">await</span> service.<span class="title function_">addMergeRequestComment</span>(pid, mid, <span class="string">`</span></span><br><span class="line"><span class="string">更新日志：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="subst">$&#123;releaseNote&#125;</span></span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如图所示：</p>
<p><img src="/2020/integrate-renovate-with-gitlab/20210217165423.png" alt="screenshot"></p>
]]></content>
      <tags>
        <tag>gitlab</tag>
        <tag>devops</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Promise</title>
    <url>/2016/javascript-promise/</url>
    <content><![CDATA[<p>知乎上有一个黑 JavaScript 的段子，大概是说：</p>
<blockquote>
<p>N 年后，外星人截获了 NASA 发射的飞行器并破解其源代码，翻到最后发现好几页的 }}}}}}……</p>
</blockquote>
<p>这是因为 NASA 近年发射过使用 JavaScript 编程的飞行器，而 Node.js 环境下的 JavaScript 有个臭名昭著的特色：Callback hell（回调地狱的意思）</p>
<p>JavaScript Promise 是一种用来取代超长回调嵌套编程风格（特指 Node.js）的解决方案。</p>
<p>比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getAsync</span>(<span class="string">&quot;/api/something&quot;</span>, <span class="function">(<span class="params">error, result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(error)&#123;</span><br><span class="line">        <span class="comment">//error</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//success</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>将可以写作：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="title function_">getAsyncPromise</span>(<span class="string">&quot;/api/something&quot;</span>); </span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//success</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//error</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>乍一看好像并没有什么区别，依然是回调。但最近在做的一个东西让我明白，Promise 的目的不是为了干掉回调函数，而是为了干掉嵌套回调函数。</p>
<span id="more"></span>

<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>MDN 定义：</p>
<blockquote>
<p>The Promise object is used for asynchronous computations. A Promise represents a value which may be available now, or in the future, or never.</p>
</blockquote>
<p>意思大概就是，Promise 是专门用于异步处理的对象。一个 Promise 代表着一个值，这个值可能已经获得了，又可能在将来的某个时刻会获得，又或者永远都无法获得。</p>
<p>简单地说，Promise 对象就是值的代理。经纪人。</p>
<h2 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h2><p>创建一个 Promise：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//success -&gt; resolve(data)</span></span><br><span class="line">    <span class="comment">//error -&gt; reject(data)</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用 <code>new Promise</code>  来创建 Promise 对象，构造器中传入一个函数，同时对该函数传入 <code>resolve</code>  和 <code>reject</code>  参数，分别代表异步处理成功与失败时将要调用的方法。</p>
<p>处理 Promise 结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>

<p>使用 <code>then</code>  方法来注册结果函数，共可以注册两个函数，其中 <code>onFulfilled</code>  代表成功，后者代表失败。两个参数都是可选参数。</p>
<p>不过，对于失败处理，更加推荐的方式是使用 <code>catch</code>  方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise.<span class="title function_">catch</span>(onRejected)</span><br></pre></td></tr></table></figure>

<p>这两个方法可以进行链式操作。组合示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">asyncFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&#x27;Async Hello world&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">asyncFunction</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//Async Hello world</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>这里使用了定时器来模拟异步过程，实际上其它异步过程（如 XHR）也大概都是这么个写法。</p>
<h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>Promise 对象共有三种状态：</p>
<ul>
<li>Fulfilled （成功）</li>
<li>Rejected （失败）</li>
<li>Pending （处理中）</li>
</ul>
<p>有两条转换路径：</p>
<ul>
<li>Pending -&gt; Fulfilled -&gt; <code>then</code>  call</li>
<li>Pending -&gt; Rejected -&gt; <code>catch</code>  call</li>
</ul>
<p>Promise 对象的状态，从 Pending 转换为 Fulfilled 或 Rejected 之后， <code>then</code>  方法或者 <code>catch</code>  方法就会被立即调用，并且这个 promise 对象的状态不会再发生任何变化。也就是说，调用且只调用一次。</p>
<h2 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h2><p>链式操作是 Promise 对象的一大亮点。</p>
<p>本节引用一些 <a href="https://github.com/azu/promises-book" target="_blank"><em>Promise Book</em></a> 的内容。</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">taskA</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Task A&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">taskB</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Task B&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onRejected</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Catch Error: A or B&quot;</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">finalTask</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Final Task&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">promise</span><br><span class="line">    .<span class="title function_">then</span>(taskA)</span><br><span class="line">    .<span class="title function_">then</span>(taskB)</span><br><span class="line">    .<span class="title function_">catch</span>(onRejected)</span><br><span class="line">    .<span class="title function_">then</span>(finalTask);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Task A</span></span><br><span class="line"><span class="comment">//Task B</span></span><br><span class="line"><span class="comment">//Final Task</span></span><br></pre></td></tr></table></figure>

<p>该代码块实际流程如图所示：</p>
<p><img src="https://static.wxsm.space/blog/48595808-41e73000-e991-11e8-8abe-199dae72c567.png"></p>
<p>&nbsp;</p>
<p>可以看到，这个 onRejected 并不仅仅是 TaskB 的失败处理函数，同时它也是 TaskA 的失败处理函数。而且当 TaskA 失败（reject 被调用或者抛出异常）时，TaskB 将不会被调用，直接进入失败处理。熟悉 express 的玩家应该能看出来了，这简直就和中间件一模一样嘛。</p>
<p>比如说，TaskA 出现异常：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">taskA</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Task A&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;throw Error @ Task A&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">taskB</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Task B&quot;</span>);<span class="comment">// 不会被调用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onRejected</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);<span class="comment">// =&gt; &quot;throw Error @ Task A&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">finalTask</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Final Task&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">promise</span><br><span class="line">    .<span class="title function_">then</span>(taskA)</span><br><span class="line">    .<span class="title function_">then</span>(taskB)</span><br><span class="line">    .<span class="title function_">catch</span>(onRejected)</span><br><span class="line">    .<span class="title function_">then</span>(finalTask);</span><br></pre></td></tr></table></figure>

<p>这里的输出应该就是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Task A</span></span><br><span class="line"><span class="comment">//Error: throw Error @ Task A</span></span><br><span class="line"><span class="comment">//Final Task</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，如果在 <code>onRejected</code>  或 <code>finalTask</code>  中出现异常，那么这个异常将不会再被捕捉到。因为并没有再继续注册 <code>catch</code>  函数。</p>
<p>借助 Promise 链式操作的特点，复杂的 JavaScript 回调简化将不再是梦。</p>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>Promise 可以实现递归调用，在用来一次性抓取所有分页内容的时候有用。例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">url, p</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> $.<span class="title function_">get</span>(url + <span class="string">&quot;?page=&quot;</span> + p)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span>(!data.<span class="property">list</span>.<span class="property">length</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> [];</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">get</span>(url, p+<span class="number">1</span>)</span><br><span class="line">              .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">nextList</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> [].<span class="title function_">concat</span>(data.<span class="property">list</span>, nextList);</span><br><span class="line">              &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">get</span>(<span class="string">&quot;urlurl&quot;</span>, <span class="number">1</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">list</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(list);<span class="comment">//your full list is here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="实用方法"><a href="#实用方法" class="headerlink" title="实用方法"></a>实用方法</h2><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h3><p><code>Promise.all</code>  接受一个 promise 对象的数组作为参数，当这个数组里的所有promise对象全部变为 resolve 或 reject 状态的时候，它才会去调用 <code>then</code>  方法。</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">taskA</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;TaskA resolved!&#x27;</span>);</span><br><span class="line">            <span class="title function_">resolve</span>();</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">taskB</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;TaskB resolved!&#x27;</span>);</span><br><span class="line">            <span class="title function_">resolve</span>();</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">taskA</span>(), <span class="title function_">taskB</span>()]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;All resolved!&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//TaskA resolved!</span></span><br><span class="line"><span class="comment">//TaskB resolved!</span></span><br><span class="line"><span class="comment">//All resolved!</span></span><br></pre></td></tr></table></figure>

<h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h3><p>跟 <code>Promise.all</code>  类似，略有区别，从名字就能看出来，只要有一个 Task 执行完毕，整个 Promise 就会返回。但是需要注意的是，返回以后并不会取消其它未完成的 Promise 的执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">taskA</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;TaskA resolved!&#x27;</span>);</span><br><span class="line">            <span class="title function_">resolve</span>();</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">taskB</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;TaskB resolved!&#x27;</span>);</span><br><span class="line">            <span class="title function_">resolve</span>();</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">race</span>([<span class="title function_">taskA</span>(), <span class="title function_">taskB</span>()]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;All resolved!&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//TaskA resolved!</span></span><br><span class="line"><span class="comment">//All resolved!</span></span><br><span class="line"><span class="comment">//TaskB resolved!</span></span><br></pre></td></tr></table></figure>

<h2 id="支持性"><a href="#支持性" class="headerlink" title="支持性"></a>支持性</h2><p>由于是 ES6 语法，目前在浏览器端支持不是特别好，很多移动端浏览器以及 IE 家族均不支持（具体可查看 MDN）。如果要在浏览器端使用需要借助 Babel 编译器。</p>
<p>至于 Node.js 环境则毫无问题。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JSX in Vue.js</title>
    <url>/2017/jsx-in-vuejs/</url>
    <content><![CDATA[<p>在基于 Webpack 的 Vue 项目中添加 JSX 支持：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yarn add babel-plugin-syntax-jsx babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props --dev</span><br></pre></td></tr></table></figure>

<p>各依赖的作用：</p>
<ul>
<li><code>babel-plugin-syntax-jsx</code> 提供基础的 JSX 语法转换</li>
<li><code>babel-plugin-transform-vue-jsx</code> 提供基于 Vue 的 JSX 特殊语法</li>
<li><code>babel-helper-vue-jsx-merge-props</code> 是可选的，提供对类似 <code>&lt;comp &#123;...props&#125;/&gt;</code> 写法的支持</li>
</ul>
<p>然后在 <code>.babelrc</code> 中，增加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;transform-vue-jsx&quot;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意如果有其它 env 也要如此加上 <code>transform-vue-jsx</code> 插件。</p>
<span id="more"></span>

<h2 id="Difference-from-React-JSX"><a href="#Difference-from-React-JSX" class="headerlink" title="Difference from React JSX"></a>Difference from React JSX</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">render (h) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">id</span>=<span class="string">&quot;foo&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">domPropsInnerHTML</span>=<span class="string">&quot;bar&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onClick</span>=<span class="string">&#123;this.clickHandler&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">nativeOnClick</span>=<span class="string">&#123;this.nativeClickHandler&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">class</span>=<span class="string">&#123;&#123;</span> <span class="attr">foo:</span> <span class="attr">true</span>, <span class="attr">bar:</span> <span class="attr">false</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27;, <span class="attr">fontSize:</span> &#x27;<span class="attr">14px</span>&#x27; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">key</span>=<span class="string">&quot;key&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">ref</span>=<span class="string">&quot;ref&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">refInFor</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">slot</span>=<span class="string">&quot;slot&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，事件绑定中，还有另外一个跟 react 不一样的地方：<code>onMouseEnter</code> 是不起作用的，只能写 <code>onMouseenter</code> 或者 <code>on-mouseenter</code>，以此类推。</p>
<h2 id="Vue-directives"><a href="#Vue-directives" class="headerlink" title="Vue directives"></a>Vue directives</h2><p>除了 <code>v-show</code> 以外，所有的内置指令都<strong>不能</strong>在 JSX 中工作。</p>
<p>自定义指令可以使用 <code>v-name=&#123;value&#125;</code> 的写法，但是这样会缺少修饰符以及参数。如果需要完整的指令功能，可以这么做：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> directives = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;my-dir&#x27;</span>, <span class="attr">value</span>: <span class="number">123</span>, <span class="attr">modifiers</span>: &#123; <span class="attr">abc</span>: <span class="literal">true</span> &#125; &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> &#123;<span class="attr">...</span>&#123; <span class="attr">directives</span> &#125;&#125;/&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>vue</tag>
        <tag>webpack</tag>
        <tag>jsx</tag>
      </tags>
  </entry>
  <entry>
    <title>代码的艺术：koa 源码精读</title>
    <url>/2019/koa-js-art-of-code/</url>
    <content><![CDATA[<p>Node.js 界大名鼎鼎的 <a href="https://github.com/koajs/koa">koa</a>，不需要多废话了，用了无数次，今天来拜读一下它的源码。</p>
<p>Koa 并不是 Node.js 的拓展，它只是在 Node.js 的基础上实现了以下内容：</p>
<ul>
<li>中间件式的 HTTP 服务框架 （与 Express 一致）</li>
<li>洋葱模型 （与 Express 不同）</li>
</ul>
<p>一统天下级别的框架，只包含了约 500 行源代码。极致强大，极致简单。大概这就是码农与码神的区别，真正的代码的艺术吧。</p>
<span id="more"></span>

<p>源码结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lib</span><br><span class="line">├── application.js</span><br><span class="line">├── context.js</span><br><span class="line">├── request.js</span><br><span class="line">└── response.js</span><br></pre></td></tr></table></figure>

<p>一共就这四个文件（当然，还包含了发布在 npm 上面的其它 package，后面会说到），一目了然。</p>
<ol>
<li><code>application.js</code> 是应用的入口，也就是 <code>require(&#39;koa&#39;)</code> 所得到的东西。它是一个继承自 <a href="https://nodejs.org/dist/latest-v11.x/docs/api/events.html">events</a> 的 Class</li>
<li><code>context.js</code> 就是对应每一个 req &#x2F; res 的 ctx</li>
<li><code>request.js</code> &#x2F; <code>response.js</code> 就不用说了</li>
</ol>
<p>下面从最基础的看起。</p>
<h2 id="request-js"><a href="#request-js" class="headerlink" title="request.js"></a>request.js</h2><p><code>request.js</code> 大概的样子如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// request.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">header</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">req</span>.<span class="property">headers</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">header</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">req</span>.<span class="property">headers</span> = val;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">headers</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">req</span>.<span class="property">headers</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">headers</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">req</span>.<span class="property">headers</span> = val;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 其它 getter &amp; setter......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的 <code>this.req</code> 实际上是 <a href="https://nodejs.org/dist/latest-v11.x/docs/api/http.html">http.IncomingMessage</a>，创建的时候传入的，后面会提到。</p>
<p>这个文件绝大多数是 helper 方法，把本来已经存在在 <code>http.IncomingMessage</code> 中的属性通过更方便的方式（<code>getter</code> &#x2F; <code>setter</code>）来存取，以达到通过同一个属性来读写的目的。比如想要获取一个 request 的 header 时，通过 <code>ctx.request.heder</code>，而想写入 header 时，可以通过 <code>ctx.request.heder = xxx</code> 来实现。这也是 koa 的友好特性之一。</p>
<p>其中有一个特殊的是 <code>ip</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// request.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IP</span> = <span class="title class_">Symbol</span>(<span class="string">&#x27;context#ip&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">ip</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>[<span class="variable constant_">IP</span>]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>[<span class="variable constant_">IP</span>] = <span class="variable language_">this</span>.<span class="property">ips</span>[<span class="number">0</span>] || <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">remoteAddress</span> || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>[<span class="variable constant_">IP</span>];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">ip</span>(<span class="params">_ip</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="variable constant_">IP</span>] = _ip;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Symbol(&#39;context#ip&#39;)</code> 是 <code>request</code> 对象唯一一个来自自身的 key，我猜测它的目的是：</p>
<ol>
<li>允许开发者对真实请求 ip 进行改写</li>
<li>同时利用 Symbol 不等于任何值的特性，使它成为私有属性，对外不可见，只可通过 getter 获取</li>
</ol>
<h2 id="response-js"><a href="#response-js" class="headerlink" title="response.js"></a>response.js</h2><p><code>response.js</code> 与 <code>request.js</code> 类似，不同之处在于，<code>response.js</code> 重点更多在 <code>setter</code> 上面，很好理解，因为 response 的重点是一个服务器向用户返回内容的过程。</p>
<p>koa 的一大特性是在于，只需要向 <code>ctx.response.body</code> 赋值就能完成一次请求响应。代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">body</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_body</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">body</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> original = <span class="variable language_">this</span>.<span class="property">_body</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_body</span> = val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// no content</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == val) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!statuses.<span class="property">empty</span>[<span class="variable language_">this</span>.<span class="property">status</span>]) <span class="variable language_">this</span>.<span class="property">status</span> = <span class="number">204</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">remove</span>(<span class="string">&#x27;Content-Type&#x27;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">remove</span>(<span class="string">&#x27;Content-Length&#x27;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">remove</span>(<span class="string">&#x27;Transfer-Encoding&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set the status</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_explicitStatus</span>) <span class="variable language_">this</span>.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set the content-type only if not yet set</span></span><br><span class="line">    <span class="keyword">const</span> setType = !<span class="variable language_">this</span>.<span class="property">header</span>[<span class="string">&#x27;content-type&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// string</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;string&#x27;</span> == <span class="keyword">typeof</span> val) &#123;</span><br><span class="line">      <span class="keyword">if</span> (setType) <span class="variable language_">this</span>.<span class="property">type</span> = <span class="regexp">/^\s*&lt;/</span>.<span class="title function_">test</span>(val) ? <span class="string">&#x27;html&#x27;</span> : <span class="string">&#x27;text&#x27;</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">length</span> = <span class="title class_">Buffer</span>.<span class="title function_">byteLength</span>(val);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// buffer</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Buffer</span>.<span class="title function_">isBuffer</span>(val)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (setType) <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;bin&#x27;</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">length</span> = val.<span class="property">length</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stream</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;function&#x27;</span> == <span class="keyword">typeof</span> val.<span class="property">pipe</span>) &#123;</span><br><span class="line">      <span class="title function_">onFinish</span>(<span class="variable language_">this</span>.<span class="property">res</span>, destroy.<span class="title function_">bind</span>(<span class="literal">null</span>, val));</span><br><span class="line">      <span class="title function_">ensureErrorHandler</span>(val, <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">onerror</span>(err));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// overwriting</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="literal">null</span> != original &amp;&amp; original != val) <span class="variable language_">this</span>.<span class="title function_">remove</span>(<span class="string">&#x27;Content-Length&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (setType) <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;bin&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// json</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">remove</span>(<span class="string">&#x27;Content-Length&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，在 body 的 setter 里面，分别对传入的值为 null &#x2F; string &#x2F; buffer &#x2F; stream &#x2F; json 的情况进行了处理，并完成了向客户端返回的其它逻辑（设置各种响应头以及状态码），以达到上述目的。</p>
<p>为了达到「至简」目的，koa 对外暴露的 API 基本都是通过 getter &#x2F; setter 的方式实现的，值得借鉴。</p>
<h2 id="context-js"><a href="#context-js" class="headerlink" title="context.js"></a>context.js</h2><p>Context 「上下文」（通常简写为 ctx）是 koa 的核心之一，它代表了一次用户请求，每个请求都对应着一个独立的 context，实际上它就是 <code>request</code> 与 <code>response</code> 的结合体，通过「委托模式」实现。它的作用是，开发者对于每一个请求，只需要拿到它的 ctx，就能获取到所有请求的相关信息，亦能做出任何形式的响应。</p>
<p>它的核心代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> delegate = <span class="built_in">require</span>(<span class="string">&#x27;delegates&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Cookies</span> = <span class="built_in">require</span>(<span class="string">&#x27;cookies&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">COOKIES</span> = <span class="title class_">Symbol</span>(<span class="string">&#x27;context#cookies&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proto = <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">cookies</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>[<span class="variable constant_">COOKIES</span>]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>[<span class="variable constant_">COOKIES</span>] = <span class="keyword">new</span> <span class="title class_">Cookies</span>(<span class="variable language_">this</span>.<span class="property">req</span>, <span class="variable language_">this</span>.<span class="property">res</span>, &#123;</span><br><span class="line">        <span class="attr">keys</span>: <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">keys</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="variable language_">this</span>.<span class="property">request</span>.<span class="property">secure</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>[<span class="variable constant_">COOKIES</span>];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">cookies</span>(<span class="params">_cookies</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="variable constant_">COOKIES</span>] = _cookies;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">delegate</span>(proto, <span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;attachment&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;redirect&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;remove&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;vary&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;set&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;append&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;flushHeaders&#x27;</span>)</span><br><span class="line">  .<span class="title function_">access</span>(<span class="string">&#x27;status&#x27;</span>)</span><br><span class="line">  .<span class="title function_">access</span>(<span class="string">&#x27;message&#x27;</span>)</span><br><span class="line">  .<span class="title function_">access</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .<span class="title function_">access</span>(<span class="string">&#x27;length&#x27;</span>)</span><br><span class="line">  .<span class="title function_">access</span>(<span class="string">&#x27;type&#x27;</span>)</span><br><span class="line">  .<span class="title function_">access</span>(<span class="string">&#x27;lastModified&#x27;</span>)</span><br><span class="line">  .<span class="title function_">access</span>(<span class="string">&#x27;etag&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getter</span>(<span class="string">&#x27;headerSent&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getter</span>(<span class="string">&#x27;writable&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">delegate</span>(proto, <span class="string">&#x27;request&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;acceptsLanguages&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;acceptsEncodings&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;acceptsCharsets&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;accepts&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;is&#x27;</span>)</span><br><span class="line">  .<span class="title function_">access</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line">  .<span class="title function_">access</span>(<span class="string">&#x27;idempotent&#x27;</span>)</span><br><span class="line">  .<span class="title function_">access</span>(<span class="string">&#x27;socket&#x27;</span>)</span><br><span class="line">  .<span class="title function_">access</span>(<span class="string">&#x27;search&#x27;</span>)</span><br><span class="line">  .<span class="title function_">access</span>(<span class="string">&#x27;method&#x27;</span>)</span><br><span class="line">  .<span class="title function_">access</span>(<span class="string">&#x27;query&#x27;</span>)</span><br><span class="line">  .<span class="title function_">access</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">  .<span class="title function_">access</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">  .<span class="title function_">access</span>(<span class="string">&#x27;accept&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getter</span>(<span class="string">&#x27;origin&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getter</span>(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getter</span>(<span class="string">&#x27;subdomains&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getter</span>(<span class="string">&#x27;protocol&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getter</span>(<span class="string">&#x27;host&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getter</span>(<span class="string">&#x27;hostname&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getter</span>(<span class="string">&#x27;URL&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getter</span>(<span class="string">&#x27;header&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getter</span>(<span class="string">&#x27;headers&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getter</span>(<span class="string">&#x27;secure&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getter</span>(<span class="string">&#x27;stale&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getter</span>(<span class="string">&#x27;fresh&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getter</span>(<span class="string">&#x27;ips&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getter</span>(<span class="string">&#x27;ip&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>可以看到里面的主要内容有：</p>
<ol>
<li>实现 Cookies 的 getter &#x2F; setter（因为 koa 把 req 和 res 的 cookies 结合在一起了，所以它须要在 ctx 内实现）</li>
<li>将 request &#x2F; response 的逻辑代理到 ctx 上面</li>
</ol>
<p>关于这个「委托模式」的具体实现，TJ 把它放到了一个独立的 NPM Package <a href="https://github.com/tj/node-delegates">delegates</a> 中。它的功能是：将一个类的子类中的方法与属性，暴露到父类中去，而暴露在父类上的方法可以看做真实方法的「代理」。koa 使用了其中的三种模式，分别是：</p>
<ol>
<li><code>method</code> 代理方法</li>
<li><code>access</code> 代理 getter 与 setter</li>
<li><code>getter</code> 仅代理 getter</li>
</ol>
<p>其主要源码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Delegator</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Delegator</span>(<span class="params">proto, target</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Delegator</span>)) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Delegator</span>(proto, target);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">proto</span> = proto;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">target</span> = target;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">methods</span> = [];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getters</span> = [];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">setters</span> = [];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">fluents</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Delegator</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">method</span> = <span class="keyword">function</span>(<span class="params">name</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> proto = <span class="variable language_">this</span>.<span class="property">proto</span>;</span><br><span class="line">  <span class="keyword">var</span> target = <span class="variable language_">this</span>.<span class="property">target</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">methods</span>.<span class="title function_">push</span>(name);</span><br><span class="line"></span><br><span class="line">  proto[name] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>[target][name].<span class="title function_">apply</span>(<span class="variable language_">this</span>[target], <span class="variable language_">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Delegator</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">access</span> = <span class="keyword">function</span>(<span class="params">name</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getter</span>(name).<span class="title function_">setter</span>(name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Delegator</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getter</span> = <span class="keyword">function</span>(<span class="params">name</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> proto = <span class="variable language_">this</span>.<span class="property">proto</span>;</span><br><span class="line">  <span class="keyword">var</span> target = <span class="variable language_">this</span>.<span class="property">target</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getters</span>.<span class="title function_">push</span>(name);</span><br><span class="line"></span><br><span class="line">  proto.<span class="title function_">__defineGetter__</span>(name, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>[target][name];</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Delegator</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setter</span> = <span class="keyword">function</span>(<span class="params">name</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> proto = <span class="variable language_">this</span>.<span class="property">proto</span>;</span><br><span class="line">  <span class="keyword">var</span> target = <span class="variable language_">this</span>.<span class="property">target</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">setters</span>.<span class="title function_">push</span>(name);</span><br><span class="line"></span><br><span class="line">  proto.<span class="title function_">__defineSetter__</span>(name, <span class="keyword">function</span>(<span class="params">val</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>[target][name] = val;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>依然非常简洁。method 代理使用 <code>Function.apply</code> 实现，getter &#x2F; setter 代理使用 <code>object.__defineGetter__</code> 与 <code>object.__defineSetter__</code> 实现。</p>
<h2 id="application-js"><a href="#application-js" class="headerlink" title="application.js"></a>application.js</h2><p>去除兼容、校验、实用方法等逻辑，精简过后，该文件的主要内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> onFinished = <span class="built_in">require</span>(<span class="string">&#x27;on-finished&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> response = <span class="built_in">require</span>(<span class="string">&#x27;./response&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> compose = <span class="built_in">require</span>(<span class="string">&#x27;koa-compose&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> context = <span class="built_in">require</span>(<span class="string">&#x27;./context&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;./request&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Emitter</span> = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Expose `Application` class.</span></span><br><span class="line"><span class="comment"> * Inherits from `Emitter.prototype`.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> <span class="title class_">Application</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Emitter</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">middleware</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(context);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">request</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(request);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">response</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(response);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">listen</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="variable language_">this</span>.<span class="title function_">callback</span>());</span><br><span class="line">    <span class="keyword">return</span> server.<span class="title function_">listen</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">use</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">middleware</span>.<span class="title function_">push</span>(fn);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">callback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> fn = <span class="title function_">compose</span>(<span class="variable language_">this</span>.<span class="property">middleware</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleRequest</span> = (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="title function_">createContext</span>(req, res);</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">handleRequest</span>(ctx, fn);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> handleRequest;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleRequest</span>(<span class="params">ctx, fnMiddleware</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = ctx.<span class="property">res</span>;</span><br><span class="line">    res.<span class="property">statusCode</span> = <span class="number">404</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onerror</span> = err =&gt; ctx.<span class="title function_">onerror</span>(err);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleResponse</span> = (<span class="params"></span>) =&gt; <span class="title function_">respond</span>(ctx);</span><br><span class="line">    <span class="title function_">onFinished</span>(res, onerror);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fnMiddleware</span>(ctx).<span class="title function_">then</span>(handleResponse).<span class="title function_">catch</span>(onerror);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">createContext</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">context</span>);</span><br><span class="line">    <span class="keyword">const</span> request = context.<span class="property">request</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">request</span>);</span><br><span class="line">    <span class="keyword">const</span> response = context.<span class="property">response</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">response</span>);</span><br><span class="line">    context.<span class="property">app</span> = request.<span class="property">app</span> = response.<span class="property">app</span> = <span class="variable language_">this</span>;</span><br><span class="line">    context.<span class="property">req</span> = request.<span class="property">req</span> = response.<span class="property">req</span> = req;</span><br><span class="line">    context.<span class="property">res</span> = request.<span class="property">res</span> = response.<span class="property">res</span> = res;</span><br><span class="line">    request.<span class="property">ctx</span> = response.<span class="property">ctx</span> = context;</span><br><span class="line">    request.<span class="property">response</span> = response;</span><br><span class="line">    response.<span class="property">request</span> = request;</span><br><span class="line">    context.<span class="property">originalUrl</span> = request.<span class="property">originalUrl</span> = req.<span class="property">url</span>;</span><br><span class="line">    context.<span class="property">state</span> = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onerror</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(err <span class="keyword">instanceof</span> <span class="title class_">Error</span>)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(util.<span class="title function_">format</span>(<span class="string">&#x27;non-error thrown: %j&#x27;</span>, err));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">404</span> == err.<span class="property">status</span> || err.<span class="property">expose</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">silent</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> msg = err.<span class="property">stack</span> || err.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(msg.<span class="title function_">replace</span>(<span class="regexp">/^/gm</span>, <span class="string">&#x27;  &#x27;</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>不到一百行，Koa 主要功能已经全在里面了。</p>
<p>现在可以梳理一下当我们创建一个 koa 服务器的时候，实际上都干了些什么吧：</p>
<ol>
<li>调用 <code>constructor</code>，初始化 ctx &#x2F; req &#x2F; res，以及最重要的 <code>middleware</code> 数组（不过不理解的是，为什么命名没有加 s 呢？）</li>
<li>对于各种业务场景，调用 <code>app.use</code>，这一步只是一个简单的向 <code>middleware</code> 数组 push 的过程</li>
<li>调用 <code>app.listen</code>，启动 HTTP 服务器</li>
<li>对于每一个进来的请求，调用 <code>callback</code> 方法，这个方法做了三件事：<ol>
<li>通过 <code>koa-compose</code> 将中间件数组组合为一个「洋葱」模型</li>
<li>调用 <code>createContext</code> 方法，为请求创建 ctx 上下文，同时挂载 req &#x2F; res</li>
<li>调用 <code>handleRequest</code> 方法，按洋葱模型的顺序执行中间件，并最终返回或报错</li>
</ol>
</li>
</ol>
<p>这里面最重要的一步就是「洋葱」模型的构建。实际上这个过程也非常简单，以下是 <code>koa-compose</code> 的源码（为了精简，已去除校验等逻辑）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span> (middleware) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">context, next</span>) &#123;</span><br><span class="line">    <span class="comment">// last called middleware #</span></span><br><span class="line">    <span class="keyword">let</span> index = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dispatch</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dispatch</span> (i) &#123;</span><br><span class="line">      index = i</span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">      <span class="keyword">if</span> (i === middleware.<span class="property">length</span>) fn = next</span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">fn</span>(context, dispatch.<span class="title function_">bind</span>(<span class="literal">null</span>, i + <span class="number">1</span>)));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它是一个递归：</p>
<ol>
<li>首先约定，每一个 middleware 都是一个 async 函数（即 Promise），接受两个参数 <code>ctx</code> 与 <code>next</code></li>
<li>当 middleware 内部调用 next 函数时，实际上是递归调用了 <code>dispatch.bind(null, i + 1)</code> 函数，也就是，将 <code>index + 1</code> 的中间件取出来并执行了。因为中间件都是 Promise，所以能够被 await</li>
<li>递归执行步骤 2，直到调用到最后一个 middleware 时，最后被调用的 middleware 会最先结束，然后到上一个，再到上上一个，如此往复就形成了「洋葱」模型</li>
<li>最终所有 middleware 都执行完毕，compose 函数返回 <code>Promise.resolve()</code>，即退出递归</li>
</ol>
<p>「洋葱」模型构建完毕后，<code>compose</code> 函数返回一个 Promise，所有 middleware 都已经被有序串联，只需要直接执行该 promise 实例即可。</p>
<p>让人不禁感叹：<strong>大道至简</strong>。</p>
<h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><p>至此，koa 的最主要的功能实现都已过了一遍了。</p>
<p>总结一下它做了的事情：</p>
<ol>
<li>通过 <code>getter</code> &#x2F; <code>setter</code> 方法简化 Node.js HTTP 的使用方式</li>
<li>通过 <code>ctx</code> 简化开发者访问 req &#x2F; res 的方式</li>
<li>通过「洋葱」模型简化 HTTP 请求的处理流程</li>
</ol>
<p>大概就这样。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>koa</tag>
      </tags>
  </entry>
  <entry>
    <title>Koa Note</title>
    <url>/2017/koa-note/</url>
    <content><![CDATA[<blockquote>
<p>Koa是一个类似于 Express 的 Web 开发框架，创始人也是同一个人。它的主要特点是，使用了 ES6 的 Generator 函数，进行了架构的重新设计。也就是说，Koa的原理和内部结构很像 Express，但是语法和内部结构进行了升级。</p>
<p>—— <cite>阮一峰博客</cite></p>
</blockquote>
<p><strong>想要达到使用 Koa2 的完整体验，需要将 Node 版本升级到 v7.6+ 以支持 async 语法。</strong></p>
<p><strong>为什么是 Koa 而不是 Express 4.0？</strong></p>
<p>因为 Generator 带来的改动太大了，相当于推倒重来。</p>
<p><strong>以下内容基于 Koa2</strong></p>
<span id="more"></span>

<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>一个 Koa Application（以下简称 app）由一系列 generator 中间件组成。按照编码顺序在栈内依次执行，从这个角度来看，Koa app 和其他中间件系统（比如 Ruby Rack 或者 Connect &#x2F; Express ）没有什么太大差别。</p>
<p>简单的 Hello World 应用程序:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// response</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;Hello Koa&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="级联代码"><a href="#级联代码" class="headerlink" title="级联代码"></a>级联代码</h2><p>Koa 中间件以一种非常传统的方式级联起来。</p>
<p>在以往的 Node 开发中，频繁使用回调不太便于展示复杂的代码逻辑，在 Koa 中，我们可以写出真正具有表现力的中间件。与 Connect 实现中间件的方法相对比，Koa 的做法不是简单的将控制权依次移交给一个又一个的中间件直到程序结束，而有点像“穿越一只洋葱”。</p>
<p><img src="https://camo.githubusercontent.com/d80cf3b511ef4898bcde9a464de491fa15a50d06/68747470733a2f2f7261772e6769746875622e636f6d2f66656e676d6b322f6b6f612d67756964652f6d61737465722f6f6e696f6e2e706e67" alt="图示 Koa 中间件级联"></p>
<p>下边这个例子展现了使用这一特殊方法书写的 Hello World 范例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// x-response-time</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">ctx, next</span>) &#123;</span><br><span class="line">  <span class="comment">// (1) 进入路由</span></span><br><span class="line">  <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="comment">// (5) 再次进入 x-response-time 中间件，记录2次通过此中间件「穿越」的时间</span></span><br><span class="line">  <span class="keyword">const</span> ms = <span class="keyword">new</span> <span class="title class_">Date</span>() - start;</span><br><span class="line">  <span class="comment">// (6) 返回 this.body</span></span><br><span class="line">  ctx.<span class="title function_">set</span>(<span class="string">&#x27;X-Response-Time&#x27;</span>, <span class="string">`<span class="subst">$&#123;ms&#125;</span>ms`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// logger</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">ctx, next</span>) &#123;</span><br><span class="line">  <span class="comment">// (2) 进入 logger 中间件</span></span><br><span class="line">  <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="comment">// (4) 再次进入 logger 中间件，记录2次通过此中间件「穿越」的时间</span></span><br><span class="line">  <span class="keyword">const</span> ms = <span class="keyword">new</span> <span class="title class_">Date</span>() - start;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;ctx.method&#125;</span> <span class="subst">$&#123;ctx.url&#125;</span> - <span class="subst">$&#123;ms&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// response</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// (3) 进入 response 中间件</span></span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>也许刚从 Express 过来的同学会一脸懵逼，实际上我们可以把它想象成这样的一个流程（类似 LESS 代码）：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.x-response-time</span> &#123;</span><br><span class="line">  <span class="comment">// (1) do some stuff</span></span><br><span class="line">  <span class="selector-class">.logger</span> &#123;</span><br><span class="line">    <span class="comment">// (2) do some other stuff</span></span><br><span class="line">    <span class="selector-class">.response</span> &#123;</span><br><span class="line">      <span class="comment">// (3) NO next yield !</span></span><br><span class="line">      <span class="comment">// this.body = &#x27;hello world&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// (4) do some other stuff later</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// (5) do some stuff lastest and return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这便是 Koa 中间件的一大特色了。另一点也能在例子中找到：即 Koa 支持 <code>async</code> 以及 <code>await</code> 语法，可以在中间件中进行任意方式的使用（比如 await mongoose 操作），这样对比起来 Express 其优点就十分明显了。</p>
<h2 id="常用的中间件"><a href="#常用的中间件" class="headerlink" title="常用的中间件"></a>常用的中间件</h2><ul>
<li><a href="https://www.npmjs.com/package/koa-bodyparser">koa-bodyparser</a></li>
<li><a href="https://www.npmjs.com/package/koa-favicon">koa-favicon</a></li>
<li><a href="https://www.npmjs.com/package/koa-helmet">koa-helmet</a></li>
<li><a href="https://www.npmjs.com/package/koa-lusca">koa-lusca</a></li>
<li><a href="https://www.npmjs.com/package/koa-morgan">koa-morgan</a></li>
<li><a href="https://www.npmjs.com/package/koa-multer">koa-multer</a></li>
<li><a href="https://www.npmjs.com/package/koa-passport">koa-passport</a></li>
<li><a href="https://www.npmjs.com/package/koa-router">koa-router</a></li>
<li><a href="https://www.npmjs.com/package/koa-session">koa-session</a></li>
<li><a href="https://www.npmjs.com/package/koa-static-cache">koa-static-cache</a></li>
</ul>
<p>（等等）</p>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>除非 <code>app.silent</code> 被设置为 <code>true</code>，否则所有 error 都会被输出到 <code>stderr</code>，并且默认的 error handler 不会输出 <code>err.status === 404 || err.expose === true</code> 的错误。可以自定义「错误事件」来监听 Koa app 中发生的错误，比如一个简单的例子：记录错误日志</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span></span><br><span class="line">  log.<span class="title function_">error</span>(<span class="string">&#x27;server error&#x27;</span>, err)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="应用上下文"><a href="#应用上下文" class="headerlink" title="应用上下文"></a>应用上下文</h2><p>Koa 的上下文（Context）将 request 与 response 对象封装至一个对象中，并提供了一些帮助开发者编写业务逻辑的方法。</p>
<p>每个 request 会创建一个 Context，并且向中间件中传引用值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx; <span class="comment">// is the Context</span></span><br><span class="line">  ctx.<span class="property">request</span>; <span class="comment">// is a koa Request</span></span><br><span class="line">  ctx.<span class="property">response</span>; <span class="comment">// is a koa Response</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>需要注意的是，挂载在 Context 对象上的并不是 Node.js 原生的 Response 和 Request 对象，而是经过 Koa 封装过的。Koa 提供另外的方法来访问原生对象，但是并不建议这么做！</strong></p>
<p>为了使用方便，许多上下文属性和方法都被委托代理到他们的 <code>ctx.request</code> 或 <code>ctx.response</code>，比如访问 <code>ctx.type</code> 和 <code>ctx.length</code> 将被代理到 <code>response</code> 对象，<code>ctx.path</code> 和 <code>ctx.method</code> 将被代理到 <code>request</code> 对象。</p>
]]></content>
      <tags>
        <tag>nodejs</tag>
        <tag>koa</tag>
      </tags>
  </entry>
  <entry>
    <title>Limit Prerender Plugin Workers By Webpack</title>
    <url>/2017/limit-prerender-plugin-workers-by-webpack/</url>
    <content><![CDATA[<p><a href="https://github.com/chrisvfritz/prerender-spa-plugin">Prerender SPA Plugin</a> 是一个可以将 Vue 页面预渲染为静态 HTML 的 webpack 插件，对静态小站（比如博客）来说很棒棒。但是最近用的时候总发现一个问题：它的 build 失败率越来越高，尤其是在 CI 上。后来在其 repo 的一个 <a href="https://github.com/chrisvfritz/prerender-spa-plugin/issues/53">issue</a> 中发现了问题所在，就是它没有限制 PhantomJS workers 的数量，导致页面一多就直接全部卡死不动，然后超时。</p>
<blockquote>
<p>(Workers) Default is as many workers as routes.</p>
</blockquote>
<p>虽然有人已经发了 <a href="https://github.com/chrisvfritz/prerender-spa-plugin/pull/55">PR</a> 来修复这个问题，然而好几个月过去了也没有 merge，不知道是什么情况。于是我在自己的尝试中找到了一种可以接受的解决方案：虽然我不能限制你插件 workers 的数量，但是可以限制每个插件渲染的 route 数量呀。</p>
<span id="more"></span>

<p>具体思路就是：</p>
<ol>
<li>将所有的 route chunk 成小组，比如 10 个一组</li>
<li>针对每一个 chunk 创建一个 prerender 插件</li>
<li>将所有插件都加入到 webpack plugin 中去</li>
</ol>
<p>这样一来，就可以保证每个 plugin 最多同时创建 10 个 worker，全部渲染完成后再由下一个 plugin 接着工作。</p>
<p>简单的代码示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Generate url list for pre-render</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">generateRenderPlugins</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> paths = [] <span class="comment">// the routes</span></span><br><span class="line">  <span class="keyword">let</span> chunks = _.<span class="title function_">chunk</span>(paths, <span class="number">10</span>) <span class="comment">// using lodash.chunk</span></span><br><span class="line">  <span class="keyword">let</span> plugins = []</span><br><span class="line">  <span class="keyword">let</span> distPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../dist&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> progress = <span class="number">0</span></span><br><span class="line">  chunks.<span class="title function_">forEach</span>(<span class="function"><span class="params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">    plugins.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">PrerenderSpaPlugin</span>(distPath, chunk, &#123;</span><br><span class="line">        postProcessHtml (context) &#123;</span><br><span class="line">          <span class="comment">// need to log something after each route finish</span></span><br><span class="line">          <span class="comment">// or CI will fail if no log for 10 mins</span></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[PRE-RENDER] (<span class="subst">$&#123;++progress&#125;</span> / <span class="subst">$&#123;paths.length&#125;</span>) <span class="subst">$&#123;context.route&#125;</span>`</span>)</span><br><span class="line">          <span class="keyword">return</span> context.<span class="property">html</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ))</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> plugins</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>vue</tag>
        <tag>ssr</tag>
        <tag>devops</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 学习笔记</title>
    <url>/2021/learn-golang/</url>
    <content><![CDATA[<p>我的 golang 学习笔记。好几年前就说要学了，现在终于兑现。</p>
<span id="more"></span>


<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://studygolang.com/dl">https://studygolang.com/dl</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go version</span><br><span class="line">go <span class="built_in">env</span></span><br></pre></td></tr></table></figure>

<h3 id="国内镜像"><a href="#国内镜像" class="headerlink" title="国内镜像"></a>国内镜像</h3><p><a href="https://goproxy.cn/">https://goproxy.cn/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">env</span> -w GO111MODULE=on</span><br><span class="line">go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure>

<h3 id="goimports"><a href="#goimports" class="headerlink" title="goimports"></a>goimports</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get -v golang.org/x/tools/cmd/goimports</span><br></pre></td></tr></table></figure>

<h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><ul>
<li>IDEA 安装 go 和 file watcher 插件</li>
<li>新建项目使用 goimports 模板</li>
<li>filewather 增加 goimports，配置默认</li>
<li>快速生成变量快捷键：ctrl+alt+v</li>
</ul>
<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><ul>
<li>变量类型写在后面，名字写在前面，形似 typescript</li>
<li>类型可以推断</li>
<li>没有 <code>char</code>，只有 <code>rune</code></li>
<li>原生支持复数类型</li>
</ul>
<h4 id="var"><a href="#var" class="headerlink" title="var"></a><code>var</code></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a ,b, c <span class="type">bool</span></span><br><span class="line"><span class="keyword">var</span> s1, s2 <span class="type">string</span> = <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可放在包内或函数内</li>
<li>可以用 var() 集中定义变量</li>
<li>类型可以自动推断</li>
</ul>
<h4 id=""><a href="#" class="headerlink" title=":="></a><code>:=</code></h4><p>只能在函数内使用</p>
<h3 id="内建变量类型"><a href="#内建变量类型" class="headerlink" title="内建变量类型"></a>内建变量类型</h3><ul>
<li><code>bool</code>, <code>string</code></li>
<li><code>(u)int</code>, <code>(u)int8</code>, … <code>(u)int64</code>, <code>uintptr</code> （指针）</li>
<li><code>byte</code>, <code>rune</code> (char)</li>
<li><code>float32</code>, <code>float64</code>, <code>complex64</code>, <code>complex128</code> （复数）</li>
</ul>
<p>类型转换是强制的，没有隐式转换。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c <span class="type">int</span> = <span class="type">int</span>(math.Sqrt(<span class="type">float64</span>(a*a + b*b)))</span><br></pre></td></tr></table></figure>

<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><h4 id="const"><a href="#const" class="headerlink" title="const"></a><code>const</code></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> filename = <span class="string">&quot;abc.txt&quot;</span></span><br></pre></td></tr></table></figure>

<p>常量数值可以作为各种类型使用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a, b     = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> c <span class="type">int</span> = <span class="type">int</span>(math.Sqrt(a*a + b*b))</span><br></pre></td></tr></table></figure>

<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><ul>
<li>用 const 定义枚举。</li>
<li>可以是固定值，也可以用 <code>iota</code> 自增。<code>iota</code> 可以参与运算。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    b = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">    kb</span><br><span class="line">    mb</span><br><span class="line">    gb</span><br><span class="line">    tb</span><br><span class="line">    pb</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a><code>if</code></h4><ul>
<li><code>if</code> <strong>不需要</strong>括号</li>
<li>条件内可以定义变量，变量的作用域局限于 <code>if</code> 内</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> filename = <span class="string">&quot;abc.txt&quot;</span></span><br><span class="line"><span class="keyword">if</span> contents, err := ioutil.ReadFile(filename); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, contents)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a><code>switch</code></h4><ul>
<li><code>switch</code> **默认 <code>break</code>**，除非加 <code>fallthrough</code></li>
<li><code>switch</code> 可以没有表达式，条件写在 <code>case</code> 内</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">grade</span><span class="params">(score <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    g := <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> score &lt; <span class="number">0</span> || score &gt; <span class="number">100</span>:</span><br><span class="line">        <span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;Wrong score: %d&quot;</span>, score))</span><br><span class="line">    <span class="keyword">case</span> score &lt; <span class="number">60</span>:</span><br><span class="line">        g = <span class="string">&quot;F&quot;</span></span><br><span class="line">    <span class="keyword">case</span> score &lt; <span class="number">80</span>:</span><br><span class="line">        g = <span class="string">&quot;C&quot;</span></span><br><span class="line">    <span class="keyword">case</span> score &lt; <span class="number">90</span>:</span><br><span class="line">        g = <span class="string">&quot;B&quot;</span></span><br><span class="line">    <span class="keyword">case</span> score &lt;= <span class="number">100</span>:</span><br><span class="line">        g = <span class="string">&quot;A&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="for"><a href="#for" class="headerlink" title="for"></a><code>for</code></h4><ul>
<li><code>for</code> <strong>不需要</strong>括号</li>
<li><code>for</code> 可以省略初始条件（相当于 <code>while</code>）、结束条件、递增表达式</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> n := <span class="number">100</span> ; n &gt; <span class="number">0</span>; n /= <span class="number">2</span> &#123;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">    fmt.Println(scanner.Text())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul>
<li>返回值类型写在最后面（类似 typescript）</li>
<li>函数可以返回多个值（一般用法为第二个参数返回 error）</li>
<li>函数返回多个值时可以起名</li>
<li>函数可以作为参数</li>
<li>有可变参数列表</li>
<li>有匿名函数</li>
<li>没有默认参数、可选参数、函数重载等</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">eval</span><span class="params">(a, b <span class="type">int</span>, op <span class="type">string</span>)</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> op &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> a + b, <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> a - b, <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> a * b, <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">        q, _ := div(a, b)</span><br><span class="line">        <span class="keyword">return</span> q, <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, fmt.Errorf(<span class="string">&quot;unsupported operation: %s&quot;</span>, op)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">div</span><span class="params">(a, b <span class="type">int</span>)</span></span> (q, r <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a / b, a % b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(numbers ...<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    s := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> numbers &#123;</span><br><span class="line">        s += numbers[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">apply</span><span class="params">(op <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>, a, b <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">    p := reflect.ValueOf(op).Pointer()</span><br><span class="line">    opName := runtime.FuncForPC(p).Name()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Calling func %s with args (%d, %d)\n&quot;</span>, opName, a, b)</span><br><span class="line">    <span class="keyword">return</span> op(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(apply(<span class="function"><span class="keyword">func</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">int</span>(math.Pow(<span class="type">float64</span>(a), <span class="type">float64</span>(b)))</span><br><span class="line">&#125;, <span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>

<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><ul>
<li>go 指针<strong>不能</strong>运算</li>
<li>相比于其它语言的基础类型值传递、复杂类型引用传递，go 语言<strong>只能进行值传递</strong>，引用传递要显式声明</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(a, b *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    *b, *a = *a, *b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swap(&amp;a, &amp;b)</span><br></pre></td></tr></table></figure>

<p><img src="/2021/learn-golang/image2.png"></p>
<p><img src="/2021/learn-golang/image3.png"></p>
<h2 id="内建容器"><a href="#内建容器" class="headerlink" title="内建容器"></a>内建容器</h2><h3 id="Array-数组"><a href="#Array-数组" class="headerlink" title="Array 数组"></a>Array 数组</h3><ul>
<li><code>[10]int</code> 和 <code>[20]int</code> 是<strong>不同</strong>的类型</li>
<li>数组传入函数中的是<strong>值</strong>，不是引用，值会进行拷贝</li>
<li>go 语言中一般不直接使用数组，而是使用 slice 切片</li>
</ul>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>数量写在类型前</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">arr2 := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">arr3 := [...]<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> grid [<span class="number">4</span>][<span class="number">5</span>]<span class="type">int</span></span><br></pre></td></tr></table></figure>

<h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr3); i++ &#123;</span><br><span class="line">    fmt.Println(arr3[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> arr3 &#123;</span><br><span class="line">    fmt.Println(i, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Slice-切片"><a href="#Slice-切片" class="headerlink" title="Slice 切片"></a>Slice 切片</h3><ul>
<li>slice <strong>不是</strong>值类型，它是 array 的一个视图 (view)，对 slice 的改动会反映到 array</li>
<li><code>slice</code> 可以向后扩展，但不能向前扩展</li>
<li><code>s[i]</code> 不可以超越 <code>len(s)</code>，向后拓展可以超越 <code>len(s)</code> 但不能超越 <code>cap(s)</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">arr := [...]<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;arr[2:6] =&quot;</span>, arr[<span class="number">2</span>:<span class="number">6</span>])</span><br><span class="line">fmt.Println(<span class="string">&quot;arr[:6] =&quot;</span>, arr[:<span class="number">6</span>])</span><br><span class="line">fmt.Println(<span class="string">&quot;arr[2:] =&quot;</span>, arr[<span class="number">2</span>:])</span><br><span class="line">fmt.Println(<span class="string">&quot;arr[:] =&quot;</span>, arr[:])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateSlide</span><span class="params">(s []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    s[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">updateSlide(s1)</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;Extending slide&quot;</span>)</span><br><span class="line">arr[<span class="number">0</span>], arr[<span class="number">2</span>] = <span class="number">0</span>, <span class="number">2</span></span><br><span class="line">fmt.Println(<span class="string">&quot;arr =&quot;</span>, arr)</span><br><span class="line">s1 = arr[<span class="number">2</span>:<span class="number">6</span>]</span><br><span class="line">s2 = s1[<span class="number">3</span>:<span class="number">5</span>]</span><br><span class="line"><span class="comment">//fmt.Println(s1[4])</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%v, len(s1)=%d, cap(s1)=%d\n&quot;</span>, s1, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1))</span><br><span class="line">fmt.Printf(<span class="string">&quot;s2=%v, len(s2)=%d, cap(s2)=%d\n&quot;</span>, s2, <span class="built_in">len</span>(s2), <span class="built_in">cap</span>(s2))</span><br></pre></td></tr></table></figure>

<p><img src="/2021/learn-golang/7a4e9184666b4e8c88f8268dd9b1f9e5.png"></p>
<p><img src="/2021/learn-golang/ddbc35f312ef43a1867d4c7c9e65ad86.png"></p>
<h4 id="create"><a href="#create" class="headerlink" title="create"></a>create</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="type">int</span> <span class="comment">// nil</span></span><br></pre></td></tr></table></figure>

<p>这种方式创建的 slice，初始值等于 <code>nil</code>。</p>
<p>往里面添加元素时，<code>len</code> 和 <code>cap</code> 是动态的。</p>
<p><img src="/2021/learn-golang/4ded1987bf6847b08a0ab90c8f44a4af.png"></p>
<p>另一种方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定初始 len</span></span><br><span class="line">s2 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">16</span>) </span><br><span class="line"><span class="comment">// 指定初始 len cap</span></span><br><span class="line">s3 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">10</span>, <span class="number">32</span>) </span><br></pre></td></tr></table></figure>

<h4 id="append"><a href="#append" class="headerlink" title="append"></a><code>append</code></h4><p>有内建函数：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">append</span>(s, val)</span><br></pre></td></tr></table></figure>

<p>添加元素时如果超越了 <code>cap</code>，系统会重新分配更大的底层数组</p>
<p>由于值传递的关系，必须接收 <code>append</code> 的返回值</p>
<h4 id="copy"><a href="#copy" class="headerlink" title="copy"></a><code>copy</code></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">copy</span>(s2, s1)</span><br></pre></td></tr></table></figure>

<h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><p>删除下标为 3 的元素：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s2 = <span class="built_in">append</span>(s2[:<span class="number">3</span>], s2[<span class="number">4</span>:]...)</span><br></pre></td></tr></table></figure>

<h4 id="shift-pop"><a href="#shift-pop" class="headerlink" title="shift&#x2F;pop"></a>shift&#x2F;pop</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// shift</span></span><br><span class="line">front := s2[<span class="number">0</span>]</span><br><span class="line">s2 = s2[<span class="number">1</span>:]</span><br><span class="line"><span class="comment">// pop</span></span><br><span class="line">tail := s2[<span class="built_in">len</span>(s2)<span class="number">-1</span>]</span><br><span class="line">s2 = s2[:<span class="built_in">len</span>(s2)<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>

<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ul>
<li>创建：<code>make(map[string]int)</code></li>
<li>获取：<code>m[key]</code>，字符不存在返回 zero value</li>
<li>判断 key 是否存在：<code>value, ok := m[key]</code></li>
<li>删除：<code>delete(m, key)</code></li>
<li>遍历：<code>for k, v := range m</code>，无序的</li>
<li>获取长度：<code>len(m)</code></li>
<li>map 使用哈希表，key 必须可以比较相等，除了 slice map function 以外的内建类型都可以作为 key，不包含上述字段的 struct 也可以</li>
</ul>
<h4 id="例：寻找最长的不含有重复字符的子串"><a href="#例：寻找最长的不含有重复字符的子串" class="headerlink" title="例：寻找最长的不含有重复字符的子串"></a>例：寻找最长的不含有重复字符的子串</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longest</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    lastOccurred := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>)</span><br><span class="line">    start := <span class="number">0</span></span><br><span class="line">    maxLength := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, c := <span class="keyword">range</span> []<span class="type">byte</span>(s) &#123;</span><br><span class="line">        <span class="keyword">if</span> last, ok := lastOccurred[c]; ok &amp;&amp; last &gt;= start &#123;</span><br><span class="line">            start = last + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i - start + <span class="number">1</span>) &gt; maxLength &#123;</span><br><span class="line">            maxLength = i - start + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        lastOccurred[c] = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul>
<li><code>for i, b := range []byte(s)</code> 得到的是 8 位 byte</li>
<li><code>for i, b := range []rune(s)</code> 得到的是 utf8 解码后的字符</li>
<li>获取 utf8 字符串长度：<code>utf8.RuneCountInString(s)</code></li>
<li>字符串操作库：<code>strings.ToUpper</code> &#x2F; <code>strings.xxx</code></li>
</ul>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul>
<li>仅支持封装，不支持继承和多态</li>
<li>没有 class，只有 struct</li>
</ul>
<h3 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h3><ul>
<li>无需关注结构体是储存在栈还是堆上</li>
<li>知识点：<code>nil</code> 指针也<strong>能</strong>调用方法</li>
</ul>
<h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><ul>
<li>值定义与成员方法的定义方式与传统方式有区别</li>
<li>成员方法定义只有使用指针接收者（引用传递）才能改变结构的内容</li>
<li>结构过大要考虑使用指针接收者（拷贝成本）</li>
<li>注意方法的一致性：最好要么都是指针接收者，要么都是值接收者</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> TreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    value       <span class="type">int</span></span><br><span class="line">    left, right *TreeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里是值传递</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node TreeNode)</span></span> <span class="built_in">print</span>() &#123;</span><br><span class="line">    fmt.Println(node.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里是引用传递</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *TreeNode)</span></span> setValue(value <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="comment">// 不是 node-&gt;value</span></span><br><span class="line">    node.value = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">root.<span class="built_in">print</span>()</span><br><span class="line">root.setValue(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> root TreeNode</span><br><span class="line">root.left = &amp;TreeNode&#123;&#125;</span><br><span class="line"><span class="comment">// 指针也可以直接“点”</span></span><br><span class="line">root.left.right = &amp;TreeNode&#123;<span class="number">4</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">root.right = &amp;TreeNode&#123;value: value&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createNode</span><span class="params">(value <span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;TreeNode&#123;value: value&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">root.right = createNode(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h4 id="例子：遍历树"><a href="#例子：遍历树" class="headerlink" title="例子：遍历树"></a>例子：遍历树</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *TreeNode)</span></span> travel() &#123;</span><br><span class="line">    <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 即使 node.left 是 nil，它也能调用方法！</span></span><br><span class="line">    node.left.travel()</span><br><span class="line">    node.<span class="built_in">print</span>()</span><br><span class="line">    node.right.travel()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="包与封装"><a href="#包与封装" class="headerlink" title="包与封装"></a>包与封装</h3><p><img src="/2021/learn-golang/9db7a35f8c634ba9a4bbee5e3fc72810.png"></p>
<h4 id="包"><a href="#包" class="headerlink" title="包"></a>包</h4><ul>
<li>每个目录是一个包</li>
<li>“main 包”包含可执行入口</li>
<li>为结构定义的方法必须放在同一个包内，可以是不同的文件</li>
</ul>
<h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ul>
<li>名字 CamelCase</li>
<li>首字母大写代表 public</li>
<li>首字母小写代表 private</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node.go</span></span><br><span class="line"><span class="keyword">package</span> tree</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">    Value       <span class="type">int</span></span><br><span class="line">    Left, Right *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateNode</span><span class="params">(value <span class="type">int</span>)</span></span> *Node &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Node&#123;Value: value&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// travalsal.go</span></span><br><span class="line"><span class="keyword">package</span> tree</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *Node)</span></span> Travel() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;learngo/tree&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> root tree.Node</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="方法一：别名（简单）"><a href="#方法一：别名（简单）" class="headerlink" title="方法一：别名（简单）"></a>方法一：别名（简单）</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> queue</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Queue []<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Push(value <span class="type">int</span>) &#123;</span><br><span class="line">    *q = <span class="built_in">append</span>(*q, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Pop() <span class="type">int</span> &#123;</span><br><span class="line">    pop := (*q)[<span class="number">0</span>]</span><br><span class="line">    *q = (*q)[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> pop</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> IsEmpty() <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(*q) == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="方法二：组合（常用）"><a href="#方法二：组合（常用）" class="headerlink" title="方法二：组合（常用）"></a>方法二：组合（常用）</h5><p>与 js 的 <code>&#123;node: ...node&#125;</code> 类似，没有其它处理：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> myTreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    node *tree.Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *myTreeNode)</span></span> postOrder() &#123;</span><br><span class="line">    <span class="keyword">if</span> node == <span class="literal">nil</span> || node.node == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    left := myTreeNode&#123;node.node.Left&#125;</span><br><span class="line">    left.postOrder()</span><br><span class="line"></span><br><span class="line">    right := myTreeNode&#123;node.node.Right&#125;</span><br><span class="line">    right.postOrder()</span><br><span class="line"></span><br><span class="line">    node.node.Print()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myNode := myTreeNode&#123;&amp;root&#125;</span><br><span class="line">myNode.postOrder()</span><br></pre></td></tr></table></figure>

<h5 id="方法三：内嵌（少写代码）"><a href="#方法三：内嵌（少写代码）" class="headerlink" title="方法三：内嵌（少写代码）"></a>方法三：内嵌（少写代码）</h5><ul>
<li>其实是一个语法糖，编译器自动将字段以 Node 命名了。并且：Node 的属性和方法会自动提升到顶层。</li>
<li>与继承类似，可以看作继承行为的模拟，但有本质区别。</li>
<li>可以重写方法，重写的方法称作 shallowed method，而非 override，调用原 struct 方法使用 <code>root.Node.xxx</code>，相当于 <code>super</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> myTreeNodeEmbedded <span class="keyword">struct</span> &#123;</span><br><span class="line">    *tree.Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *myTreeNodeEmbedded)</span></span> postOrder() &#123;</span><br><span class="line">    <span class="comment">// 必须！</span></span><br><span class="line">    <span class="keyword">if</span> node == <span class="literal">nil</span> || node.Node == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    left := myTreeNodeEmbedded&#123;node.Left&#125;</span><br><span class="line">    left.postOrder()</span><br><span class="line"></span><br><span class="line">    right := myTreeNodeEmbedded&#123;node.Right&#125;</span><br><span class="line">    right.postOrder()</span><br><span class="line"></span><br><span class="line">    node.Print()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>三个阶段 GOPATH&#x2F;GOVENDOR&#x2F;go mod</p>
<h3 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h3><p><img src="/2021/learn-golang/853c6909c14145e5be8208d08b8624cb.png"></p>
<ul>
<li>默认在 <code>~/go</code> (linux, unix) <code>%USERPROFILE%\go</code> (windows)</li>
<li>目录下面必须有 src 文件夹，作为所有依赖与项目的根目录（Google 将 20 亿行代码，9 百万个文件放在了一个 repo 里）</li>
<li>GOPATH 可以更改</li>
<li>GOPATH 内的两个项目<strong>无法</strong>依赖同一个库的不同版本</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">export GOPATH=/path/to/<span class="keyword">go</span></span><br><span class="line">export GO111MODULE=off</span><br><span class="line"><span class="comment">// in src/proj folder</span></span><br><span class="line"><span class="keyword">go</span> get -u <span class="keyword">go</span>.uber.org/zap</span><br></pre></td></tr></table></figure>

<h3 id="GOVENDER"><a href="#GOVENDER" class="headerlink" title="GOVENDER"></a>GOVENDER</h3><blockquote>
<p>GOPATH 内的两个项目<strong>无法</strong>依赖同一个库的不同版本</p>
</blockquote>
<ul>
<li>为了解决这个问题诞生了 GOVENDER，只需要在 project 里面新建 vender 文件夹，依赖就会从首先 vender 文件夹内查找</li>
<li>有许多配套的依赖管理工具</li>
</ul>
<p><img src="/2021/learn-golang/455e27fce6654ef98338197e7891c2ca.png"></p>
<h3 id="GO-MOD"><a href="#GO-MOD" class="headerlink" title="GO MOD"></a>GO MOD</h3><p>go 命令统一管理，不必关心目录结构</p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>相当于 npm init</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go mod init modname</span><br></pre></td></tr></table></figure>

<h4 id="安装-升级依赖"><a href="#安装-升级依赖" class="headerlink" title="安装&#x2F;升级依赖"></a>安装&#x2F;升级依赖</h4><p>与 GOPATH 一样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get -u go.uber.org/zap@1.12.0</span><br></pre></td></tr></table></figure>

<h4 id="依赖管理-go-mod"><a href="#依赖管理-go-mod" class="headerlink" title="依赖管理 go.mod"></a>依赖管理 <code>go.mod</code></h4><p>相当于 <code>package.json</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module learngo</span><br><span class="line"></span><br><span class="line">go 1.16</span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">    go.uber.org/atomic v1.9.0 // indirect</span><br><span class="line">    go.uber.org/multierr v1.7.0 // indirect</span><br><span class="line">    go.uber.org/zap v1.19.0 // indirect</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="依赖锁-go-sum"><a href="#依赖锁-go-sum" class="headerlink" title="依赖锁 go.sum"></a>依赖锁 <code>go.sum</code></h4><p>相当于 <code>package-json.lock</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">github.com/benbjohnson/clock v1.1.0/go.mod h1:J11/hYXuz8f4ySSvYwY0FKfm+ezbsZBKZxNJlLklBHA=</span><br><span class="line">github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure>

<h4 id="依赖锁瘦身"><a href="#依赖锁瘦身" class="headerlink" title="依赖锁瘦身"></a>依赖锁瘦身</h4><p>（也许相当于 <code>npm uninstall</code>）</p>
<p>命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go mod tidy</span><br></pre></td></tr></table></figure>

<h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><p>注意后面是 3 个点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go build ./...</span><br></pre></td></tr></table></figure>

<h4 id="旧项目迁移到-gomod"><a href="#旧项目迁移到-gomod" class="headerlink" title="旧项目迁移到 gomod"></a>旧项目迁移到 gomod</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go mod init</span><br><span class="line">go build ./...</span><br></pre></td></tr></table></figure>

<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> retriever <span class="keyword">interface</span> &#123;</span><br><span class="line">    Get(<span class="type">string</span>) <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="duck-typing"><a href="#duck-typing" class="headerlink" title="duck typing"></a>duck typing</h3><ul>
<li>“长得像鸭子，那么就是鸭子”</li>
<li>描述事物的外部行为，而非内部结构</li>
<li>go 属于结构化类型系统，类似 duck typing（但本质上不是）</li>
<li>同时具有 python c++ 的 duck typing 灵活性</li>
<li>又具有 java 的类型检查</li>
</ul>
<h3 id="接口的定义"><a href="#接口的定义" class="headerlink" title="接口的定义"></a>接口的定义</h3><ul>
<li>接口由使用者定义</li>
<li>接口的实现是隐式的，只要实现了里面的内容即可</li>
</ul>
<h3 id="接口变量"><a href="#接口变量" class="headerlink" title="接口变量"></a>接口变量</h3><ul>
<li>接口变量自带指针</li>
<li>接口变量同样采用值传递</li>
<li>指针接收者实现只能以指针方式使用，值接收者都可</li>
<li>接口变量里面有实现者的类型和值。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;%T %v\n&quot;</span>, r, r)</span><br><span class="line"><span class="comment">// test.Retriever &#123;EMT&#125;</span></span><br></pre></td></tr></table></figure>

<p>接口的真实类型可以通过 switch 获取：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> v := r.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *infra.Retriever:</span><br><span class="line">    fmt.Println(v.TimeOut)</span><br><span class="line"><span class="keyword">case</span> test.Retriever:</span><br><span class="line">    fmt.Println(v.Content)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以通过 type assertion 获取：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// type assertion</span></span><br><span class="line"><span class="keyword">if</span> realRetriever, ok := r.(*infra.Retriever); ok &#123;</span><br><span class="line">    fmt.Println(realRetriever.UserAgent)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;type incorrect&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现者的值也可以换成实现者的指针：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Retriever <span class="keyword">struct</span> &#123;</span><br><span class="line">    UserAgent <span class="type">string</span></span><br><span class="line">    TimeOut   time.Duration</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Retriever)</span></span> Get(url <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> retriever <span class="keyword">interface</span> &#123;</span><br><span class="line">    Get(<span class="type">string</span>) <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r retriever = &amp;infra.Retriever&#123;</span><br><span class="line">    TimeOut:   time.Minute,</span><br><span class="line">    UserAgent: <span class="string">&quot;Mozilla&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T %v\n&quot;</span>, r, r)</span><br><span class="line"><span class="comment">// *infra.Retriever &amp;&#123;Mozilla 1m0s&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="表示任意类型的接口"><a href="#表示任意类型的接口" class="headerlink" title="表示任意类型的接口"></a>表示任意类型的接口</h3><p>类似 <code>any</code>：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for example</span></span><br><span class="line"><span class="keyword">type</span> Queue []<span class="keyword">interface</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口的强制类型转换"><a href="#接口的强制类型转换" class="headerlink" title="接口的强制类型转换"></a>接口的强制类型转换</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Queue []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Push(value <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">    *q = <span class="built_in">append</span>(*q, value.(<span class="type">int</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口的组合"><a href="#接口的组合" class="headerlink" title="接口的组合"></a>接口的组合</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> retriever <span class="keyword">interface</span> &#123;</span><br><span class="line">    Get(<span class="type">string</span>) <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> poster <span class="keyword">interface</span> &#123;</span><br><span class="line">    Post(<span class="type">string</span>, <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>) <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> retrieverPoster <span class="keyword">interface</span> &#123;</span><br><span class="line">    retriever</span><br><span class="line">    poster</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常用内置接口"><a href="#常用内置接口" class="headerlink" title="常用内置接口"></a>常用内置接口</h3><h4 id="stringer"><a href="#stringer" class="headerlink" title="stringer"></a>stringer</h4><p>相当于 <code>toString</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Retriever <span class="keyword">struct</span> &#123;</span><br><span class="line">    Content <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Retriever)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;Test Retriever: &#123;Content=%s&#125;&quot;</span>, r.Content)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T %v\n&quot;</span>, r, r)</span><br><span class="line"><span class="comment">// *test.Retriever Test Retriever: &#123;Content=EMT&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="reader-writer"><a href="#reader-writer" class="headerlink" title="reader&#x2F;writer"></a>reader&#x2F;writer</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printFile</span><span class="params">(filename <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    file, err := os.Open(filename)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    printFileContent(file)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printFileContent</span><span class="params">(reader io.Reader)</span></span> &#123;</span><br><span class="line">    scanner := bufio.NewScanner(reader)</span><br><span class="line">    <span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">        fmt.Println(scanner.Text())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printFile(<span class="string">&quot;./basic/abc.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">printFileContent(strings.NewReader(<span class="string">`EMT</span></span><br><span class="line"><span class="string">YES!</span></span><br><span class="line"><span class="string">`</span>))</span><br></pre></td></tr></table></figure>

<h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p><img src="/2021/learn-golang/c3ab258e951d4ee2aa5a06790c70419b.png"></p>
<h3 id="例子：累加器"><a href="#例子：累加器" class="headerlink" title="例子：累加器"></a>例子：累加器</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(v <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(v <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        sum += v</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    add := adder()</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        fmt.Println(add(i))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例子：斐波那契数列"><a href="#例子：斐波那契数列" class="headerlink" title="例子：斐波那契数列"></a>例子：斐波那契数列</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    before, after := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;before=%d, after=%d\n&quot;</span>, before, after)</span><br><span class="line">        before, after = after, after+before</span><br><span class="line">        <span class="keyword">return</span> after</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f := fib()</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        f()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例子：二叉树遍历"><a href="#例子：二叉树遍历" class="headerlink" title="例子：二叉树遍历"></a>例子：二叉树遍历</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *Node)</span></span> TravelFunc(f <span class="function"><span class="keyword">func</span><span class="params">(*Node)</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    node.Left.TravelFunc(f)</span><br><span class="line">    f(node)</span><br><span class="line">    node.Right.TravelFunc(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *Node)</span></span> Count() <span class="type">int</span> &#123;</span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    node.TravelFunc(<span class="function"><span class="keyword">func</span><span class="params">(node *Node)</span></span> &#123;</span><br><span class="line">        count++</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="错误处理和资源管理"><a href="#错误处理和资源管理" class="headerlink" title="错误处理和资源管理"></a>错误处理和资源管理</h2><h3 id="defer-调用"><a href="#defer-调用" class="headerlink" title="defer 调用"></a><code>defer</code> 调用</h3><ul>
<li><code>defer</code> 调用确保在函数结束时发生</li>
<li><code>defer</code> 先进后出（栈）</li>
<li><code>defer</code> 参数在语句时计算（非结算时）</li>
</ul>
<p>何时使用 defer：</p>
<ul>
<li>open&#x2F;close</li>
<li>lock&#x2F;unlock</li>
<li>print header&#x2F;footer</li>
</ul>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">file, err := os.OpenFile(filename, os.O_EXCL|os.O_CREATE, <span class="number">0666</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> e, ok := err.(*os.PathError); !ok &#123;</span><br><span class="line">            fmt.Println(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;Op: %s, Path: %s, Err: %s\n&quot;</span>, e.Op, e.Path, e.Err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="统一的错误处理"><a href="#统一的错误处理" class="headerlink" title="统一的错误处理"></a>统一的错误处理</h3><p>以 http server 为例，思路是让 controller 可以直接返回 error，而 error 在外层的包裹函数内统一处理：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> handler <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> <span class="type">error</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errWrapper</span><span class="params">(h handler)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        err := h(w, r)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Printf(<span class="string">&quot;%s\n&quot;</span>, err.Error())</span><br><span class="line">            code := http.StatusInternalServerError</span><br><span class="line">            <span class="keyword">switch</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> os.IsNotExist(err):</span><br><span class="line">                code = http.StatusNotFound</span><br><span class="line">            &#125;</span><br><span class="line">            http.Error(w, http.StatusText(code), code)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/list/&quot;</span>, errWrapper(controller.ListFile))</span><br><span class="line"></span><br><span class="line">    err := http.ListenAndServe(<span class="string">&quot;:8888&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="panic"><a href="#panic" class="headerlink" title="panic"></a>panic</h3><ul>
<li>停止当前函数执行</li>
<li>一直向上返回，执行每一层的 <code>defer</code></li>
<li>如果没有遇见 <code>recover</code>，程序退出</li>
</ul>
<h3 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h3><ul>
<li>仅在 <code>defer</code> 中使用</li>
<li>获取 <code>panic</code> 的值</li>
<li>如果无法处理，可以重新 <code>panic</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := <span class="built_in">recover</span>()</span><br><span class="line">    <span class="keyword">if</span> err, ok := e.(<span class="type">error</span>); ok &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;catch error: &quot;</span>, err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(errors.New(<span class="string">&quot;don&#x27;t know what to do: &quot;</span> + fmt.Sprintf(<span class="string">&quot;%v&quot;</span>, e)))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">//panic(errors.New(&quot;...&quot;))</span></span><br><span class="line"><span class="comment">//panic(123)</span></span><br><span class="line">b := <span class="number">0</span></span><br><span class="line">a := <span class="number">5</span> / b</span><br><span class="line">fmt.Println(a)</span><br><span class="line"><span class="comment">//catch error:  runtime error: integer divide by zero</span></span><br></pre></td></tr></table></figure>

<h3 id="error-vs-panic"><a href="#error-vs-panic" class="headerlink" title="error vs. panic"></a>error vs. panic</h3><ul>
<li>尽量使用 <code>error</code>。</li>
<li>意料之中的：<code>error</code>。如：文件打不开</li>
<li>意料之外的：<code>panic</code>。如：数组越界</li>
</ul>
<h3 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> UserError <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u UserError)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> u.Message()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u UserError)</span></span> Message() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListFile</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> strings.Index(request.URL.Path, prefix) &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// 外部可以使用 type assertion 判断，并输出自定义 message</span></span><br><span class="line">        <span class="keyword">return</span> UserError(<span class="string">&quot;path muse starts with &quot;</span> + prefix)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="统一的错误处理（进阶）"><a href="#统一的错误处理（进阶）" class="headerlink" title="统一的错误处理（进阶）"></a>统一的错误处理（进阶）</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errWrapper</span><span class="params">(h handler)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> err, ok := r.(<span class="type">error</span>); ok &#123;</span><br><span class="line">                    log.Printf(<span class="string">&quot;%s\n&quot;</span>, err.Error())</span><br><span class="line">                    http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.Printf(<span class="string">&quot;%v\n&quot;</span>, r)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line"></span><br><span class="line">        err := h(w, r)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Printf(<span class="string">&quot;%s\n&quot;</span>, err.Error())</span><br><span class="line">            <span class="keyword">if</span> userError, ok := err.(controller.UserError); ok &#123;</span><br><span class="line">                http.Error(w, userError.Message(), http.StatusBadRequest)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            code := http.StatusInternalServerError</span><br><span class="line">            <span class="keyword">switch</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> os.IsNotExist(err):</span><br><span class="line">                code = http.StatusNotFound</span><br><span class="line">            &#125;</span><br><span class="line">            http.Error(w, http.StatusText(code), code)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p><img src="/2021/learn-golang/1ce7baff04564b6787035adb5e9d3469.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go test .</span><br><span class="line">ok      learngo/basic/basic     0.087s</span><br></pre></td></tr></table></figure>

<p>单元测试文件以 <code>_test.go</code> 结尾，如 <code>some_function_test.go</code>，ide 可自动识别单元测试文件</p>
<p>如果要引用私有方法，需要跟方法在同一个 package</p>
<p>命令行执行：<code>go test .</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTriangle</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    tests := []<span class="keyword">struct</span>&#123; a, b, c <span class="type">int</span> &#125;&#123;</span><br><span class="line">        &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>, <span class="number">12</span>, <span class="number">13</span>&#125;,</span><br><span class="line">        &#123;<span class="number">8</span>, <span class="number">15</span>, <span class="number">17</span>&#125;,</span><br><span class="line">        &#123;<span class="number">12</span>, <span class="number">35</span>, <span class="number">37</span>&#125;,</span><br><span class="line">        &#123;<span class="number">30000</span>, <span class="number">40000</span>, <span class="number">50000</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">        <span class="keyword">if</span> c := calcTriangle(tt.a, tt.b); c != tt.c &#123;</span><br><span class="line">            t.Errorf(<span class="string">&quot;calcTriangle(%d,%d), expected %d, got %d&quot;</span>, tt.a, tt.b, tt.c, c)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="覆盖率"><a href="#覆盖率" class="headerlink" title="覆盖率"></a>覆盖率</h3><p><img src="/2021/learn-golang/f5c87e2b40da4e1d836c95e81bfa4854.png"></p>
<p>go 自带覆盖率工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成报告</span></span><br><span class="line">go <span class="built_in">test</span> . -coverprofile=c.out</span><br><span class="line"><span class="comment"># 查看报告</span></span><br><span class="line">go tool cover -html=c.out</span><br></pre></td></tr></table></figure>

<h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><p>性能测试方法需要以 <code>Benchmark</code> 开头：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkNonRepeating</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 运行一秒钟，具体次数由 go 决定</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        assert.Equal(b, <span class="number">8</span>, longest(<span class="string">&quot;黑化肥挥发发灰会花飞灰化肥挥发发黑会飞花&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">test</span> -bench .</span><br></pre></td></tr></table></figure>

<h3 id="pprof"><a href="#pprof" class="headerlink" title="pprof"></a>pprof</h3><p><img src="/2021/learn-golang/d3cbfbf4906e4e32afdcc105e2ff827b.png"></p>
<p>web 报告需要安装 <a href="https://www.graphviz.org/download/">https://www.graphviz.org/download/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">test</span> -bench . -cpuprofile cpu.out</span><br><span class="line">go tool pprof cpu.out</span><br><span class="line"><span class="comment"># 打开基于网页的性能报告</span></span><br><span class="line">(pprof) web</span><br></pre></td></tr></table></figure>

<p><img src="/2021/learn-golang/17e50758d4e84a1683bde714e4ca8e64.png"></p>
<h3 id="http-单元测试"><a href="#http-单元测试" class="headerlink" title="http 单元测试"></a>http 单元测试</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorPanic</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="number">123</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorNotExist</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> os.ErrNotExist</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tests = []<span class="keyword">struct</span> &#123;</span><br><span class="line">    h       handler</span><br><span class="line">    code    <span class="type">int</span></span><br><span class="line">    message <span class="type">string</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">    &#123;errorNotExist, http.StatusNotFound, http.StatusText(http.StatusNotFound)&#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方式一：测代码逻辑"><a href="#方式一：测代码逻辑" class="headerlink" title="方式一：测代码逻辑"></a>方式一：测代码逻辑</h4><p>使用 fake req\res mock 测试：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestErrorWrapper</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, test := <span class="keyword">range</span> tests &#123;</span><br><span class="line">        h := errWrapper(test.h)</span><br><span class="line">        res := httptest.NewRecorder()</span><br><span class="line">        req := httptest.NewRequest(http.MethodGet, <span class="string">&quot;https://google.com&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">        h(res, req)</span><br><span class="line">        all, _ := ioutil.ReadAll(res.Body)</span><br><span class="line">        assert.Equal(t, test.message, strings.TrimSpace(<span class="type">string</span>(all)))</span><br><span class="line">        assert.Equal(t, test.code, res.Code)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方式二：真实服务器测试"><a href="#方式二：真实服务器测试" class="headerlink" title="方式二：真实服务器测试"></a>方式二：真实服务器测试</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestServer</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, test := <span class="keyword">range</span> tests &#123;</span><br><span class="line">        h := errWrapper(test.h)</span><br><span class="line">        s := httptest.NewServer(http.HandlerFunc(h))</span><br><span class="line">        res, _ := http.Get(s.URL)</span><br><span class="line">        all, _ := ioutil.ReadAll(res.Body)</span><br><span class="line">        assert.Equal(t, test.message, strings.TrimSpace(<span class="type">string</span>(all)))</span><br><span class="line">        assert.Equal(t, test.code, res.StatusCode)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="生成文档"><a href="#生成文档" class="headerlink" title="生成文档"></a>生成文档</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get golang.org/x/tools/cmd/godoc</span><br><span class="line"><span class="comment">// 启动文档服务器</span></span><br><span class="line">godoc -http :<span class="number">6060</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/learn-golang/0f272d0e38754f6d8d75e654464b45ef.png"></p>
<h4 id="编写注释"><a href="#编写注释" class="headerlink" title="编写注释"></a>编写注释</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Queue is a FIFO queue</span></span><br><span class="line"><span class="comment">//     q := Queue&#123;1,2,3&#125;</span></span><br><span class="line"><span class="keyword">type</span> Queue []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Push add an item into queue</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Push(value <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">    *q = <span class="built_in">append</span>(*q, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pop remove an item from queue</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Pop() <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">    pop := (*q)[<span class="number">0</span>]</span><br><span class="line">    *q = (*q)[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> pop</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IsEmpty check if queue is empty</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> IsEmpty() <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(*q) == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写样例"><a href="#编写样例" class="headerlink" title="编写样例"></a>编写样例</h4><p>样例代码也是一种单元测试，以 <code>Example</code> 开头，并且以 <code>Output</code> 表示输出。输出不正确时 test 会不通过。</p>
<p>（我在想，go 的约定大于配置是不是做得有点太激进了？）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleQueue_Push</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := Queue&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">    s.Push(<span class="number">3</span>)</span><br><span class="line">    fmt.Println(s.Pop())</span><br><span class="line">    fmt.Println(s.Pop())</span><br><span class="line">    fmt.Println(s.IsEmpty())</span><br><span class="line">    fmt.Println(s.Pop())</span><br><span class="line">    fmt.Println(s.IsEmpty())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Output:</span></span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// false</span></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h2><ul>
<li>go 语言使用 goroutine 来实现并发编程。</li>
<li>任何函数加入 go 关键字就能送给调度器运行</li>
<li>不需要在定义时区分是否是异步函数</li>
<li>调度器在合适的时机自动进行切换</li>
<li>开多少个线程、goroutine 分布在哪个线程上是由调度器自动决定的</li>
</ul>
<p><img src="/2021/learn-golang/8e295bcb68f842d9888683b2ab517fd2.png"></p>
<h3 id="协程-Coroutine"><a href="#协程-Coroutine" class="headerlink" title="协程 Coroutine"></a>协程 Coroutine</h3><ul>
<li>轻量级“线程”</li>
<li>非抢占式多任务处理，由协程主动交出控制权</li>
<li>编译器、解释器、虚拟机层面的多任务</li>
<li>多个协程可以在一个或多个线程上运行</li>
</ul>
<p><img src="/2021/learn-golang/638ef979ec104bec813670c252048d28.png"></p>
<h3 id="race-condition"><a href="#race-condition" class="headerlink" title="race condition"></a>race condition</h3><p>检查数据读写冲突：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go run -race gorouting.go</span><br></pre></td></tr></table></figure>

<h3 id="goroutine-可能的切换点"><a href="#goroutine-可能的切换点" class="headerlink" title="goroutine 可能的切换点"></a>goroutine 可能的切换点</h3><p>只是参考，不能保证切换，不能保证在其他地方不切换</p>
<ul>
<li>io, select</li>
<li>channel</li>
<li>waiting for lock</li>
<li>function call</li>
<li>runtime.Gosched()</li>
</ul>
<h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><blockquote>
<p>不要通过共享内存来通信——通过通信来共享内存。</p>
</blockquote>
<ul>
<li>channel 是 goroutine 之间通信的桥梁。</li>
<li>channel 可以定义可收发，也可以定义仅收、仅发</li>
<li>channel 收值可以用死循环，也可以用 <code>range</code>，也可以用条件。但是用死循环的话要注意：channel 关闭后依然会不断发送消息</li>
<li>channel 可以关闭 <code>close(c)</code></li>
<li>channel 可以定义缓冲区，<code>make(chan int, 3)</code></li>
<li>注意：channel 收发是<strong>同步</strong>的，也就是说：</li>
<li>当发消息的时候，发送方要等待消息被接受才会继续执行</li>
<li>当收消息的时候，接收方要等待消息被发送才会继续执行</li>
<li>如果在 goroutine 之间只发不收或只收不发，会出现死锁</li>
</ul>
<p><img src="/2021/learn-golang/c87f0addb2a64ecda21d603fbd737a74.png"></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 当 channel 收到值，且未关闭时</span></span><br><span class="line">    <span class="keyword">for</span> n := <span class="keyword">range</span> c &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;worker %d receive %c\n&quot;</span>, id, n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值为只收 channel</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createWorker</span><span class="params">(id <span class="type">int</span>)</span></span> <span class="keyword">chan</span>&lt;- <span class="type">int</span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">go</span> worker(id, c)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">channelDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> cs = <span class="built_in">make</span>([]<span class="keyword">chan</span>&lt;- <span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        cs[i] = createWorker(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="comment">// 向 channel 发送数据</span></span><br><span class="line">        cs[i] &lt;- <span class="string">&#x27;a&#x27;</span> + i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        cs[i] &lt;- <span class="string">&#x27;A&#x27;</span> + i</span><br><span class="line">    &#125;</span><br><span class="line">    time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="等待任务结束"><a href="#等待任务结束" class="headerlink" title="等待任务结束"></a>等待任务结束</h3><h4 id="方式一：使用-channel"><a href="#方式一：使用-channel" class="headerlink" title="方式一：使用 channel"></a>方式一：使用 channel</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> worker <span class="keyword">struct</span> &#123;</span><br><span class="line">    id   <span class="type">int</span></span><br><span class="line">    in   <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">    done <span class="keyword">chan</span> <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doWork</span><span class="params">(w worker)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> n := <span class="keyword">range</span> w.in &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;worker %d receive %c\n&quot;</span>, w.id, n)</span><br><span class="line">        w.done &lt;- <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createWorker</span><span class="params">(id <span class="type">int</span>)</span></span> worker &#123;</span><br><span class="line">    w := worker&#123;</span><br><span class="line">        in:   <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>),</span><br><span class="line">        done: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>),</span><br><span class="line">        id:   id,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">go</span> doWork(w)</span><br><span class="line">    <span class="keyword">return</span> w</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">channelDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> w = <span class="built_in">make</span>([]worker, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        w[i] = createWorker(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i, worker := <span class="keyword">range</span> w &#123;</span><br><span class="line">        worker.in &lt;- <span class="string">&#x27;a&#x27;</span> + i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, worker := <span class="keyword">range</span> w &#123;</span><br><span class="line">        &lt;-worker.done</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i, worker := <span class="keyword">range</span> w &#123;</span><br><span class="line">        worker.in &lt;- <span class="string">&#x27;A&#x27;</span> + i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, worker := <span class="keyword">range</span> w &#123;</span><br><span class="line">        &lt;-worker.done</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    channelDemo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方式二：使用-WaitGroup"><a href="#方式二：使用-WaitGroup" class="headerlink" title="方式二：使用 WaitGroup"></a>方式二：使用 WaitGroup</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> worker <span class="keyword">struct</span> &#123;</span><br><span class="line">    id   <span class="type">int</span></span><br><span class="line">    in   <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">    done <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doWork</span><span class="params">(w worker)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> n := <span class="keyword">range</span> w.in &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;worker %d receive %c\n&quot;</span>, w.id, n)</span><br><span class="line">        w.done()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createWorker</span><span class="params">(id <span class="type">int</span>, wg *sync.WaitGroup)</span></span> worker &#123;</span><br><span class="line">    w := worker&#123;</span><br><span class="line">        in:   <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>),</span><br><span class="line">        done: wg.Done,</span><br><span class="line">        id:   id,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">go</span> doWork(w)</span><br><span class="line">    <span class="keyword">return</span> w</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">channelDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> w = <span class="built_in">make</span>([]worker, <span class="number">10</span>)</span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        w[i] = createWorker(i, &amp;wg)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//wg.Add(20)</span></span><br><span class="line">    <span class="keyword">for</span> i, worker := <span class="keyword">range</span> w &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        worker.in &lt;- <span class="string">&#x27;a&#x27;</span> + i</span><br><span class="line">        <span class="comment">//wg.Add(1) 错误！应该先 Add 再发数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//wg.Wait()</span></span><br><span class="line">    <span class="keyword">for</span> i, worker := <span class="keyword">range</span> w &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        worker.in &lt;- <span class="string">&#x27;A&#x27;</span> + i</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    channelDemo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-channel-进行树遍历"><a href="#使用-channel-进行树遍历" class="headerlink" title="使用 channel 进行树遍历"></a>使用 channel 进行树遍历</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *Node)</span></span> TravelFunc(f <span class="function"><span class="keyword">func</span><span class="params">(*Node)</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 普通的回调式遍历...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *Node)</span></span> TravelWithChannel() <span class="keyword">chan</span> *Node &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> *Node)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="built_in">close</span>(c)</span><br><span class="line">        node.TravelFunc(<span class="function"><span class="keyword">func</span><span class="params">(node *Node)</span></span> &#123;</span><br><span class="line">            c &lt;- node</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> root tree.Node</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    max := <span class="number">0</span></span><br><span class="line">    node := root.TravelWithChannel()</span><br><span class="line">    <span class="keyword">for</span> n := <span class="keyword">range</span> node &#123;</span><br><span class="line">        <span class="keyword">if</span> n.Value &gt; max &#123;</span><br><span class="line">            max = n.Value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Max: &quot;</span>, max)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-select-进行调度"><a href="#使用-select-进行调度" class="headerlink" title="使用 select 进行调度"></a>使用 select 进行调度</h3><ul>
<li>select 的使用，可以不加锁控制任务的执行</li>
<li>定时器的使用：定时器返回的也是 channel</li>
<li>在 select 中使用 nil channel：nil channel 永远不会被 select</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">tm := time.After(time.Second * <span class="number">10</span>)</span><br><span class="line">tick := time.Tick(time.Second)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> activeChannel <span class="keyword">chan</span>&lt;- <span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> activeValue <span class="type">int</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(values) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        activeChannel = w.in</span><br><span class="line">        activeValue = values[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-tm:</span><br><span class="line">        fmt.Println(<span class="string">&quot;program exit&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">case</span> n := &lt;-c1:</span><br><span class="line">        values = <span class="built_in">append</span>(values, n)</span><br><span class="line">        <span class="comment">//fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> n := &lt;-c2:</span><br><span class="line">        values = <span class="built_in">append</span>(values, n)</span><br><span class="line">    <span class="keyword">case</span> activeChannel &lt;- activeValue:</span><br><span class="line">        values = values[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">case</span> &lt;-tick:</span><br><span class="line">        fmt.Println(<span class="string">&quot;len(values)=&quot;</span>, <span class="built_in">len</span>(values))</span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(time.Millisecond * <span class="number">800</span>):</span><br><span class="line">        fmt.Println(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="传统的同步机制"><a href="#传统的同步机制" class="headerlink" title="传统的同步机制"></a>传统的同步机制</h3><ul>
<li>WaitGroup</li>
<li>Mutex</li>
<li>Cond</li>
</ul>
<p>如果不加锁，使用 <code>-race</code> 执行会发生 data race：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> atomicInt <span class="keyword">struct</span> &#123;</span><br><span class="line">    Value <span class="type">int</span></span><br><span class="line">    Lock  sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *atomicInt)</span></span> add(v <span class="type">int</span>) &#123;</span><br><span class="line">    i.Lock.Lock()</span><br><span class="line">    <span class="keyword">defer</span> i.Lock.Unlock()</span><br><span class="line">    i.Value += v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *atomicInt)</span></span> getValue() <span class="type">int</span> &#123;</span><br><span class="line">    i.Lock.Lock()</span><br><span class="line">    <span class="keyword">defer</span> i.Lock.Unlock()</span><br><span class="line">    <span class="keyword">return</span> i.Value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i := atomicInt&#123;&#125;</span><br><span class="line">    i.add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        i.add(<span class="number">1</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">    time.Sleep(time.Millisecond)</span><br><span class="line">    fmt.Println(i.getValue())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="并发编程模式"><a href="#并发编程模式" class="headerlink" title="并发编程模式"></a>并发编程模式</h3><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">msgGen</span><span class="params">(id <span class="type">string</span>)</span></span> &lt;-<span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            time.Sleep(time.Duration(rand.Intn(<span class="number">2000</span>)) * time.Millisecond)</span><br><span class="line">            c &lt;- fmt.Sprintf(<span class="string">&quot;generator %s sended %d&quot;</span>, id, i)</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="fanIn"><a href="#fanIn" class="headerlink" title="fanIn"></a>fanIn</h4><p>将多个 channel 的消息合并为一个输出以避免阻塞：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fanIn</span><span class="params">(channels ...&lt;-<span class="keyword">chan</span> <span class="type">string</span>)</span></span> &lt;-<span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line">    <span class="keyword">for</span> _, ch := <span class="keyword">range</span> channels &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(ch &lt;-<span class="keyword">chan</span> <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">for</span> &#123;</span><br><span class="line">                c &lt;- &lt;-ch</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(ch)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := fanIn(</span><br><span class="line">        msgGen(<span class="string">&quot;svc1&quot;</span>),</span><br><span class="line">        msgGen(<span class="string">&quot;svc2&quot;</span>),</span><br><span class="line">        msgGen(<span class="string">&quot;svc3&quot;</span>),</span><br><span class="line">        msgGen(<span class="string">&quot;svc4&quot;</span>),</span><br><span class="line">        msgGen(<span class="string">&quot;svc5&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(&lt;-m)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="fanIn-by-select"><a href="#fanIn-by-select" class="headerlink" title="fanIn by select"></a>fanIn by select</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fanInBySelect</span><span class="params">(c1 &lt;-<span class="keyword">chan</span> <span class="type">string</span>, c2 &lt;-<span class="keyword">chan</span> <span class="type">string</span>)</span></span> &lt;-<span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> n := &lt;-c1:</span><br><span class="line">                c &lt;- n</span><br><span class="line">            <span class="keyword">case</span> n := &lt;-c2:</span><br><span class="line">                c &lt;- n</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="任务的控制"><a href="#任务的控制" class="headerlink" title="任务的控制"></a>任务的控制</h3><h4 id="非阻塞等待"><a href="#非阻塞等待" class="headerlink" title="非阻塞等待"></a>非阻塞等待</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">noneBlockingWait</span><span class="params">(c &lt;-<span class="keyword">chan</span> <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">bool</span>) &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> n := &lt;-c:</span><br><span class="line">        <span class="keyword">return</span> n, <span class="literal">true</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="超时机制"><a href="#超时机制" class="headerlink" title="超时机制"></a>超时机制</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeoutWait</span><span class="params">(c &lt;-<span class="keyword">chan</span> <span class="type">string</span>, timeout time.Duration)</span></span> (<span class="type">string</span>, <span class="type">bool</span>) &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> n := &lt;-c:</span><br><span class="line">        <span class="keyword">return</span> n, <span class="literal">true</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(timeout):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="优雅退出"><a href="#优雅退出" class="headerlink" title="优雅退出"></a>优雅退出</h4><p>当消息的内容无所谓时，channel 可以用空的 struct，体积比 boolean 更小。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">msgGen</span><span class="params">(id <span class="type">string</span>, done <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &lt;-<span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> &lt;-done:</span><br><span class="line">                fmt.Println(<span class="string">&quot;cleaning...&quot;</span>)</span><br><span class="line">                time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">                fmt.Println(<span class="string">&quot;clean done.&quot;</span>)</span><br><span class="line">                done &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">case</span> &lt;-time.After(time.Duration(rand.Intn(<span class="number">2000</span>)) * time.Millisecond):</span><br><span class="line">                c &lt;- fmt.Sprintf(<span class="string">&quot;generator %s sended %d&quot;</span>, id, i)</span><br><span class="line">                i++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    m1 := msgGen(<span class="string">&quot;svc1&quot;</span>, done)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> msg, ok := timeoutWait(m1, <span class="number">1</span>*time.Second); ok &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;msg from svc1: &quot;</span>, msg)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    done &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    &lt;-done</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//msg from svc1:  generator svc1 sended 0</span></span><br><span class="line"><span class="comment">//timeout</span></span><br><span class="line"><span class="comment">//msg from svc1:  generator svc1 sended 1</span></span><br><span class="line"><span class="comment">//timeout</span></span><br><span class="line"><span class="comment">//msg from svc1:  generator svc1 sended 2</span></span><br><span class="line"><span class="comment">//cleaning...</span></span><br><span class="line"><span class="comment">//clean done.</span></span><br></pre></td></tr></table></figure>

<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><h3 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h3><h4 id="简单访问"><a href="#简单访问" class="headerlink" title="简单访问"></a>简单访问</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">resp, err := http.Get(<span class="string">&quot;https://www.imooc.com&quot;</span>)</span><br><span class="line">response, err := httputil.DumpResponse(resp, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<h4 id="自定义-Header"><a href="#自定义-Header" class="headerlink" title="自定义 Header"></a>自定义 Header</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">request, err := http.NewRequest(http.MethodGet, <span class="string">&quot;http://www.imooc.com&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">request.Header.Add(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">client := http.Client&#123;CheckRedirect: <span class="function"><span class="keyword">func</span><span class="params">(req *http.Request, via []*http.Request)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Redirect:&quot;</span>, req)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;&#125;</span><br><span class="line">resp, err2 := client.Do(request)</span><br><span class="line">response, err3 := httputil.DumpResponse(resp, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<h4 id="性能监测"><a href="#性能监测" class="headerlink" title="性能监测"></a>性能监测</h4><p>导入 pprof 后，可以在 web 端查看调试界面（端口为 web 服务端口）：</p>
<p><a href="http://localhost:8888/debug/pprof/">http://localhost:8888/debug/pprof/</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    _ <span class="string">&quot;net/http/pprof&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="/2021/learn-golang/9bebdf3479a146bcb2d405e9fbf2d1f4.png"></p>
<p>也可以在控制台查看 cpu 与 内存信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go tool pprof http://localhost:6060/debug/pprof/heap</span><br><span class="line">$ go tool pprof http://localhost:6060/debug/pprof/profile?seconds=30</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Setup for Work</title>
    <url>/2018/linux-setup-for-work/</url>
    <content><![CDATA[<p>因为各种烦人的原因，公司搬家后到新办公室第一件事先把老电脑格了。犹豫了一下，最终还是放弃了重装 Windows，支持我做出选择的原因有几：</p>
<ul>
<li>不需要进行（纯）MS 系开发</li>
<li>没有必须使用的 Windows 软件</li>
<li>Windows 上跑 Android emulator 卡得头疼</li>
<li>NVIDIA 已有支持 Linux 的官方显卡驱动</li>
<li>Linux 开发效率更高</li>
<li>Linux 学习价值更高</li>
</ul>
<p>本文是办公室适用（对我来说）的安装记录。</p>
<span id="more"></span>

<h2 id="System-installation"><a href="#System-installation" class="headerlink" title="System installation"></a>System installation</h2><p>这次选择的发行版是 Ubuntu 16.04 LTS，从 <a href="https://www.ubuntu.com/download/desktop">https://www.ubuntu.com/download/desktop</a> 下载镜像安装包，复制到 u 盘后启动。</p>
<p>这里有一点问题是，我这台机器必须选择 UEFI 安装，Ubuntu 才能正常安装与启动。如果选择了 Legacy 安装，Ubuntu 可以正常安装，但启动后会一直停留在黑屏光标闪烁的状态，原因未知。</p>
<h2 id="NVIDIA-driver-setup"><a href="#NVIDIA-driver-setup" class="headerlink" title="NVIDIA driver setup"></a>NVIDIA driver setup</h2><p>系统默认安装了一个第三方的显卡驱动，基本上没什么可用性，在桌面上都有点卡。因此官方驱动是必须的。但如果安装不正确，会导致系统重启后无限卡在登录界面。如果不幸已经发生了这种情况，可以按 Ctrl + Alt + F1 进入纯命令行操作界面进行修复。</p>
<p>（以下步骤应该在纯命令行界面下执行）</p>
<p>首先禁用开源驱动：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure>

<p>添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">blacklist amd76x_edac</span><br><span class="line">blacklist vga16fb</span><br><span class="line">blacklist nouveau</span><br><span class="line">blacklist nvidiafb</span><br><span class="line">blacklist rivatv</span><br></pre></td></tr></table></figure>

<p>然后，依次执行（注意先到 NVIDIA 官网查询适用自己显卡的版本号，比如我的辣鸡 GTX650 是适用 384）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get remove  --purge nvidia-*</span><br><span class="line">$ sudo add-apt-repository ppa:graphics-drivers/ppa</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo service lightdm stop</span><br><span class="line">$ sudo apt-get install nvidia-384 nvidia-settings nvidia-prime</span><br><span class="line">$ sudo nvidia-xconfig</span><br><span class="line">$ sudo update-initramfs -u</span><br></pre></td></tr></table></figure>

<p>最后重启系统：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure>

<p>如此，显卡驱动就装好了。</p>
<h2 id="Chrome-setup"><a href="#Chrome-setup" class="headerlink" title="Chrome setup"></a>Chrome setup</h2><p>虽然 Ubuntu App Store 有提供开源版本的 Chromium，但是经过实测它在有些情况下并不能完全替代 Chrome（比如有些工具会调用 <code>google-chrome</code> 来打开一个浏览器页，如果安装的是 Chromium 就会失败）。因此，还是建议到 <a href="https://www.google.com/chrome/browser/desktop/index.html">Google Chrome Downloads</a> 下载适用于 Linux 平台的 Chrome 完全体。</p>
<h2 id="Secondary-drive-mount"><a href="#Secondary-drive-mount" class="headerlink" title="Secondary drive mount"></a>Secondary drive mount</h2><p>两块硬盘已经不是什么新鲜事了。痛苦的是系统盘以外的另一块硬盘需要手动挂载。</p>
<p>首先，使用 <code>sudo fdisk -l</code> 命令来显示目前可用的所有硬盘。假设 <code>/dev/sdb</code> 是未分区并且想要挂载的一块硬盘：</p>
<p>执行 <code>sudo fdisk /dev/sdb</code>：</p>
<ol>
<li>Press <kbd>O</kbd> and press <kbd>Enter</kbd> (creates a new table)</li>
<li>Press <kbd>N</kbd> and press <kbd>Enter</kbd> (creates a new partition)</li>
<li>Press <kbd>P</kbd> and press <kbd>Enter</kbd> (makes a primary partition)</li>
<li>Then press <kbd>1</kbd> and press <kbd>Enter</kbd> (creates it as the 1st partition)</li>
<li>Finally, press <kbd>W</kbd> (this will write any changes to disk)</li>
</ol>
<p>然后，执行 <code>sudo mkfs.ext4 /dev/sdb1</code></p>
<p>现在新硬盘就已经被分区并格式化了。接下来让系统在启动的时候自动挂载它，执行 <code>sudo gnome-disks</code> 打开一个 GUI 界面。</p>
<p><img src="https://i.stack.imgur.com/WZeoX.png" alt="img"></p>
<p>选择刚才添加的那块硬盘，点击配置按钮，选择目标挂载点，并点击 OK 即可。</p>
<p><img src="https://i.stack.imgur.com/h529h.png" alt="img"></p>
<p>需要注意的是，目前硬盘是只有读权限的，使用以下命令来给用户赋予读写权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd /mount/point</span><br><span class="line">$ sudo chmod -R -v 777 *</span><br><span class="line">$ sudo chown -R -v username:username *</span><br></pre></td></tr></table></figure>

<h2 id="Input-method-setup"><a href="#Input-method-setup" class="headerlink" title="Input method setup"></a>Input method setup</h2><p>到 <a href="https://pinyin.sogou.com/linux/">https://pinyin.sogou.com/linux/</a> 下载合适的输入法包，并安装之。然后从 Settings -&gt; Language Support 中将 Keyboard input method system 从 iBus 切换为 fcitx（有可能会遇到语言包安装不完全的情况，输入 <code>sudo apt-get install -f</code> 可以修复），然后重启。</p>
<p>重启后，右键桌面右上角的 fcitx 图标，选择 ConfigureFcitx，点击 + 号添加输入法，<strong>去掉 Only show current language 的勾</strong>，然后输入 sogou 搜索即可看到安装好的搜狗输入法。添加即可。</p>
<h2 id="Email-setup"><a href="#Email-setup" class="headerlink" title="Email setup"></a>Email setup</h2><p>因为我的公司邮箱是用的 Ms Exchange，所以设置步骤很简单：</p>
<ol>
<li>Ubuntu 自带 <a href="https://www.mozilla.org/en-US/thunderbird/">Mozilla Thunderbird</a> 邮件客户端，直接用这个就行了。</li>
<li>它本身是不支持 Exchange 配置的，需要添加一个插件 <a href="https://addons.mozilla.org/en-US/thunderbird/addon/exquilla-exchange-web-services/">ExQuilla for Microsoft Exchange</a> 以支持。</li>
<li>安装好插件后，从菜单栏的 Tools -&gt; ExQuilla for Microsoft Exchange -&gt; Add Microsoft Exchange Account 进入配置入口，然后就是正常的邮件配置了。</li>
</ol>
<h2 id="Screenshot"><a href="#Screenshot" class="headerlink" title="Screenshot"></a>Screenshot</h2><p>以下安装截图工具 Shutter，并设置快捷键：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:shutter/ppa</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install shutter</span><br></pre></td></tr></table></figure>

<p>打开 Settings -&gt; Keyboard -&gt; Shortcuts -&gt; Custom Shortcuts，点击 + 添加，输入 Name (Shutter Select) Command (shutter -s)，保存。然后点击刚才添加的项目，在快捷键那里按下 <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>A</kbd> 即可。</p>
<p><img src="http://www.linuxidc.com/upload/2015_07/150711194568203.png" alt="shutter-1"></p>
<p><img src="http://www.linuxidc.com/upload/2015_07/150711194568205.png" alt="shutter-2"></p>
<h2 id="JDK-setup"><a href="#JDK-setup" class="headerlink" title="JDK setup"></a>JDK setup</h2><p>JDK 可以到 Oracle 网站下载，也可以通过 apt-get 安装 openjdk，以下是安装 openjdk 的过程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install openjdk-8-jdk</span><br><span class="line">$ apt-cache search jdk</span><br><span class="line">$ export JAVA_HOME=/usr/lib/jvm/java-8-openjdk</span><br><span class="line">$ export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>

<p>注意 JAVA_HOME 的 folder 可能有所变化，注意使用实际目录。</p>
<h2 id="Node-js-setup"><a href="#Node-js-setup" class="headerlink" title="Node.js setup"></a>Node.js setup</h2><p>Node.js 不直接安装，而是选择使用 <a href="https://github.com/creationix/nvm">nvm</a> 进行管理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class="line">$ export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">  [ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</span><br><span class="line">$ command -v nvm</span><br></pre></td></tr></table></figure>

<p>使用方法：<a href="https://github.com/creationix/nvm#usage">https://github.com/creationix/nvm#usage</a></p>
<h2 id="MongoDB-setup"><a href="#MongoDB-setup" class="headerlink" title="MongoDB setup"></a>MongoDB setup</h2><p>这里其实参照<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/">官方文档</a>就行了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5</span><br><span class="line">$ echo &quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install -y mongodb-org</span><br><span class="line">$ sudo service mongod start</span><br></pre></td></tr></table></figure>

<h2 id="Change-launcher-position"><a href="#Change-launcher-position" class="headerlink" title="Change launcher position"></a>Change launcher position</h2><p>Ubuntu 默认的 Launcher 设置在了屏幕的左边，但是如果有三屏的话，那用起来其实并不方便。可以通过一个简单的命令将其下置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gsettings set com.canonical.Unity.Launcher launcher-position Bottom</span><br></pre></td></tr></table></figure>

<p>这样 Launcher 就到了屏幕下方了，就像 Windows 默认的任务栏一样。Ubuntu 会记住这个设定，所以下次登录时也无需重新输入。</p>
<h2 id="Enable-workspace"><a href="#Enable-workspace" class="headerlink" title="Enable workspace"></a>Enable workspace</h2><p>Ubuntu 16.04 默认关闭了 Workspace （即类似 OSX 的全屏切换功能），其实挺好用的。可以手动开启：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Settings -&gt; Appearance -&gt; Behavior -&gt; Enable workspaces</span><br></pre></td></tr></table></figure>

<p><img src="https://i.stack.imgur.com/wQ3hD.png" alt="enable-workspace"></p>
<p>如果有配置双屏的话，一般会想固定副屏的内容，只需在副屏标题栏右键，选择 <code>Always on Visible Workspace</code> 即可。</p>
<p><img src="https://i.stack.imgur.com/Xx7pQ.png" alt="always-on-visible-workspace"></p>
<p>默认的切换屏幕快捷键是 <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>Arrow</kbd>，跟 Intellij 的快捷键冲突了，并且与 OSX 上的不一致。可以手动修复：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Settings -&gt; Keyboard -&gt; Shortcuts -&gt; Navigation</span><br></pre></td></tr></table></figure>

<p>找到 Switch workspace to left &#x2F; right &#x2F; up &#x2F; down, 各自改成相应的 <kbd>Ctrl</kbd> + <kbd>Arrow</kbd> 即可。</p>
<h2 id="Other-apps"><a href="#Other-apps" class="headerlink" title="Other apps"></a>Other apps</h2><ul>
<li><a href="https://github.com/geeeeeeeeek/electronic-wechat">微信</a></li>
<li><a href="http://cidian.youdao.com/index-linux.html">有道词典</a></li>
<li><a href="http://music.163.com/#/download">网易云音乐</a></li>
<li><a href="http://store.steampowered.com/about/">Steam</a></li>
</ul>
<p>Linux 下可玩的 Steam 游戏还是挺多的。玩 DOTA2 感觉跟 Windows 也没什么差别。</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MEAN.js Menu Service Extension</title>
    <url>/2016/mean-js-menu-service-extension/</url>
    <content><![CDATA[<p>MEAN.js解决方案只提供了1级&#x2F;2级菜单栏的service支持，最近项目中需要用到第3级菜单，所以需要进行一个小的功能扩展。一开始我以为可以很容易地做到无限级，真正做起来以后发现并没有那么简单，所以目前通过这个办法只能达到第3级。</p>
<span id="more"></span>

<h2 id="修改Menu服务"><a href="#修改Menu服务" class="headerlink" title="修改Menu服务"></a>修改Menu服务</h2><p>初始的Menu Service中为使用者写了两个添加菜单项的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Add menu item object</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">addMenuItem</span> = <span class="keyword">function</span> (<span class="params">menuId, options</span>)</span><br></pre></td></tr></table></figure>

<p>以及</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Add submenu item object</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">addSubMenuItem</span> = <span class="keyword">function</span> (<span class="params">menuId, parentItemState, options</span>)</span><br></pre></td></tr></table></figure>

<p>第一个方法很显然就是用来添加顶级菜单了，第二个在没有看代码以前我曾经天真地以为它可以无限嵌套，然而并没有，它做的事情仅限于添加第2级菜单。所以现在我需要自己写第三个方法来完成添加第三级菜单。考虑到三级循环的效率问题，虽然一般来说菜单项不会有太多，但看起来就是非常不爽，所以我给每个Menu项都添加了一个哈希表来储存其下面所有菜单项的引用，这样多花费一点点内存就可以不用写循环嵌套了。由于使用了哈希表，对原2级菜单做了一些修改：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Add submenu item object</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">addSubMenuItem</span> = <span class="keyword">function</span> (<span class="params">menuId, parentItemState, options</span>) &#123;</span><br><span class="line">        options = options || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Validate that the menu exists</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">validateMenuExistance</span>(menuId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Search for menu item</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> itemIndex <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">menus</span>[menuId].<span class="property">items</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">menus</span>[menuId].<span class="property">items</span>[itemIndex].<span class="property">state</span> === parentItemState) &#123;</span><br><span class="line">                <span class="comment">// Push new submenu item</span></span><br><span class="line">                <span class="keyword">var</span> newSubmenuItem = &#123;</span><br><span class="line">                    <span class="attr">title</span>: options.<span class="property">title</span> || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">state</span>: options.<span class="property">state</span> || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">disabled</span>: options.<span class="property">disabled</span> || <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">roles</span>: ((options.<span class="property">roles</span> === <span class="literal">null</span> || <span class="keyword">typeof</span> options.<span class="property">roles</span> === <span class="string">&#x27;undefined&#x27;</span>) ? <span class="variable language_">this</span>.<span class="property">menus</span>[menuId].<span class="property">items</span>[itemIndex].<span class="property">roles</span> : options.<span class="property">roles</span>),</span><br><span class="line">                    <span class="attr">position</span>: options.<span class="property">position</span> || <span class="number">0</span>,</span><br><span class="line">                    <span class="attr">shouldRender</span>: shouldRender,</span><br><span class="line">                    <span class="attr">items</span>: []</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">menus</span>[menuId].<span class="property">items</span>[itemIndex].<span class="property">items</span>.<span class="title function_">push</span>(newSubmenuItem);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">menus</span>[menuId].<span class="property">menuHash</span>[newSubmenuItem.<span class="property">state</span>] = newSubmenuItem;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (options.<span class="property">items</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> options.<span class="property">items</span>) &#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="title function_">addSubMenuItemToSubMenu</span>(menuId, options.<span class="property">state</span>, options.<span class="property">items</span>[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Return the menu object</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">menus</span>[menuId];</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<p>然后是新的添加3级菜单的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//For level 3 menu items</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">addSubMenuItemToSubMenu</span> = <span class="keyword">function</span> (<span class="params">menuId, parentItemState, options</span>) &#123;</span><br><span class="line">        options = options || &#123;&#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">validateMenuExistance</span>(menuId);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> itemIndex <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">menus</span>[menuId].<span class="property">menuHash</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">menus</span>[menuId].<span class="property">menuHash</span>[itemIndex].<span class="property">state</span> === parentItemState) &#123;</span><br><span class="line">                <span class="comment">// Push new submenu item</span></span><br><span class="line">                <span class="keyword">var</span> newSubMenuItem = &#123;</span><br><span class="line">                    <span class="attr">title</span>: options.<span class="property">title</span> || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">state</span>: options.<span class="property">state</span> || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">disabled</span>: options.<span class="property">disabled</span> || <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">roles</span>: ((options.<span class="property">roles</span> === <span class="literal">null</span> || <span class="keyword">typeof</span> options.<span class="property">roles</span> === <span class="string">&#x27;undefined&#x27;</span>) ? <span class="variable language_">this</span>.<span class="property">menus</span>[menuId].<span class="property">menuHash</span>[itemIndex].<span class="property">roles</span> : options.<span class="property">roles</span>),</span><br><span class="line">                    <span class="attr">position</span>: options.<span class="property">position</span> || <span class="number">0</span>,</span><br><span class="line">                    <span class="attr">shouldRender</span>: shouldRender,</span><br><span class="line">                    <span class="attr">items</span>: []</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">menus</span>[menuId].<span class="property">menuHash</span>[itemIndex].<span class="property">items</span>.<span class="title function_">push</span>(newSubMenuItem);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">menus</span>[menuId].<span class="property">menuHash</span>[newSubMenuItem.<span class="property">state</span>] = newSubMenuItem;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">menus</span>[menuId];</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="修改Header模板"><a href="#修改Header模板" class="headerlink" title="修改Header模板"></a>修改Header模板</h2><p>原Header模板中嵌套了两层Angular循环来遍历菜单项，我们给它加一层就好了，改完以后就像这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span> <span class="attr">uib-collapse</span>=<span class="string">&quot;!isCollapsed&quot;</span> <span class="attr">role</span>=<span class="string">&quot;navigation&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span> <span class="attr">ng-if</span>=<span class="string">&quot;menu.shouldRender(authentication.user);&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">&quot;item in menu.items | orderBy: &#x27;position&#x27;&quot;</span> <span class="attr">ng-if</span>=<span class="string">&quot;item.shouldRender(authentication.user);&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">ng-switch</span>=<span class="string">&quot;item.type&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">ng-class</span>=<span class="string">&quot;&#123; active: $state.includes(item.state), dropdown: item.type === &#x27;dropdown&#x27;,disabled:item.disabled &#125;&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;&#123;&#123;item.class&#125;&#125;&quot;</span> <span class="attr">uib-dropdown</span>=<span class="string">&quot;item.type === &#x27;dropdown&#x27;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-switch-when</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">uib-dropdown-toggle</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>&#123;&#123;::item.title&#125;&#125;<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">ng-switch-when</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">&quot;subitem in item.items | orderBy: &#x27;position&#x27;&quot;</span> <span class="attr">ng-if</span>=<span class="string">&quot;subitem.shouldRender(authentication.user);&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">ui-sref-active</span>=<span class="string">&quot;active&quot;</span> <span class="attr">ng-class</span>=<span class="string">&quot;&#123;&#x27;dropdown-submenu&#x27;:subitem.items.length&gt;0,disabled:subitem.disabled&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">&quot;&#123;&#123;subitem.state&#125;&#125;&quot;</span> <span class="attr">ng-bind</span>=<span class="string">&quot;subitem.title&quot;</span> <span class="attr">ng-if</span>=<span class="string">&quot;subitem.items.length===0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">ng-bind</span>=<span class="string">&quot;subitem.title&quot;</span> <span class="attr">ng-if</span>=<span class="string">&quot;subitem.items.length&gt;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span> <span class="attr">ng-if</span>=<span class="string">&quot;subitem.items.length&gt;0&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">&quot;i in subitem.items | orderBy: &#x27;position&#x27;&quot;</span> <span class="attr">ng-if</span>=<span class="string">&quot;i.shouldRender(authentication.user);&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">ui-sref-active</span>=<span class="string">&quot;active&quot;</span> <span class="attr">ng-class</span>=<span class="string">&quot;&#123;disabled:i.disabled&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">&quot;&#123;&#123;i.state&#125;&#125;&quot;</span> <span class="attr">ng-bind</span>=<span class="string">&quot;i.title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-switch-default</span> <span class="attr">ui-sref</span>=<span class="string">&quot;&#123;&#123;item.state&#125;&#125;&quot;</span> <span class="attr">ng-bind</span>=<span class="string">&quot;item.title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav navbar-right&quot;</span> <span class="attr">ng-hide</span>=<span class="string">&quot;authentication.user&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">ui-sref-active</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">&quot;authentication.signup&quot;</span>&gt;</span>Sign Up<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;divider-vertical&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">ui-sref-active</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">&quot;authentication.signin&quot;</span>&gt;</span>Sign In<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav navbar-right&quot;</span> <span class="attr">ng-show</span>=<span class="string">&quot;authentication.user&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">uib-dropdown</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle user-header-dropdown-toggle&quot;</span> <span class="attr">uib-dropdown-toggle</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">ng-src</span>=<span class="string">&quot;&#123;&#123;authentication.user.profileImageURL&#125;&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&#123;&#123;authentication.user.displayName&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">class</span>=<span class="string">&quot;header-profile-image&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-bind</span>=<span class="string">&quot;authentication.user.displayName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">ui-sref-active</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">&quot;settings.profile&quot;</span>&gt;</span>Edit Profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">ui-sref-active</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">&quot;settings.picture&quot;</span>&gt;</span>Change Profile Picture<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">ui-sref-active</span>=<span class="string">&quot;active&quot;</span> <span class="attr">ng-show</span>=<span class="string">&quot;authentication.user.provider === &#x27;local&#x27;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">&quot;settings.password&quot;</span>&gt;</span>Change Password<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--li ui-sref-active=&quot;active&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;a ui-sref=&quot;settings.accounts&quot;&gt;Manage Social Accounts&lt;/a&gt;</span></span><br><span class="line"><span class="comment">          &lt;/li--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/api/auth/signout&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>Signout<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="修改CSS"><a href="#修改CSS" class="headerlink" title="修改CSS"></a>修改CSS</h2><p>为了让菜单看起来更自然些，这里修改的是 <code>core.css</code>，添加以下内容：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.dropdown-submenu</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dropdown-menu</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dropdown-submenu</span> &gt; <span class="selector-class">.dropdown-menu</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dropdown-submenu</span><span class="selector-pseudo">:hover</span> &gt; <span class="selector-class">.dropdown-menu</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dropdown-submenu</span> &gt; <span class="selector-tag">a</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">5px</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-left-color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> -<span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dropdown-submenu</span><span class="selector-pseudo">:hover</span> &gt; <span class="selector-tag">a</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">border-left-color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dropdown-submenu</span><span class="selector-class">.pull-left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dropdown-submenu</span><span class="selector-class">.pull-left</span> &gt; <span class="selector-class">.dropdown-menu</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">6px</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">6px</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">6px</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>3级菜单的定义方法与2级菜单一模一样，除了直接调用 <code>addSubMenuItemToSubMenu</code>  以外，还可以通过在2级菜单内定义 <code>items</code> 来实现添加子菜单，示例如下，高亮部分则为3级菜单：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Menus</span>.<span class="title function_">addMenuItem</span>(<span class="string">&#x27;topbar&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">            <span class="attr">state</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;dropdown&#x27;</span>,</span><br><span class="line">            <span class="attr">position</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">roles</span>: [<span class="string">&#x27;*&#x27;</span>],</span><br><span class="line">            <span class="attr">items</span>: [&#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">                <span class="attr">state</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">                <span class="attr">roles</span>: [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">                <span class="attr">state</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">                <span class="attr">roles</span>: [<span class="string">&#x27;*&#x27;</span>],</span><br><span class="line">                <span class="attr">items</span>: [&#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">                    <span class="attr">state</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">                    <span class="attr">roles</span>: [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">                    <span class="attr">state</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">                    <span class="attr">roles</span>: [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="实现无限级"><a href="#实现无限级" class="headerlink" title="实现无限级"></a>实现无限级</h2><p>目前看来菜单层级的限制不是在于Service代码，而在于模板。如何在模板中让Angular做一个DFS搜索才是重点。Angular貌似没有提供类似的API，要做的话比较好的办法应该是自己写一个指令。以后有时间再来实现。</p>
]]></content>
      <tags>
        <tag>angularjs</tag>
      </tags>
  </entry>
  <entry>
    <title>MEAN.js 学习笔记</title>
    <url>/2015/mean-js-note/</url>
    <content><![CDATA[<p><img src="https://static.wxsm.space/blog/48595806-414e9980-e991-11e8-8e9c-1922fa56a501.png"></p>
<p>之前一直以为 MEAN 只是一个概念上的东西，表示以 <a href="http://mongodb.org/">Mongodb</a> <a href="http://expressjs.com/">Express</a> <a href="http://angularjs.org/">AngularJs</a> <a href="http://nodejs.org/">NodeJs</a> 为基础的全栈应用开发模式。这几天在公司接手相应项目的时候发现已经有人做出来并且维护着一些这样的 App 结构体，用过以后觉得还不错。<a href="https://github.com/meanjs/mean">MEANJS</a> 是一个开源的 JavaScript 全栈应用解决方案，主要用到的技术自然就是以上提到的那些。使用成熟的解决方案可以使自己的项目更加易于开发以及维护，等等好处就不再赘述。</p>
<span id="more"></span>

<h2 id="关于MEAN"><a href="#关于MEAN" class="headerlink" title="关于MEAN"></a>关于MEAN</h2><p>本文主要关注 MEANJS本 身，对于MEAN之中的种种技术就不再多做介绍。下面贴MEANJS给出的一些链接。</p>
<ul>
<li>MongoDB - Go through <a href="http://mongodb.org/">MongoDB Official Website</a> and proceed to their <a href="http://docs.mongodb.org/manual/">Official Manual</a>, which should help you understand NoSQL and MongoDB better.</li>
<li>Express - The best way to understand express is through its <a href="http://expressjs.com/">Official Website</a>, which has a <a href="http://expressjs.com/starter/installing.html">Getting Started</a> guide, as well as an <a href="http://expressjs.com/guide/error-handling.html">ExpressJS Guide</a> guide for general express topics. You can also go through this <a href="http://stackoverflow.com/questions/8144214/learning-express-for-node-js">StackOverflow Thread</a> for more resources.</li>
<li>AngularJS - Angular’s <a href="http://angularjs.org/">Official Website</a> is a great starting point. You can also use <a href="http://www.thinkster.io/">Thinkster Popular Guide</a>, and the<a href="https://egghead.io/">Egghead Videos</a>.</li>
<li>Node.js - Start by going through <a href="http://nodejs.org/">Node.js Official Website</a> and this <a href="http://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js">StackOverflow Thread</a>, which should get you going with the Node.js platform in no time.</li>
</ul>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>作为一个集大成者，MEANJS 需要的运行环境还是挺多的，但是相对 Java 项目来说简直不值一提。</p>
<ul>
<li><strong>NodeJs</strong> - 没有 Node 谈何 MEAN，注意的是目前的 MEANJS 版本（0.3.x）还不支持最新的 5.x NodeJs，我就中了这招</li>
<li><strong>MongoDB</strong> - 和 NodeJs 的集成比较好，下载安装包一路 next 即可</li>
<li><strong>Ruby&#x2F;Python&#x2F;.Net 2+</strong> - 一些 Node 的模块需要用到这些东西，毕竟 Node 只是一个 runtime，在服务器端一些稍微底层的操作还是要用到其他东西（12-14-2015更新：Python必须是 2.x 版本）</li>
<li><strong>Bower</strong> - 前端包管理器，和 npm 组成一前一后的完整管理体系，相当于 Java 的 Maven</li>
<li><strong>Grunt&#x2F;Grunt CLI</strong> - JavaScript 世界的自动化工具，重复工作全靠它。CLI 是 Grunt 的命令行工具。</li>
<li><strong>Sass&#x2F;Less</strong> - MEANJS 用到了 Sass 去编译 CSS，所以也要添加它的支持。其实我个人感觉这个有点多余了。</li>
</ul>
<h2 id="启动-MEANJS-APP"><a href="#启动-MEANJS-APP" class="headerlink" title="启动 MEANJS APP"></a>启动 MEANJS APP</h2><h3 id="安装依赖模块"><a href="#安装依赖模块" class="headerlink" title="安装依赖模块"></a>安装依赖模块</h3><p>完成以上安装以及相应环境变量的配置以后，就可以准备启动 MEANJS 服务器了。首先需要在文件夹根目录运行 <code>$ npm install</code> 指令，根据 Readme 中的说法，这条指令做了以下的事情：</p>
<ol>
<li>安装运行所需的 Node 模块</li>
<li>如果是测试环境则安装开发测试所需的 Node 模块</li>
<li>最后执行 bower 安装前端模块</li>
</ol>
<p>不过我在最后一步有时候会遇到问题，需要手动再进行一次 <code>$ bower install</code>，另外，npm 的官方源在大陆访问并不稳定，可以使用 <a href="http://npm.taobao.org/">淘宝镜像</a> 替代，Ruby 也是同理：<a href="https://ruby.taobao.org/">Ruby镜像</a> 。</p>
<p>12-14-2015 更新：这一步容易出现问题，一般仔细看 Log 都能找到问题所在，无非是哪个依赖没有配置环境变量&#x2F;版本不对等，重新配置好以后删除 <code>Node_modules</code> 文件夹再重新运行命令。</p>
<h3 id="启动-Mongodb"><a href="#启动-Mongodb" class="headerlink" title="启动 Mongodb"></a>启动 Mongodb</h3><p>因为 MEANJS 默认为我们做了一个简单的用户注册登录模块，里面有一些数据库的增删查改，所以在启动服务器之前需要先启动数据库。随便找一个地方打开控制台输入 <code>$ mongod --dbpath ***</code>，<code>\***</code> 处填写一个路径，<code>mongod</code> 就能够在指定位置创建一个文件型数据库并连接之，如果该位置已存在数据库文件则会直接打开连接。</p>
<h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><p>在以上都准备完成以后，我们就可以在项目根目录通过一条简单的指令 <code>$ grunt</code> 来启动服务器了，启动成功后可以在 <a href="http://localhost:3000/">http://localhost:3000</a> 看到项目主页。</p>
<h3 id="关于Grunt"><a href="#关于Grunt" class="headerlink" title="关于Grunt"></a>关于Grunt</h3><p><code>$ grunt</code> 这条指令会读取项目目录下的 <code>gruntfile.js</code>** **文件，并执行文件中定义的 task。MEANJS 的文档中并没有对其功能进行说明，以下是我的解读：</p>
<h4 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h4><p>以下都是 grunt task 中用到的插件的相关配置，具体插件以及相关文档都可以在 <a href="http://www.gruntjs.net/plugins">Grunt插件页面</a> 找到。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">env</span>: &#123;</span><br><span class="line">  <span class="attr">test</span>: &#123;</span><br><span class="line">    <span class="attr">NODE_ENV</span>: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">dev</span>: &#123;</span><br><span class="line">    <span class="attr">NODE_ENV</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">prod</span>: &#123;</span><br><span class="line">    <span class="attr">NODE_ENV</span>: <span class="string">&#x27;production&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>env</strong> 定义了三个服务器的运行环境：测试，开发，以及产品，在文件的最后会用到。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//......</span></span><br><span class="line">defaultAssets = <span class="built_in">require</span>(<span class="string">&#x27;./config/assets/default&#x27;</span>),</span><br><span class="line">testAssets = <span class="built_in">require</span>(<span class="string">&#x27;./config/assets/test&#x27;</span>),</span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="attr">serverViews</span>: &#123;</span><br><span class="line">    <span class="attr">files</span>: defaultAssets.<span class="property">server</span>.<span class="property">views</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="attr">livereload</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>watch</strong> 指定了动态监听的目录&#x2F;文件，可以看到在每一个 View&#x2F;Js&#x2F;Css 监听列表中都加入了 <code>livereload</code> 选项，这个选项的作用是当被监听的文件发生变化时，浏览器会自动刷新。不过 watch 会再创建一个监听端口（默认为 35729），打开 <a href="http://localhost:35729/">http://localhost:35729/</a> 可以发现。被加载的首先是配置文件 <code>./config/assets/default.js</code> 与相应的 <code>test.js</code> 等，然后再配置文件内可以找到文件列表，其中已经包括已经用到的以及将来会加入的文件（通过通配符实现），只要我们在开发时把文件放在相应结构位置上，grunt 就会自动监听。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">nodemon</span>: &#123;</span><br><span class="line">  <span class="attr">dev</span>: &#123;</span><br><span class="line">    <span class="attr">script</span>: <span class="string">&#x27;server.js&#x27;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="attr">nodeArgs</span>: [<span class="string">&#x27;--debug&#x27;</span>],</span><br><span class="line">      <span class="attr">ext</span>: <span class="string">&#x27;js,html&#x27;</span>,</span><br><span class="line">      <span class="attr">watch</span>: _.<span class="title function_">union</span>(defaultAssets.<span class="property">server</span>.<span class="property">gruntConfig</span>, defaultAssets.<span class="property">server</span>.<span class="property">views</span>, defaultAssets.<span class="property">server</span>.<span class="property">allJS</span>, defaultAssets.<span class="property">server</span>.<span class="property">config</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>nodemon</code> 配置了服务器自动重启。当 server 端的 config&#x2F;views&#x2F;js 文件发生变化时，<code>server.js</code> 脚本就会自动执行。由于只是服务器的重启而不是重新执行 grunt，所以几乎是秒速。以前用过一些类似的 node module 叫 supervisor 和 forever，不过这个集成到了 grunt task 中。写过 JavaEE project 的人再用这个才能体会到时间的宝贵。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">concurrent</span>: &#123;</span><br><span class="line">  <span class="attr">default</span>: [<span class="string">&#x27;nodemon&#x27;</span>, <span class="string">&#x27;watch&#x27;</span>],</span><br><span class="line">  <span class="attr">debug</span>: [<span class="string">&#x27;nodemon&#x27;</span>, <span class="string">&#x27;watch&#x27;</span>, <span class="string">&#x27;node-inspector&#x27;</span>],</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">logConcurrentOutput</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>concurrent</code> 插件可以使任务并发执行，让前端与服务器端监听同时在一个终端窗口中执行&#x2F; Log</p>
<p><code>cshint/csslint</code> 这两个插件主要是为了在 build 的时候顺便检查一下 js&#x2F;css 文件中有没有常见的 warning &#x2F; error，存在 error 时会停止 build task 并给出提示，不过控制台输出用户体验不是很好，开发过程中作用不大，我们都有 IDE，需要作为产品上线时跑一遍可能会更有参考价值。</p>
<p>后面的 <code>ngAnnotae</code> 插件可以在build的过程中对 angular js 的 annotation 进行简化以减少代码量，提高效率，属于锦上添花型。<code>uglify/cssmin</code> 则相应地执行 js&#x2F;css 代码压缩任务。至于 <code>sass/less</code> 很明显就是 css 编译器了。再之后的多是 debug &#x2F; test 插件。</p>
<h4 id="注册任务"><a href="#注册任务" class="headerlink" title="注册任务"></a>注册任务</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">grunt.<span class="title function_">registerTask</span>(<span class="string">&#x27;taskName&#x27;</span>, [<span class="string">&#x27;***&#x27;</span>, <span class="string">&#x27;***&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>类似像这样的代码就是向grunt注册一个任务，第二个数组参数则是注册任务的内容，里面可以填另一个任务的名字或者是插件的名字，或者直接填写 function 取代该数组。通过在控制台输入 <code>$ grunt taskName</code> 执行任务，而不输入 taskName 的话则是执行 default 任务，当前 <code>gruntfile.js</code> 中的 default task 如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Run the project in development mode</span></span><br><span class="line">grunt.<span class="title function_">registerTask</span>(<span class="string">&#x27;default&#x27;</span>, [<span class="string">&#x27;env:dev&#x27;</span>, <span class="string">&#x27;lint&#x27;</span>, <span class="string">&#x27;mkdir:upload&#x27;</span>, <span class="string">&#x27;copy:localConfig&#x27;</span>, <span class="string">&#x27;concurrent:default&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>这个任务里面包含了一些子任务，就不一一说明了，有兴趣的可以自行查看，到这里终于可以说说 <code>$ grunt</code> 指令到底做了什么：</p>
<ol>
<li>设置运行环境为 dev，即开发</li>
<li>执行 js&#x2F;css 等文件的语法检查</li>
<li>确保上传路径存在（MEANJS 默认带了一个用户上传头像的功能）</li>
<li>加载一个自定义配置文件（里面可以填写 db 以及一些 api key 等信息）</li>
<li>default 模式启动 concurrent 前后端热部署</li>
</ol>
<p>可以看到这里面并没有启动服务器的指令，其实在nodemon中已经配置了服务器入口即 <code>server.js</code>。于是在所有准备工作完成后，开发环境的服务器就启动起来了。</p>
<p>当然 gruntfile 中也包含了 dev 以及 tes t环境的 task，需要切换运行环境的时候只需要在 grunt 命令中加入相应参数即可，还是比较方便的。</p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h3 id="根目录结构"><a href="#根目录结构" class="headerlink" title="根目录结构"></a>根目录结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── bower.json</span><br><span class="line">├── config</span><br><span class="line">├── gruntfile.js</span><br><span class="line">├── modules</span><br><span class="line">├── package.json</span><br><span class="line">└── server.js</span><br></pre></td></tr></table></figure>

<p>以上是精简过后的根目录组成，不包括node_modules和public文件夹，以及一些optional和test相关的文件。</p>
<ul>
<li><strong>bower.json&#x2F;package.json</strong> - 前端&#x2F;后端依赖说明文件，需要添加依赖时在文件里指定 ID &#x2F;版本，再运行 <code>$ bower install</code> 或者 <code>$ npm install</code> 就会将指定包下载到 <code>node_modules/public</code> 文件夹中</li>
<li><strong>gruntfile.js</strong> - grunt 任务配置文件</li>
<li><strong>server.js</strong> - 服务器启动文件</li>
<li><strong>config</strong> - 配置文件</li>
<li><strong>modules</strong> - App 模块，也就是需要我们大量写代码的地方了，可以看到 MEANJS 项目已经包含了若干模块，我们可以在这基础之上添加自己的业务逻辑，或者推到重来</li>
</ul>
<p>由于 MEANJS 的目录原则是模块优先，所以前后端的 MVC 会在相应模块目录内得到体现，这点与使用 express js 创建的目录结构有所区别。不过之前公司一位 STE share ExtJs 的时候提到其实都是大同小异，反正到最后目录结构都会变得臃肿。</p>
<h3 id="模块结构"><a href="#模块结构" class="headerlink" title="模块结构"></a>模块结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">modules</span><br><span class="line">│   └── moduleName</span><br><span class="line">│       ├── client</span><br><span class="line">│       │   ├── config</span><br><span class="line">│       │   ├── controllers</span><br><span class="line">│       │   ├── css</span><br><span class="line">│       │   ├── img</span><br><span class="line">│       │   ├── services</span><br><span class="line">│       │   └── views</span><br><span class="line">│       └── server</span><br><span class="line">│           ├── config</span><br><span class="line">│           ├── controllers</span><br><span class="line">│           ├── models</span><br><span class="line">│           ├── policies</span><br><span class="line">│           ├── routes</span><br><span class="line">│           └── templates</span><br></pre></td></tr></table></figure>

<p>一个模块一般包含以上目录，首先从前端&#x2F;后端分开，然后是各自的配置&#x2F; MVC，非常科学。值得一提的是每个模块各自用到的独立 css &#x2F; image 等资源也是分开存放的，grunt 会在 build 的时候把它们全部读取并且载入，如果是 production 环境更会将同类压缩到一个文件中去，所以我们并不需要写很多的 include 之流。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>相对于手动使用 MEAN 各项技术结合写程序来说，使用 MEANJS 解决方案可以让我们更方便且快速地搭建项目，并且使我们不用太过于关注业务逻辑以外的问题，开发效率在全栈统一的保证下又提高了不少，不得不说确实是值得中小型项目去研究并且尝试使用一下。至于企业级大型项目，不知道有没有研究或者什么公司尝试过，不太清楚是否适合。</p>
]]></content>
      <tags>
        <tag>mongodb</tag>
        <tag>angularjs</tag>
        <tag>nodejs</tag>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>MEAN.JS 搭配 forever 使用以防止 app crash</title>
    <url>/2016/mean-js-use-forever-to-prevent-app-crash/</url>
    <content><![CDATA[<p>MEANJS 预设的 Grunt task 中没有提供类似出错自动重启的任务，因此当实际使用它搭建了一个 app 部署到服务器上后发现经常有一些奇怪的问题导致其崩溃挂掉。然而根据 log 来看问题应该不是由于项目代码导致的，可能是 MEANJS 本身的问题，也可能是某些 Lib 的问题。这种情况下，我能想到的暂时性解决方案就是使用 forever 了。</p>
<p>个人觉得 MEANJS 在 production mode 中也使用 nodemon 来跑 watch 任务有些鸡肋，因为我们并不需要在产品服务器上频繁地更改代码。因此，我直接把它替换掉了。</p>
<span id="more"></span>

<p>这里需要注意的是，我们不能直接用 forever 去跑 <code>server.js</code> 脚本，因为这样的话下层代码拿不到 env settings，就会把启动模式设置为默认的开发模式。</p>
<p>因为 MEANJS 中已经自带了 forever 模块，所以就不用装它本身了，但是要安装 forever 的 grunt 插件：grunt-forever</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install grunt-forever -save</span><br></pre></td></tr></table></figure>

<p>在 tasks（initConfig） 中加多一项：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">forever</span>: &#123;</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="attr">index</span>: <span class="string">&#x27;server.js&#x27;</span>,</span><br><span class="line">        <span class="attr">logFile</span>: <span class="string">&#x27;log.log&#x27;</span>,</span><br><span class="line">        <span class="attr">outFile</span>: <span class="string">&#x27;out.log&#x27;</span>,</span><br><span class="line">        <span class="attr">errFile</span>: <span class="string">&#x27;err.log&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里指定了 forever 执行的对象，以及 log 文件名，路径可以不指定，默认为项目根目录下的 forever 文件夹。因为这个插件生成的是守护进程，所以 log 只能输出到文件啦。</p>
<p>最后更改一下 prod task：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Run the project in production mode</span></span><br><span class="line">grunt.<span class="title function_">registerTask</span>(<span class="string">&#x27;prod&#x27;</span>, [<span class="string">&#x27;build&#x27;</span>, <span class="string">&#x27;env:prod&#x27;</span>, <span class="string">&#x27;mkdir:upload&#x27;</span>, <span class="string">&#x27;copy:localConfig&#x27;</span>, <span class="string">&#x27;forever:server:start&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>OK，大功告成。</p>
<p>启动 production 服务器方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grunt prod</span><br></pre></td></tr></table></figure>

<p>重启方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grunt forever:server:restart</span><br></pre></td></tr></table></figure>

<p>停止服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grunt forever:server:stop</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
]]></content>
      <tags>
        <tag>angularjs</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>MEAN.JS 在 0.5 版本下发现的 NG-REPEAT 闪动问题</title>
    <url>/2017/meanjs-5-x-ng-repeat-flashing/</url>
    <content><![CDATA[<p>如题，经过长期痛苦的观察以及 debug 过程，以下原因被一一排除：</p>
<ul>
<li>浏览器差异问题</li>
<li>数据更新问题</li>
<li><code>ng-repeat</code> 没有添加 <code>track by key</code> 导致的性能问题</li>
<li>Angular 版本问题</li>
<li>MEAN.js 架构问题</li>
</ul>
<p><strong>实际原因却是因为 MEAN.js 在全局引入了 <code>ngAnimate</code> 依赖。</strong>（也算是一个架构问题？）</p>
<p>因此解决办法：</p>
<ul>
<li>要么将全局依赖去掉，改为各自添加依赖</li>
<li>要么使用 <code>transition: none !important</code></li>
</ul>
<span id="more"></span>]]></content>
      <tags>
        <tag>angularjs</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>克罗恩病患病与治疗记录</title>
    <url>/2019/my-crohns-disease-and-treatment-records/</url>
    <content><![CDATA[<blockquote>
<p>克罗恩病是一种原因不明的肠道炎症性疾病，在胃肠道的任何部位均可发生，但好发于末端回肠和右半结肠。本病和慢性非特异性溃疡性结肠炎两者统称为炎症性肠病（IBD）。本病临床表现为腹痛、腹泻、肠梗阻，伴有发热、营养障碍等肠外表现。病程多迁延，反复发作，不易根治。本病又称局限性肠炎、局限性回肠炎、节段性肠炎和肉芽肿性肠炎。目前尚无根治的方法，许多病人出现并发症，需手术治疗，而术后复发率很高。本病的复发率与病变范围、病症侵袭的强弱、病程的延长、年龄的增长等因素有关，死亡率也随之增高。</p>
</blockquote>
<p>现在是 2019 年 10 月，大约是我患克罗恩病（CD）的第 10 个年头。我写这篇记录的目的是记录自己的治疗过程，同时也为他人提供参考。</p>
<span id="more"></span>

<h2 id="患病经历"><a href="#患病经历" class="headerlink" title="患病经历"></a>患病经历</h2><p>大约在 10 年前，我高二在读，那时候第一次出现以肠胃为主的身体不适，主要表现为<strong>发热、腹泻、腹胀、腹痛</strong>，但是由于缺乏经验与警觉，以为是普通的肠胃炎，并没有引起重视。秉着能拖就拖的精神，可能持续了一到两个月，拖到实在是受不了了，就回家进行了第一次就医、住院。诊治医院为广东省四会市万隆医院（二甲），做了胃镜、肠镜，诊断为胃溃疡+肠溃疡（年代久远，记不太清了，大概是这样）。静脉注射了一种我记得叫雷尼替丁的药物，辅以口服抗生素，经过约 1~2 周的治疗，病情好转，大便成形，即转出院。</p>
<p>之后经过了较长一段时间的缓解期，期间几乎与常人无异，直到高三末期，炎症复发。</p>
<p>那段时间的印象比较深刻，也是因为症状达到了一种相当严重的地步，<strong>午后（大概六点过后）高热不退，频繁腹泻（几乎每节课下课后我都必须在第一时间上厕所），腹痛等等</strong>。但由于临近高考，一直没有请假治疗。直到高考前一个月左右，我实在是无以为继了，于是请假，继续来到上述医院住院诊治。这次医生排除了肿瘤、结核等疾病，最后诊断为慢性溃疡性结肠炎（UC），治疗方式大致同上，同样在经过约 1~2 周的治疗以后，病情好转，大便成形，即转出院。出院后我依然在遵医嘱口服大量抗生素，书桌里几乎塞满了药物。持续到高考结束。</p>
<p>但是这一次治疗以后状态的持续明显没有第一次那么久，症状很快又回来了。</p>
<p>大学四年时期是我病症拖延最严重的时期，<strong>午后发热、频繁腹泻腹痛</strong>，期间也经历了一次住院，但由于个人原因产生了一些消极情绪，不配合检查，诊断也没有进展，依旧按照之前的方法在治疗。然而这一次治疗效果持续时间则更短，让我感到极其负面，也逐渐开始拒绝就医，觉得医生也没办法治好我。开始自作主张服用先前医生开过的抗生素，自然是毫无疗效，让我越发沮丧。四年期间病情大约一半时间处于缓解期，另一半则处于活动期，断断续续，时好时坏。苦不堪言。即使在这种时候，我依然觉得我得的只是普通的慢性肠炎，丝毫没有意识到即使是溃疡性结肠炎（UC）其实也是一种严重的终生不愈的疾病，况且我还不是 UC。</p>
<p>可以预见，这种盲目乐观所带来的惨痛代价即将到来。</p>
<h2 id="第一次手术"><a href="#第一次手术" class="headerlink" title="第一次手术"></a>第一次手术</h2><p>2015 年 9 月某日，我突然觉得屁股开始疼痛，这股疼痛极速发展，很快便到了让人坐立不安的程度。期间我慢慢地感受到肛周某处有一肿块，开始是坐着有点疼，后来是坐着疼走路也疼，最后发展到即使躺着也疼。期间某一天忍无可忍去中大五院看了急诊，急诊医生诊断为肛周脓肿，建议手术。但由于我感到害怕，要求先进行保守治疗试试，于是就打了几天的静脉消炎滴注，然而并没有什么卵用，脓肿依然极速发展，但仍然没有引起我的重视，我总抱着一种它会自愈的天真想法，国庆期间甚至还带病回了趟家。直到假期结束，脓肿发展到让我即使躺着不动也大汗淋漓的时候，我才意识到问题的严重性：手术治疗已经迫在眉睫。由于三甲医院需要等床位，我一刻都等不了了，便找了一家莆田医院。当天的情况时至今日我依然记忆犹新：公交下车走到医院几百米的距离，几乎是要了我的命。</p>
<p>外科医生为我做了根治术，即脓肿切除+挂线，一共挂了三根橡皮筋，愈合过程大概持续了两个月，期间苦不堪言。</p>
<p>由于愈合时间持续过长，让我感到情绪低落，大概在两个月后我因此又住进了中大五院肛肠外科，也是在这个时期内第一次有医生提到了，我可能是患了克罗恩病（CD）。</p>
<p>此时，距我症状初现的时候已经过去了大约六年。</p>
<p>我和家属迅速地查阅了 CD 的相关资料，不料其症状竟如此亲切。住院期间在医生建议下进行了 CT 检查，随即确诊为 CD。外科医生开立口服美沙拉秦治疗方案，剂量高达 12 片一天 (6.0g&#x2F;d)。</p>
<p>这个剂量的美沙拉秦我总共服用了大概有两年多，中间有一段时间因为自我感觉良好以及美沙拉秦费用高昂，擅自决定停药长达约一年，后来在 18 年的时候症状复发，在医生建议下做了一次肠镜，发现肠道已呈鹅卵石状，并有狭窄，只能进镜 25cm，便又开始服用。期间一直是找的胃肠外科医生诊治。状况时好时坏，偶尔会出现一些体外症状，如<strong>发热，虹膜炎，关节疼痛，牙齿松动，肛周疼痛等</strong>，但会自愈，所以也没有太注意。</p>
<h2 id="第二次手术"><a href="#第二次手术" class="headerlink" title="第二次手术"></a>第二次手术</h2><p>18 年底开始的一年多时间内我大部分时间都处于无症状期，让我再一次误以为我的疾病已经被控制住了。这次我没有停药，坚持服用美沙拉秦，但开始考虑减少剂量。</p>
<p>直到 2019 年 8 月，我因持续午后发热与肛周脓肿复发不愈，再次住院手术，此后我才对外科医生的诊治产生了怀疑，开始更深入地学习克罗恩病，发现此病应该看消化内科，外科只能作为内科用药控制失败的辅助治疗。说来也可笑，后来内科医生得知我是克罗恩病时当即就提出了一个疑问，说我为什么一直在外科看病。我也是觉得奇怪，因为我不知道啊，外科医生也没有建议我转诊到内科啊？倒是第二次肛周脓肿手术住院时期，有一个从外地来进修的医生详细询问我的病症后提示我不应该看外科，应该去看免疫科。</p>
<p>说来也是奇怪，在手术前一天我还是持续午后发热状态，手术后第一天开始直到一个月后我痊愈上班，期间都再没有发热过。而上班第一天我又开始了午后发热，这立即让我产生警觉。我开始尝试排除一些因素，如中午休息、饮用水、三餐等。后来发现，只要我不喝公司的饮用水，我就不会发热（公司的饮用水是直饮水，可能存在某些不得而知的问题）。后来再经过观察，公司的水如果烧开再引用，也没有问题。</p>
<p>第二次手术后我开始变得警觉起来，会观察各种食物对我产生的影响，避免会导致问题的食物。在这期间我开始觉得饮食确实非常重要，可以对疾病控制起到至关重要的作用。</p>
<p>在消化内科看完后，发现内科医生与外科医生有许多说法不一致的地方，用药也是天差地别，更是提出我一直在坚持服用 5-ASA 类药物（美沙拉秦，柳氮氨磺吡啶）对此病几乎毫无作用，这才知道之前我到底走了多少弯路，不由感叹。内科医生提示我病情已较严重，建议使用生物制剂治疗（类克），费用高昂但疗效立竿见影，并当即要求住院检查诊治。也就是在这个时间点，我写下了这篇记录。</p>
<p>以后的治疗进展，我会持续更新。</p>
<h2 id="2019-10-21"><a href="#2019-10-21" class="headerlink" title="2019&#x2F;10&#x2F;21"></a>2019&#x2F;10&#x2F;21</h2><p>在中大五院住院 8 天。</p>
<p>住院期间做了肠镜、胃镜、CTE（小肠造影）、MRI（盆腔），肠镜病理没有取到诊断依据，由于 CTE 显示小肠（除回肠末端外）无异常，胃镜大部分正常，让医生的诊断陷入了难处：无法确诊是 UC 还是 CD，经过 MDT 会诊后，主任医生建议：全肠内营养，复查胸部 CT，排除结核后开始用激素治疗。由于我目前处于缓解期，暂时不想接受进一步检查和治疗，医生也表示理解、同意，所以就出院了。</p>
<p>从检查结果上看，目前存在的问题是：</p>
<ol>
<li>部分结肠存在结节样隆起（鹅卵石），导致部分肠腔狭窄，并且已纤维化</li>
<li>肛瘘（1 个内口，1 个外口）</li>
</ol>
<p>可能导致的严重结果：</p>
<ol>
<li>肠梗阻</li>
<li>肠穿孔</li>
</ol>
<p>除此以外倒还好。住院期间医生也建议类克，不过我觉得还是等活动期再打吧，毕竟现在打也不好评估疗效。至于肠内营养，每个医生的建议都有区别，有建议全肠内营养的，有建议肠内营养为主的，有建议日常饮食为主的，我目前开始吃安素作为辅助营养，希望能有帮助。</p>
<h2 id="2019-12-25"><a href="#2019-12-25" class="headerlink" title="2019&#x2F;12&#x2F;25"></a>2019&#x2F;12&#x2F;25</h2><p>在中大六院住院 7 天。</p>
<p>做了肠镜、胃镜、MRE，以及一堆抽血项目，检查结果和上次差不多。由于存在狭窄不能用类克，另外由于营养不良用激素效果预计也不好，所以医生建议禁食+鼻饲三个月后再复查，说是鼻饲的疗效与激素相当，有可能可以让炎症愈合以及让炎性狭窄缓解，于是就插管了。每天 4 瓶百普力 + 12 勺安素，三个月。虽然难受但是也没办法。</p>
<p>六院有许多同病相怜的病友，我也从中获得了一些帮助与鼓励。</p>
<h2 id="2020-04-07"><a href="#2020-04-07" class="headerlink" title="2020&#x2F;04&#x2F;07"></a>2020&#x2F;04&#x2F;07</h2><p>肠内营养两周后复查了血常规，结果显示 CRP 12.08mg&#x2F;L，但是血小板达到了 500 多，ESR 依然高位 69 mm&#x2F;h，血红蛋白有所好转，结果有所好转，但不是很理想。</p>
<p>四周后复查了肠道彩超，报告总结：</p>
<blockquote>
<p>6组小肠、回肠末段、升结肠、横结肠、降结肠多发肠壁增厚，血供不丰富，考虑炎症不活动，请结合临床。</p>
</blockquote>
<p>这个报告看起来还不错。</p>
<p>三个月后住院大复查，CRP 30+，ESR 40+，血小板接近正常值，血红蛋白等回到正常值。</p>
<p>肠镜结果并不理想。因为结肠有多处狭窄，乙状结肠的稍有好转，肠镜能通过了，但降结肠的狭窄肠镜依然无法通过。但医生说炎症有所好转，直观的表现就是以往肠镜报告见得最多的字眼是「充血水肿」，这次没有了，改为「粘膜粗糙」。我猜可能是愈合的表现？</p>
<p>CTE 结果同样不理想。提示病变较前区别不大。</p>
<p>虽然结果在我看来不太好，但医生说从炎症角度来看好转还是明显的。根据检查结果，医生经过慎重考虑，并且与胡品津教授商定后，建议我做外科手术，把结肠整个切除，造口一段时间，然后把小肠与直肠接上。医生的考虑是我的小肠是好的，所以希望通过完全切除病变部位来达到一个较好的短期效果，同时避免因为病变肠道可能带来的风险：比如说由于狭窄而导致的梗阻，以及狭窄前端肠壁变薄导致的扩张穿孔，以及直肠病变控制不好导致不得不切除直肠，需要终生造口等。</p>
<p>但说实话这个结果对我打击很大，思考了很久，也与家人商量了，我们还是不愿意接受手术，希望先维持保守治疗，不想这么快放弃病变肠道。我完全相信医生给的方案是综合各种因素权衡利弊以后给出的最佳方案，医生的目的就是让病人尽快恢复正常生活，可以正常饮食。但是我作为病人我有自己的考虑，我想要的是长期利益。只要还没有到最后关头，我不愿意就这么放弃了。</p>
<p>更何况这个病不是切一次就能痊愈的。我不是没见过手术做了十几次肠子已经切无可切的病友。</p>
<p>好在医生最后也同意我保守治疗，但是代价就是需要继续严格鼻饲三个月。因此我在定方案以后更换了一条鼻饲管，并在当天（03&#x2F;18）接受了第一次类克治疗（300mg），第二天就出院了。</p>
<p>在注射类克以后的第二天起，我的身体体征就有大幅改善，在注射类克之前平均每天约 4-5 次水便，便量较多。注射以后平均每天 1-2 次稀便，同时大便总量有大幅减少，大概只有以前的 1&#x2F;4，或者更少。同时肛瘘部位也安静了，不肿不痛不痒不流脓。</p>
<p>两周以后（04&#x2F;01），我在中大五院接受了第二次类克治疗。这一次抽血复查结果有大幅改善。CRP 与 ESR 都已接近正常值，其它血液指标也较好，可以说是我四五年来做过的最好的一次血常规。</p>
<p>各种指征是好了很多，但是我现在最担心的就是第四次类克前的复查，万一结果还是不好，那我还是避免不了要考虑手术的事。</p>
<h2 id="2020-05-21"><a href="#2020-05-21" class="headerlink" title="2020&#x2F;05&#x2F;21"></a>2020&#x2F;05&#x2F;21</h2><p>在 4 月 29 日接受了第三次类克治疗，各项指标基本正常。</p>
<p>5 月份开始没有继续用百普力，换用了较为便宜的瑞素。没想到瑞素可能更适合我，自从用瑞素开始大便就变成了两天一次，而且能成型。经过 20 多天以后，现在大便稳定一天一次。</p>
<p>现在就等第四次类克复查了。</p>
<h2 id="2020-06-22"><a href="#2020-06-22" class="headerlink" title="2020&#x2F;06&#x2F;22"></a>2020&#x2F;06&#x2F;22</h2><p>6 月 15 （周一）号到中六住院，做了检查（结肠镜、CTE），结果意外地好。于是 18 号（周四）就拔了鼻饲管，打了第四次类克，出院了。</p>
<p>这一次的肠镜结果：</p>
<blockquote>
<p>插镜情况: 进镜约65cm顺利达回肠末段。<br>回肠末段：所见黏膜未见异常。<br>回 盲 瓣: 所见黏膜未见异常，回盲瓣呈唇状。<br>阑尾内口: 阑尾口呈弧形。<br>盲 肠：所见黏膜未见异常。<br>升 结 肠：所见黏膜未见异常。<br>结肠肝曲：所见黏膜未见异常。<br>横 结 肠-乙状结肠：距肛缘约27-55cm见散在直径约0.3-0.6cm结节样增生及疤痕改变，距肛缘约37cm及30cm分别感肠腔狭窄稍固定，直径约10.5mm内镜可勉强通过。<br>直 肠: 所见黏膜未见异常。<br>肛　　门: 未见异常。</p>
</blockquote>
<p>CTE 结果：</p>
<blockquote>
<p>克罗恩病复查：回肠末段、盲肠、升结肠、横结肠、降结肠多节段病变伴结肠部分狭窄，病变范围较前缩小，炎症程度较前好转，提示缓解期。</p>
</blockquote>
<p>虽然狭窄依然存在，但是黏膜完全愈合，是这么多年来最正常的一次了。因此医生没有建议立刻进一步的治疗，而是说过一段时间再看看需不需要做内镜扩张。另外，主任认为类克对我效果好，建议加依木兰加强疗效。但是这一次出院暂时还不用。说下次门诊再去评估。</p>
<p>医生说我可以半肠内营养（也就是可以吃点东西）了。不过我现在并不想立即就恢复饮食。先吃一段时间安素看看吧。毕竟这 6 个月得来的成果，可以说来之不易。</p>
<h2 id="2020-10-26"><a href="#2020-10-26" class="headerlink" title="2020&#x2F;10&#x2F;26"></a>2020&#x2F;10&#x2F;26</h2><p>如今我已经打完了 6 次类克，将在 11 月底进行第七次注射，一个疗程也快走完了。</p>
<p>6 月份出院以后大约吃了一个月左右的全肠内（安素），然后逐渐转为半肠内 + SCD 食物，到今天已经基本就是 SCD 饮食了。期间没有健康状况没有出过大问题，基本保持在 6 月份的水准：</p>
<ol>
<li>血液指标基本能够维持在正常范围内；</li>
<li>炎症指标（CRP、血沉）无异常；</li>
<li>体重有所降低，目前大约在 55~56 公斤左右。</li>
</ol>
<p>虽然医生一直在建议我加药（硫唑嘌呤），但是我和我的家人都不是很想加。主要原因是它的副作用太大了，尤其是与类克并用的时候，说是毒药也不为过。我们有自信通过食疗来控制病情，因此暂时不想借助这个药物。</p>
<p>另外，值得一提的一点是，我以前基本都是腹泻，拉得太多得时候会觉得难受，现在经过了两次便秘以后，我觉得便秘才是真的让人难受。</p>
<h2 id="2021-01-22"><a href="#2021-01-22" class="headerlink" title="2021&#x2F;01&#x2F;22"></a>2021&#x2F;01&#x2F;22</h2><p>01&#x2F;16 打完第 8 次类克。目前仍在 SCD 中，维持良好状态，血检无异常。第 9 次类克需要做大检查，肠镜+影像学。目前虽然体感良好，但仍然感到害怕。</p>
<h2 id="2021-09-29"><a href="#2021-09-29" class="headerlink" title="2021&#x2F;09&#x2F;29"></a>2021&#x2F;09&#x2F;29</h2><p>08&#x2F;22 打了第 12 次类克。目前仍在 SCD 中。</p>
<p>状态有起伏，偶尔会出现不舒服（眼睛炎症、鼻炎等），CRP 和血沉偶尔会有小幅度的升高，但总的来说肠胃大部分时间依然维持无症状，偶尔有不舒服也很快可以恢复。猜测是一是增加的食物多了，偶尔会有质量不好的批次。二是从小就有空调过敏症，眼睛和鼻子应该和空调也有关。</p>
<h2 id="2022-05-20"><a href="#2022-05-20" class="headerlink" title="2022&#x2F;05&#x2F;20"></a>2022&#x2F;05&#x2F;20</h2><p>很长一段时间没有更新了，前几天刚打完第 17 次类克，目前仍在 SCD 中（第四阶段）。</p>
<p>没有更新的话，基本就代表这段时间非常稳定，没什么变化。没有出现过长时间的明显不适。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>临近端午</title>
    <url>/2014/nearing-the-duan-wu/</url>
    <content><![CDATA[<p>很久没有回过家，也没有关心过家里的情况了。今天和妈妈说了几句话，得知最近有发烧生病，虽然说已经好了，但还是觉得不知道怎么的。五十多岁了，一个人在广州上班，没亲没戚的，生了病也没哪个照顾，也不跟我说。婆婆去世以后我就应该要照顾我妈了，去年在赣州大姨也跟我说过，可惜还没有毕业，分身乏术。唉，真是忧伤。真希望你退休了吧，别干了。</p>
<p>天气变得很热很闷，情绪也变得特别容易坏，很可能因为一些琐碎事情发脾气，像今天早上，本来不应该发生这样的事的，我应该更关心你一些，而不是独自生闷气。现在想来确实后悔，不过微信是真的没有必要了。</p>
<p>这学期过的很快，感觉是大学这么久以来最快的了吧，已经快十四周了，又要结束了。过得快的原因大概有几方面，一直很忙，基本没停过，到现在也是很多事情在做，都接近尾声但又没有结束，所以有时候会觉得很多事情要做但又不知道要做什么。遗憾的是还没有找到实习，暑假仍没有着落。这学期和web有关的东西做的比较多，不过我不太希望这是最终的方向。</p>
<p>找了一个女朋友，很喜欢，希望可以有多远走多远。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js Web Spider Note - 1</title>
    <url>/2016/node-js-web-spider-note-1/</url>
    <content><![CDATA[<p>项目地址：<a href="https://github.com/wxsms/zhihu-spider">https://github.com/wxsms/zhihu-spider</a></p>
<p>简介：使用 Node.js 实现的一个简单的知乎爬虫，可以以一个用户为入口，爬取其账号下的一些基本信息，关注者，关注话题等。再通过关注者的 ID 继续爬取其他用户，以此循环。</p>
<p>实现功能：登录知乎（因为调用一些知乎 API 需要保存 session），解析页面，访问 AJAX API，保存到数据库。</p>
<span id="more"></span>

<h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p><img src="https://static.wxsm.space/blog/48595803-40b60300-e991-11e8-852f-e89da0452800.png"></p>
<p>蓝色部分的任一流程出现失败或错误，程序都会直接返回到“从种子队列取出一个用户ID”这一步。因为作为一个完整的知乎用户来说，它应该是包含了个人信息，关注以及话题的，缺失一项会导致其失去很大部分的意义。</p>
<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>本程序以 Node.js 为实现核心（本机版本 v6.5.0），用到的依赖很少，如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;asyncawait&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.6&quot;</span><span class="punctuation">,</span> <span class="comment">//模拟ES7 async/await语法</span></span><br><span class="line">  <span class="attr">&quot;jquery&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.1.0&quot;</span><span class="punctuation">,</span> <span class="comment">//用来解析HTML</span></span><br><span class="line">  <span class="attr">&quot;jsdom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.1.2&quot;</span><span class="punctuation">,</span> <span class="comment">//为HTML和jQuery模拟浏览器环境</span></span><br><span class="line">  <span class="attr">&quot;lodash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.15.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;log4js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.6.38&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mocha&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.2&quot;</span><span class="punctuation">,</span> <span class="comment">//用于单元测试</span></span><br><span class="line">  <span class="attr">&quot;mongoose&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.6.0&quot;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;superagent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.2.0&quot;</span><span class="punctuation">,</span> <span class="comment">//请求发送</span></span><br><span class="line">  <span class="attr">&quot;superagent-promise&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.0&quot;</span> <span class="comment">//请求发送的Promise封装</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="程序解析"><a href="#程序解析" class="headerlink" title="程序解析"></a>程序解析</h2><p>程序源代码在代码仓库的 <code>src</code>  目录下，目录结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─config</span><br><span class="line">├─constants</span><br><span class="line">├─http</span><br><span class="line">├─model</span><br><span class="line">├─parsers</span><br><span class="line">│  ├─follow</span><br><span class="line">│  ├─topic</span><br><span class="line">│  └─user</span><br><span class="line">├─services</span><br><span class="line">├─spiders</span><br><span class="line">└─utils</span><br></pre></td></tr></table></figure>

<h3 id="配置相关以及通用模块"><a href="#配置相关以及通用模块" class="headerlink" title="配置相关以及通用模块"></a>配置相关以及通用模块</h3><p><code>config</code>  目录主要放置一些程序的配置文件，比如用来登录知乎的用户名和密码，想要抓取的用户种子，数据库连接地址，以及 log 的配置。</p>
<p><code>constants</code>  目录下是一些对知乎的特定配置，如 url 地址、规则，以及知乎 API 的一些信息，如表单、请求头格式等。</p>
<p><code>util</code>  目录下目前是放置了一些数据库以及 log4js 的初始化方法，如自动扫描 models 加载以及创建 log 目录等，以便于在程序入口处调用。</p>
<p><code>models</code>  则是 mongoose 的各种 schema了，用于持久化。</p>
<h3 id="登录模块"><a href="#登录模块" class="headerlink" title="登录模块"></a>登录模块</h3><p>登录虽然不是爬虫的重点，但却是必不可少的前提。因为对于知乎网站来说，不登录的话只能看到单个用户的个人页面，想要再前往关注者页面就不可能了。这就造成一个问题：爬虫无法持续工作。</p>
<p>因此，此模块的主要职责是，在爬虫运行的过程当中保证已登录状态。</p>
<p>此模块放置在 <code>http/session</code>  中。</p>
<h3 id="爬虫模块"><a href="#爬虫模块" class="headerlink" title="爬虫模块"></a>爬虫模块</h3><p>程序核心之一，同时也是最容易出现问题的地方（尤其是启用多线程以后），负责发送 Http 请求并接受响应。</p>
<p>除了简单的单次请求以外，因为一些特定的原因，里面还涉及到了递归请求。</p>
<h3 id="转换模块"><a href="#转换模块" class="headerlink" title="转换模块"></a>转换模块</h3><p>程序核心之一，负责将爬取回来的 HTML 文本、API 返回体等转换成 model 对象，没什么技术含量，体力活。</p>
<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>其实就是将单次爬取的整个流程定义封装好，供主程序调用。</p>
<p>同时也负责爬取结果的储存，以及用户种子队列的管理。</p>
<h2 id="重点难点"><a href="#重点难点" class="headerlink" title="重点难点"></a>重点难点</h2><h3 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h3><p>这次经历让我意识到什么都靠 Google 也有不行的时候，因为爬虫这东西，虽然肯定也有别人做过，但是基本上都过时了，人家网站早更新了，真刀真枪还是得靠自己。</p>
<p>整个过程虽然简单，但是由于经验匮乏，还是走了不少弯路。最终总结出来的必须步骤如下：</p>
<p><img src="https://static.wxsm.space/blog/48595805-414e9980-e991-11e8-80ae-b9a0ef4eb43e.png"></p>
<p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">_user</span>) &#123;</span><br><span class="line">  user = _user;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">getCaptcha</span>()</span><br><span class="line">      .<span class="title function_">then</span>(resolveCaptcha)</span><br><span class="line">      .<span class="title function_">then</span>(getLoginCookie)</span><br><span class="line">      .<span class="title function_">then</span>(_getXsrfToken)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        logger.<span class="title function_">info</span>(<span class="string">&#x27;Login success!&#x27;</span>);</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;Login failed: &#x27;</span> + err);</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（目前并没有在所有地方都用上 async await，之后改过来）</p>
<p>获取验证码很简单，但是要注意的是把 response 里面的 <code>set-cookie</code>  信息保存起来添加到一会要登录的请求上去，因为不这么做的话，知乎服务器不认为登录那一次请求跟这个验证码有什么关系。</p>
<p>“解析验证码”这一步目前是这个程序最难看（难看，不是难）的地方，因为用的是土法炼钢：人眼解析。我尝试过用一些通用的验证码识别库去做自动化，但是正确率太低，而且知乎它的验证码有随机两套字体，反正好像训练起来也麻烦，所以就没继续研究下去了，毕竟不是爬虫主体，而且只需要在程序启动的时候输入一次即可。</p>
<p>登录请求的模拟，可以在知乎网站上使用浏览器的开发控制台启用“任意 XHR 断点”来截获网站发送的真实登录请求以及服务器返回来进行伪造。实际上就是填一个表单 POST 出去，然后返回的时候把 response 里面的 <code>set-cookie</code>  信息保存起来添加到以后要使用的所有请求的 header 上去就行了，因为服务器它就是靠这一堆 cookie 值来判断客户端所处的会话。</p>
<p>最后就是那个所谓的“秘钥”，网站上的名字叫 <code>xsrf</code> ，知乎在这里做了一些手脚。它在 set-cookie 中并没有提供这一串秘钥，但是如果我要请求它的 API，那么 cookie 里面就必须有这个键值对，明显网站是通过 JS 动态加进去的。然而我没有必要这么做，只需要在一开始的时候就把它拿到，然后以后每次请求都带上它就可以了。至于怎么拿也很简单，知乎每个页面都有的隐藏的输入框，里面的值就是。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xsrfToken = $(<span class="string">&#x27;input[name=_xsrf]&#x27;</span>).<span class="title function_">val</span>();</span><br></pre></td></tr></table></figure>

<p>这四步做完以后，程序就成功登录了。</p>
<h3 id="获取关注"><a href="#获取关注" class="headerlink" title="获取关注"></a>获取关注</h3><p>去到知乎的关注者、已关注页面可以发现，内容是随着页面滚动逐步加载的，因此这里存在一个 API 可以使用，无需爬页面。使用浏览器开发者控制台，我们可以截取到 API 的详细信息，以下是我总结的一个：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">userFollowers</span>: &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;https://www.zhihu.com/node/ProfileFollowersListV2&#x27;</span>,</span><br><span class="line">    <span class="attr">pageSize</span>: <span class="function">() =&gt;</span> <span class="number">20</span>,</span><br><span class="line">    <span class="attr">form</span>: <span class="function">(<span class="params">hashId, offset</span>) =&gt;</span> &#123;</span><br><span class="line">      offset = <span class="keyword">typeof</span> offset === <span class="string">&#x27;undefined&#x27;</span> ? <span class="number">0</span> : offset;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;next&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>: <span class="string">`&#123;&quot;offset&quot;:<span class="subst">$&#123;offset&#125;</span>,&quot;order_by&quot;:&quot;created&quot;,&quot;hash_id&quot;:&quot;<span class="subst">$&#123;hashId&#125;</span>&quot;&#125;`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">header</span>: <span class="function">(<span class="params">userName, token</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;X-Xsrftoken&#x27;</span>: token,</span><br><span class="line">        <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,</span><br><span class="line">        <span class="title class_">Referer</span>: zhihu.<span class="property">url</span>.<span class="title function_">userFollowers</span>(userName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>form 是 API 需要发送的表单，而 header 则是这次请求额外需要的 header（指包括登录获取的 header）。</p>
<p>由于它这个是按 page 来的，每次请求最多只会返回 20 条记录，到底了就会返回空数组，因此我做了一个 Promise 递归来实现这个功能。另外，由于有的用户关注加起来上万条，全部遍历完实在是太慢（不知道会不会一去不回），所以我把抓取的总数限制在了 100 条。至于总数的这个数量，在其它地方可以获取到，不需要通过这里获取，所以无所谓。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolveByPage</span>(<span class="params">user, offset, apiObj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> header = <span class="title class_">Object</span>.<span class="title function_">assign</span>(session.<span class="title function_">getHttpHeader</span>(), apiObj.<span class="title function_">header</span>(user.<span class="property">id</span>, session.<span class="title function_">getXsrfToken</span>()));</span><br><span class="line">  <span class="keyword">let</span> form = apiObj.<span class="title function_">form</span>(user.<span class="property">hashId</span>, offset);</span><br><span class="line">  <span class="comment">//No more than 100 (too slow)</span></span><br><span class="line">  <span class="keyword">if</span> (offset + apiObj.<span class="title function_">pageSize</span>() &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>([]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> superagent</span><br><span class="line">    .<span class="title function_">post</span>(apiObj.<span class="title function_">url</span>())</span><br><span class="line">    .<span class="title function_">set</span>(header)</span><br><span class="line">    .<span class="title function_">send</span>(form)</span><br><span class="line">    .<span class="title function_">end</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> data = parser.<span class="title function_">fromJson</span>(res.<span class="property">text</span>);</span><br><span class="line">      <span class="keyword">if</span> (!data.<span class="property">list</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">resolveByPage</span>(user, offset + apiObj.<span class="title function_">pageSize</span>(), apiObj)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">nextList</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> [].<span class="title function_">concat</span>(data.<span class="property">list</span>, nextList);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> [];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="持续工作"><a href="#持续工作" class="headerlink" title="持续工作"></a>持续工作</h3><p>爬虫如何持续工作这个问题一开始我是挺头疼的，就是说当一次任务结束以后，要如何自动开始下一次任务。由于全是异步操作，直接 while 1 肯定要炸。</p>
<p>后来看到 async await 语法，终于写出了一个可工作的版本。（Node.js v6.5.0 还没有原生支持 async await，所以用到了一个库）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> next = <span class="title function_">async</span>(<span class="keyword">function</span> (<span class="params">threadId</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> userId = <span class="title function_">await</span>(userQueueService.<span class="title function_">shift</span>());</span><br><span class="line">    logger.<span class="title function_">info</span>(<span class="string">`Thread <span class="subst">$&#123;threadId&#125;</span> working on user <span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">let</span> user = <span class="title function_">await</span>(userService.<span class="title function_">resolveAndSave</span>(userId));</span><br><span class="line">    <span class="title function_">await</span>(userQueueService.<span class="title function_">unshiftAll</span>([].<span class="title function_">concat</span>(user.<span class="property">followers_sample</span>, user.<span class="property">followees_sample</span>)));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&#x27;MongoError&#x27;</span>) &#123;</span><br><span class="line">      err = err.<span class="property">message</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    logger.<span class="title function_">error</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> thread = <span class="title function_">async</span>(<span class="keyword">function</span> (<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="title function_">await</span>(<span class="title function_">next</span>(id));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>程序执行到 <code>await</code>  关键字的地方就会阻塞，直到语句返回再继续。</p>
<p>至于多线程，直接简单暴力：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> main = <span class="title function_">async</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">await</span>(userService.<span class="title function_">login</span>());</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">thread</span>(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这样，执行 main 方法，程序就有 5 个线程同时工作了。</p>
<h2 id="目前的问题"><a href="#目前的问题" class="headerlink" title="目前的问题"></a>目前的问题</h2><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>5 条线程还是太慢，一小时大约能抓 1000 个用户的样子，但是我又不能再多开，再开线程请求数就爆了，各种报错、失败，得不偿失。</p>
<p><del>我在想是不是能再开几个 Node.js 进程同时跑这个程序。质量不行数量来补。</del></p>
<p>09&#x2F;12&#x2F;2016 更新：这个办法不行。请求数限制是在服务器端做出的。貌似无解。</p>
<h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><p>这个是目前很头疼的问题。我发现程序在跑一个小时或者两个小时以后，5 条线程就只剩下一条或者两条还在工作，其它的都失踪了，或者干脆全都死在那里了。其实我知道它们没死，只不过不知道为什么卡住了。</p>
<p>第一次发现的时候觉得有点逗，感觉就像自己生了五个孩子后来死剩两个一样。</p>
<p>09&#x2F;12&#x2F;2016 更新：目前发现了一个原因，即有些知乎用户的个人主页被屏蔽了，导致解析失败，但是又没有 catch 导致线程无限挂住。解决这个以后问题依然存在，高度怀疑是因为 session 过期。</p>
<p>09&#x2F;14&#x2F;2016 更新：果然是 session 过期的原因。在登录的表单中加入一个字段 <code>remember_me: true</code> 以后，线程死掉的问题就解决了！Excited！</p>
]]></content>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js Web Spider Note - 2</title>
    <url>/2016/node-js-web-spider-note-2/</url>
    <content><![CDATA[<h2 id="Cookie-Session"><a href="#Cookie-Session" class="headerlink" title="Cookie &amp; Session"></a>Cookie &amp; Session</h2><p>HTTP 是一种无状态协议，服务器与客户端之间储存状态信息主要靠 Session，但是，Session 在浏览器关闭后就会失效，再次开启先前所储存的状态都会丢失，因此还需要借助 Cookie</p>
<p>一般来说，网络爬虫不是浏览器，因此，只能靠手动记住 Cookie 来与服务器“保持联系”。</p>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>Cookie 是 HTTP 协议的一部分，处理流程为：</p>
<ul>
<li>服务器向客户端发送 cookie <ul>
<li>通常使用 HTTP 协议规定的 set-cookie 头操作</li>
<li>规范规定 cookie 的格式为 name &#x3D; value 格式，且必须包含这部分</li>
</ul>
</li>
<li>浏览器将 cookie 保存</li>
<li>每次请求浏览器都会将 cookie 发向服务器</li>
</ul>
<p>因此，爬虫要做的工作就是模拟浏览器，识别服务端发来的 Cookie 并保存，之后每次请求都带上 Cookie 头。</p>
<p>在 Node.js 中有很多与 Cookie 处理相关的 package，就不再赘述。</p>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>Cookie 虽然方便，但是由于保存在客户端，可保存的长度有限，且可以被伪造。因此，为了解决这些问题，就有了 Session</p>
<p>区别：</p>
<ul>
<li>Cookie 保存在客户端</li>
<li>Session 保存在服务端</li>
</ul>
<p>Cookie 与 Session 储存的都是客户端与服务器之间的会话状态信息，它们之间主要靠一个秘钥来进行匹配，称之为 <code>SESSION_ID</code> ，如 express 中默认为 <code>connect.sid</code> 字段。只要浏览器发出的 SESSION_ID 与服务器储存的字段匹配上，那么服务器就将其认作为一个 Session，只要 SESSION_ID 的长度足够大，几乎是不可能被伪造的。因此，敏感信息储存在 Session 中要比 Cookie 安全得多。</p>
<p>常见的 Session 存放媒介有：</p>
<ul>
<li>RAM</li>
<li>Database</li>
<li>Cache (e.g. Redis)</li>
</ul>
<p>Session 不是爬虫可以接触到的东西。</p>
<h2 id="AJAX-页面"><a href="#AJAX-页面" class="headerlink" title="AJAX 页面"></a>AJAX 页面</h2><p>对于静态页面（服务端渲染），使用爬虫不需要考虑太多，把页面抓取下来解析即可。但对于客户端渲染，尤其是前后端完全分离的网站，一般不能直接获取页面（甚至没有必要获取页面），而是转而分析其实际请求内容。</p>
<h3 id="请求分析"><a href="#请求分析" class="headerlink" title="请求分析"></a>请求分析</h3><p>通过一些请求拦截分析工具（如 Chrome 开发者工具）可以截获网站向服务器发送的所有请求以及相应的回复。</p>
<p>包括（不限于）以下信息：</p>
<ul>
<li>请求地址</li>
<li>请求方法（GET &#x2F; POST 等）</li>
<li>所带参数</li>
<li>请求头</li>
</ul>
<p>只要把信息尽数伪造，那么爬虫发出的请求照样可以从服务器取得正确的结果。</p>
<h3 id="秘钥处理"><a href="#秘钥处理" class="headerlink" title="秘钥处理"></a>秘钥处理</h3><p>一些请求中会带有秘钥（token &#x2F; sid &#x2F; secret），可能随除了请求方法外的任一个位置发出，也可能都带有秘钥。更可能不止一个秘钥。</p>
<p>理论上来说，正常客户端取得秘钥有两种方式：</p>
<ul>
<li>服务端提供</li>
<li>客户端自行计算，由服务端校对</li>
</ul>
<p>对于服务端提供给客户端的秘钥，只要仔细分析 HTML 或服务端返回的 Cookie Header 就一定能发现。</p>
<p>而对于客户端自行计算的秘钥则比较麻烦了，尤其是在 JS 代码加密、混淆的情况下。这种时候，只能自己去用开发者工具调试原始站点代码，找出加密代码段，并在爬虫中实现。这里面有许多技巧，如各种断点、单步调试等。</p>
<h2 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h2><p>表单实际上也是 HTTP 请求，使用 GET &#x2F; POST 等方法即可模拟表单提交。然而这不是重点。重点是表单常常伴随着验证码而存在。</p>
<p>验证码的识别暂未涉及。</p>
<h2 id="浏览器模拟"><a href="#浏览器模拟" class="headerlink" title="浏览器模拟"></a>浏览器模拟</h2><p>爬虫的下下策才是使用浏览器完全模拟用户操作。实在是属于无奈之举。Nodejs 可以驱动 Chrome 与 Firefox 浏览器，存在相应的 Package，但是，更方便的是使用各种 E2E Testing 工具。</p>
<p>比如 Night Watch JS：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"> <span class="string">&#x27;Demo test Google&#x27;</span> : <span class="keyword">function</span> (<span class="params">client</span>) &#123;</span><br><span class="line"> client</span><br><span class="line"> .<span class="title function_">url</span>(<span class="string">&#x27;http://www.google.com&#x27;</span>)</span><br><span class="line"> .<span class="title function_">waitForElementVisible</span>(<span class="string">&#x27;body&#x27;</span>, <span class="number">1000</span>)</span><br><span class="line"> .<span class="property">assert</span>.<span class="title function_">title</span>(<span class="string">&#x27;Google&#x27;</span>)</span><br><span class="line"> .<span class="property">assert</span>.<span class="title function_">visible</span>(<span class="string">&#x27;input[type=text]&#x27;</span>)</span><br><span class="line"> .<span class="title function_">setValue</span>(<span class="string">&#x27;input[type=text]&#x27;</span>, <span class="string">&#x27;rembrandt van rijn&#x27;</span>)</span><br><span class="line"> .<span class="title function_">waitForElementVisible</span>(<span class="string">&#x27;button[name=btnG]&#x27;</span>, <span class="number">1000</span>)</span><br><span class="line"> .<span class="title function_">click</span>(<span class="string">&#x27;button[name=btnG]&#x27;</span>)</span><br><span class="line"> .<span class="title function_">pause</span>(<span class="number">1000</span>)</span><br><span class="line"> .<span class="property">assert</span>.<span class="title function_">containsText</span>(<span class="string">&#x27;ol#rso li:first-child&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;Rembrandt - Wikipedia&#x27;</span>)</span><br><span class="line"> .<span class="title function_">end</span>();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在这种模式下，Cookie &#x2F; Session &#x2F; 请求等各种细节都不用关心了。只需要按部就班地执行操作即可。模拟浏览器的代价是效率太低，内存开销大，但在某些特定需求情况下，却比一般爬虫要简单得多。</p>
<p>&nbsp;</p>
]]></content>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>最近状态不好</title>
    <url>/2012/not-feeling-good-recently/</url>
    <content><![CDATA[<p>开学两周以来身体真的不太好，感觉又和高三后期差不多，不过好在时间没有那么紧，每天可以抽一点两点时间出来锻炼，到现在也感觉有了那么一些好转。霍香正气丸吃了没有用，以后再也不买了。不敢去看医生，实在看不起，重点是看了也白看。</p>
<p>本来平常的话也没什么，坏在上学期挂了两科，明天就要补考去，可惜真的没有精力很认真的看书做题所以它要重修就重修吧，大四上多几节课我也不是很在乎。不过从今往后大概真的别挂科了。毕竟没有班长大人的魄力，我还是图样啊。现在饭堂卖的东西也比以前干净很多了，也有面条和粥，而且还很便宜，所以应该不会像以前那样困难，虽然饭吃了可能还是会有点问题。这两周以来嘴巴都感觉特别特别苦，会想喝汽水，会想吃雪糕，可是肚子又胀胀的，不太敢动那些。忌生冷烟酒辛辣油腻，知道的，奶不能喝，青菜少吃，什么什么的，都还记得，所以妈你不用担心我。我有分寸。你要多注意你自己。每次你跟我说晚上痛得睡不着都让我非常揪心。</p>
<p>晚上经常会小发烧，可能是炎症吧之前真没考虑到。今天好些，没有。所以最近都穿长袖示街。偶尔还是会感到冷和孤独，不过没有高中那么强烈。今天吃了一天宿舍菜，中间还被小吓一跳，那个新买的电磁炉水都没煲开就怒放两炮，然后随着一丝烧焦的味道就哑火了，还好后来又神奇复活以不至于没东西吃。吃完以后十分想念婆婆和大姨，我想吃炸茄子和葱条和腌菜艾米果…</p>
<p>希望可以好起来。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 包管理器发展史</title>
    <url>/2021/npm-history/</url>
    <content><![CDATA[<h2 id="在没有包管理器之前"><a href="#在没有包管理器之前" class="headerlink" title="在没有包管理器之前"></a>在没有包管理器之前</h2><p>正确来说 Node.js 是不存在没有包管理器的时期的。从 <a href="https://nodejs.dev/learn/a-brief-history-of-nodejs">A brief history of Node.js</a> 里面可以看到，当 2009 年 Node.js 问世的时候 NPM 的雏形也发布了。当然因为 Node.js 跟前端绑得很死，这里主要谈一谈前端在没有包管理器的时期是怎样的。</p>
<p>那时候做得最多的事情就是：</p>
<ol>
<li>网上寻找各软件的官网，比如 jQuery；</li>
<li>找到下载地址，下载 zip 包；</li>
<li>解压，放到项目中一个叫 libs 的目录中；</li>
<li>想更方便的话，直接将 CDN 链接粘贴到 HTML 中。</li>
</ol>
<p>四个字总结：刀耕火种。 模块化管理？版本号管理？依赖升级？不存在的。当然，那时候前端也没有那么复杂，这种模式勉强来说也不是不能用。</p>
<span id="more"></span>


<h2 id="npm-v1-v2"><a href="#npm-v1-v2" class="headerlink" title="npm v1-v2"></a>npm v1-v2</h2><p><img src="/2021/npm-history/789e830b6b4247a9807fa4639815b53c.png" alt="Npm-logo.svg_.png"></p>
<p><img src="/2021/npm-history/6cb8e2d058f24013bb676be47b50d8a0.png"></p>
<p>2009 年，Node.js 诞生，npm（Node.js Package Manager）的雏形也正在酝酿。</p>
<p>2011 年，npm 发布了 1.0 版本。</p>
<p>初版 npm 带来的文件结构，是嵌套结构：</p>
<p><img src="/2021/npm-history/bd96f102244c4a498c544bf759266e81.png" alt="npm-history-0.png"></p>
<p>一切都很美好，除了…</p>
<p><img src="/2021/npm-history/77ed4d7193bb4cf8b1125915e1b532ad.png"></p>
<p>node_modules 堪比黑洞，图来自 <a href="https://github.com/tj/node-prune">https://github.com/tj/node-prune</a> 。</p>
<h3 id="node-modules-体积过大"><a href="#node-modules-体积过大" class="headerlink" title="node_modules 体积过大"></a>node_modules 体积过大</h3><p>显而易见的问题，如果一个库，比如 lodash，被不同的包依赖了，那么它就会被安装两次。这种形式的结构很快就能把磁盘占满。<code>rm -rf node_modules</code> 成为了前端程序员最常用的命令之一。</p>
<h3 id="node-modules-嵌套层级过深"><a href="#node-modules-嵌套层级过深" class="headerlink" title="node_modules 嵌套层级过深"></a>node_modules 嵌套层级过深</h3><p>只有当找到一片不依赖任何第三方包的叶子时，这棵树才能走到尽头。因此 node_modules 的嵌套深度十分可怕。</p>
<p>具体到实际的问题，相信早期 npm 的 windows 用户都见过这个弹窗：</p>
<p><img src="/2021/npm-history/c28854e4264a401e8a1e33d53e3d8397.png"></p>
<p>（node_modules 文件夹无法删除，因为超过了 windows 能处理的最大路径长度）</p>
<p>详情见 <a href="https://github.com/nodejs/node-v0.x-archive/issues/6960">这个 issue</a> 。</p>
<h2 id="Yarn-npm-v3"><a href="#Yarn-npm-v3" class="headerlink" title="Yarn &amp; npm v3"></a>Yarn &amp; npm v3</h2><p><img src="/2021/npm-history/53b38bd1375e42f5b66151d782598f7b.png" alt="yarn-logo-F5E7A65FA2-seeklogo.com.png"></p>
<p><img src="/2021/npm-history/1d2e4d8068d34d24aadb23a5b27e07d3.png"></p>
<p>2016 年，yarn 诞生了。yarn 解决了 npm 几个最为迫在眉睫的问题：</p>
<ol>
<li>安装太慢（加缓存、多线程）</li>
<li>嵌套结构（扁平化）</li>
<li>无依赖锁（yarn.lock）</li>
</ol>
<p>yarn 带来对的扁平化结构：</p>
<p><img src="/2021/npm-history/281c08a568254878bd9c2c04e12a199c.png" alt="npm-history-yarn.png"></p>
<p>扁平化后，实际需要安装的包数量大大减少，再加上 Yarn 首发的缓存机制，因此依赖的安装速度也得到了<strong>史诗级</strong>提升。</p>
<h3 id="依赖锁"><a href="#依赖锁" class="headerlink" title="依赖锁"></a>依赖锁</h3><p>相比于扁平化结构，可以说 yarn 更大的贡献是发明了 yarn.lock。而 npm 在一年后的 v5 才跟上了脚步，发布了 package-lock.json。</p>
<p>在没有依赖锁的年代，即使没有改动任何一行代码，一次 <code>npm install</code> 带来的实际代码量变更很可能是非常巨大的。 因为 npm 采用 <a href="https://semver.org/lang/zh-CN/">语义化版本</a> 约定，简单来说，<code>a.b.c</code> 代表着：</p>
<ol>
<li><code>a</code> 主版本号：当你做了不兼容的 API 修改</li>
<li><code>b</code> 次版本号：当你做了向下兼容的功能性新增</li>
<li><code>c</code> 修订号：当你做了向下兼容的问题修正</li>
</ol>
<p>问题在于，这只是一个理想化的“约定”，具体到每个包有没有遵守，遵守得好不好，不是为我们所控的。 而默认情况下安装依赖时，得到的版本号是类似 <code>^1.0.0</code> 这样的。这个语法代表着将安装主版本号为 <code>1</code> 的最新版本。</p>
<p>虽然可以通过去掉一级依赖的 <code>^</code> 指定精确版本，但是无法指定二级、三级依赖的精确版本号，因此安装依然存在非常大的不确定性。</p>
<p><img src="/2021/npm-history/032ed620f28b4399ac6ac0c126b0c90c.png" alt="npm-history-semver.png"></p>
<p>因此，为了解决这个问题，Yarn 提出了“锁”的解决方案：精确地将版本号锁定在一个值，并且在安装时通过计算哈希值校验文件一致性，从而保证每次构建使用的依赖都是完全一致的。</p>
<p>一个 yarn.lock 文件示例片段：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.</span><br><span class="line"># yarn lockfile v1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;@babel/code-frame@7.12.11&quot;:</span><br><span class="line">  version &quot;7.12.11&quot;</span><br><span class="line">  resolved &quot;https://registry.npmmirror.com/@babel/code-frame/download/@babel/code-frame-7.12.11.tgz?cache=0&amp;sync_timestamp=1633553739126&amp;other_urls=https%3A%2F%2Fregistry.npmmirror.com%2F%40babel%2Fcode-frame%2Fdownload%2F%40babel%2Fcode-frame-7.12.11.tgz#f4ad435aa263db935b8f10f2c552d23fb716a63f&quot;</span><br><span class="line">  integrity sha1-9K1DWqJj25NbjxDyxVLSP7cWpj8=</span><br><span class="line">  dependencies:</span><br><span class="line">    &quot;@babel/highlight&quot; &quot;^7.10.4&quot;</span><br><span class="line"></span><br><span class="line">&quot;@babel/code-frame@^7.0.0&quot;, &quot;@babel/code-frame@^7.14.5&quot;, &quot;@babel/code-frame@^7.15.8&quot;:</span><br><span class="line">  version &quot;7.15.8&quot;</span><br><span class="line">  resolved &quot;https://registry.npmmirror.com/@babel/code-frame/download/@babel/code-frame-7.15.8.tgz?cache=0&amp;sync_timestamp=1633553739126&amp;other_urls=https%3A%2F%2Fregistry.npmmirror.com%2F%40babel%2Fcode-frame%2Fdownload%2F%40babel%2Fcode-frame-7.15.8.tgz#45990c47adadb00c03677baa89221f7cc23d2503&quot;</span><br><span class="line">  integrity sha1-RZkMR62tsAwDZ3uqiSIffMI9JQM=</span><br><span class="line">  dependencies:</span><br><span class="line">    &quot;@babel/highlight&quot; &quot;^7.14.5&quot;</span><br><span class="line">    </span><br><span class="line">// more...</span><br></pre></td></tr></table></figure>

<h3 id="“双胞胎陌生人”问题"><a href="#“双胞胎陌生人”问题" class="headerlink" title="“双胞胎陌生人”问题"></a>“双胞胎陌生人”问题</h3><p>这个词在英文中是 doppelgangers，意思是它们长得很像，但是除此以外又完全没有其它的关联。</p>
<p><img src="/2021/npm-history/d51b29d640de4f6fa97858e68db9144a.png"></p>
<p>想象一下有一个 library-a，它同时依赖了 library-b、c、d、e：</p>
<p><img src="/2021/npm-history/17d47edd486b4a67ad6462bacd1a4c94.png" alt="npm-history (1).png"></p>
<p>而 b 和 c 依赖了 <a href="mailto:&#102;&#64;&#x31;&#x2e;&#x30;&#x2e;&#x30;">&#102;&#64;&#x31;&#x2e;&#x30;&#x2e;&#x30;</a>，d 和 e 依赖了 <a href="mailto:&#102;&#64;&#x32;&#x2e;&#x30;&#x2e;&#x30;">&#102;&#64;&#x32;&#x2e;&#x30;&#x2e;&#x30;</a>：</p>
<p><img src="/2021/npm-history/9eb92971cb044cb3a05c62a43dd23142.png" alt="npm-history.png"></p>
<p>这时候，node_modules 树需要做出选择了，到底是将 <a href="mailto:&#x66;&#64;&#x31;&#46;&#48;&#46;&#48;">&#x66;&#64;&#x31;&#46;&#48;&#46;&#48;</a> 还是 <a href="mailto:&#x66;&#x40;&#x32;&#46;&#x30;&#46;&#x30;">&#x66;&#x40;&#x32;&#46;&#x30;&#46;&#x30;</a> 扁平化，然后将另一个放到嵌套的 node_modules 中？</p>
<p>答案是：具体做那种选择将是<strong>不确定的</strong>，取决于哪一个 f 出现得更靠前，靠前的那个将被扁平化。</p>
<p>举例，将 <a href="mailto:&#x66;&#x40;&#49;&#46;&#x30;&#x2e;&#48;">&#x66;&#x40;&#49;&#46;&#x30;&#x2e;&#48;</a> 扁平化的结果：</p>
<p><img src="/2021/npm-history/79bed46a30504448bb38f03bf47084fa.png" alt="npm-history-3.png"></p>
<p>将 <a href="mailto:&#102;&#64;&#x32;&#x2e;&#48;&#46;&#x30;">&#102;&#64;&#x32;&#x2e;&#48;&#46;&#x30;</a> 扁平化的结果：</p>
<p><img src="/2021/npm-history/2d30a4d64bd54a1db200eb317798da85.png" alt="npm-history-4.png"></p>
<p>无论如何，这个选择必须做，我们必然会在 node_modules 中拥有多份的 library-f，窘境将是无法避免的。因此它们也就成为了“双胞胎陌生人”。</p>
<p>其它编程语言没有这种问题，这是 Node.js &amp; npm 独有的。 这种问题会造成：</p>
<ol>
<li>安装更慢</li>
<li>耗费的磁盘空间更大</li>
<li>某些只能存在单例的库（比如 React 或 Vue）如果被同时安装了两份则会出现问题</li>
<li>当使用依赖 f 使用了 TypeScript 时会造成 .d.ts 文件混乱，导致编译器报错</li>
<li>假设 f 有一个依赖 g，项目里也存在 g 的“双胞胎陌生人”，那么根据 Node.js 的依赖查找原则（从当前目录逐级向上查找），两个 f 有可能会检索到不同版本的 g，这可能导致高度混乱的编译器错误。</li>
</ol>
<h3 id="“幽灵依赖”问题"><a href="#“幽灵依赖”问题" class="headerlink" title="“幽灵依赖”问题"></a>“幽灵依赖”问题</h3><p><img src="/2021/npm-history/91ba2aeacbb640fe931c2b3f9e762b2b.png"></p>
<p>假设我们有以下依赖：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-library&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lib/index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;minimatch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.4&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;rimraf&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.6.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>理论上来说，我们项目的代码中可以使用的依赖只有 minimatch。但是实际上，以下代码也能运行：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> minimatch = <span class="built_in">require</span>(<span class="string">&quot;minimatch&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> expand = <span class="built_in">require</span>(<span class="string">&quot;brace-expansion&quot;</span>);  <span class="comment">// ???</span></span><br><span class="line"><span class="keyword">var</span> glob = <span class="built_in">require</span>(<span class="string">&quot;glob&quot;</span>)  <span class="comment">// ???</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ???</span></span><br></pre></td></tr></table></figure>

<p>这是因为扁平化结构将一些没有直接依赖的包也提升到了 node_modules 的一级目录，但是 Node.js 并没有对其校验。所以引用它们也不会报错。</p>
<p><img src="/2021/npm-history/bdb7f88e64b8463387c78f563e709ce4.png" alt="npm-history-ghost-deps.png"></p>
<p>这种情况带来的问题：</p>
<ol>
<li>在没有显式指定“间接依赖”的版本号的时候，如果它被依赖到它的包做了大版本升级，存在不兼容的 API 变更，那么应用代码很可能就会跑不起来</li>
<li>没有显式指定依赖带来的额外管理成本</li>
</ol>
<h3 id="Workspace"><a href="#Workspace" class="headerlink" title="Workspace"></a>Workspace</h3><p>Yarn 1.0 带来的另一个特性是 workspace，也是 monorepo 能够发展起来的一个重要原因。</p>
<p>假设我们有一个 workspace-a，它依赖了 cross-env：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;package-a&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cross-env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5.0.5&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>还有一个 package-b，它依赖了 cross-env 和 package-a：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;package-b&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cross-env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5.0.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;workspace-a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>那么这时候在使用 workspace 模式安装的话，将得到以下结构：</p>
<p><img src="/2021/npm-history/a167fbb7eb1a4e068bdfd9b2aa3c1f4e.png" alt="npm-history-workspace.png"></p>
<p>其中，node_modules 中的 package-a 只是实际文件的链接。也就是说，Yarn workspace 模式可以将项目底下的子项目的依赖提升到根目录来进行扁平化安装，这样可以节省更多的磁盘空间，带来更快的安装效率，也可以使得项目管理更方便。</p>
<p><strong>但是</strong>，结合上面所提到的两个问题，workspace 带来的问题只会更多，不会更少。这里就不详细展开了，<a href="https://segmentfault.com/a/1190000040291971">应用级 Monorepo 优化方案</a>  这篇文章总结得很好。</p>
<h3 id="Lerna"><a href="#Lerna" class="headerlink" title="Lerna"></a>Lerna</h3><p><img src="/2021/npm-history/8f1ef8b7ea174596bdc8b6ebf0601dc0.png" alt="lerna.png"></p>
<p>由于 Workspace 的特性实在是太过好用，monorepo（multi-package repositories, multi-project repositories）开始迅速发展。许多知名的开源库开始转向 monorepo，还有更激进者将 monorepo 使用在业务项目中。Lerna 顺势而生。</p>
<p>但是，Lerna 并不是 Node.js 包管理器的一部分，也没有解决任何已存在的包管理器问题。它所做的只是将 monorepo 的使用体验变得更舒服了，比如：</p>
<ol>
<li>可以更方便地创建 monorepo</li>
<li>可以更方便地管理 packages 中的依赖项</li>
<li>可以一键发布 packages、自动根据 git commit log 更新每个 package 的 changelog</li>
<li>等等</li>
</ol>
<p>仅此而已。按照官网的说法，Lerna 所做的事情是“优化了这个流程（optimizes the workflow）”。</p>
<h2 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h2><p><img src="/2021/npm-history/5d35909dba0c443cbc67ece57750fb92.png"></p>
<p><img src="/2021/npm-history/8909e5d0c4b747f787b3787314f7e8d8.png"></p>
<p>P for Performance —— 性能更强的 npm。</p>
<p>pnpm 复刻了 npm 的所有命令，同时在安装目录结构上做了大幅改进。 </p>
<h3 id="善用链接"><a href="#善用链接" class="headerlink" title="善用链接"></a>善用链接</h3><p>这里通过一个例子来看 pnpm 的安装结构特点。</p>
<h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><p>假设我们要安装一个 foo 包，它依赖了 bar。首先，pnpm 会先将所有直接和间接依赖安装进来，并“摊平”（注意，这里没有扁平化算法，是字面意义上的摊平）：</p>
<p><img src="/2021/npm-history/88b24d6586164844971a21531cb4fe40.png" alt="npm-history-pnpm1.png"></p>
<p>你可能注意到，在 <code>xxx@1.0.0</code> 的目录下面，首先是一个 <code>node_modules</code> 目录，然后才是 <code>xxx</code>，这么做的目的是：</p>
<ol>
<li>允许包引用自己</li>
<li>将包自身和其依赖打平，避免循环结构。在 Node.js 中，这么做其实跟原本的样子并没有太大区别。</li>
</ol>
<h4 id="处理间接依赖"><a href="#处理间接依赖" class="headerlink" title="处理间接依赖"></a>处理间接依赖</h4><p>然后，在 <code>foo</code> 的平级创建一个 <code>bar</code> 文件夹，链接至 <code>bar@1.0.0</code> 下面的 <code>bar</code>：</p>
<p><img src="/2021/npm-history/7601019bdc044ca786896c2d54de955a.png" alt="npm-history-pnpm2.png"></p>
<h4 id="处理直接依赖"><a href="#处理直接依赖" class="headerlink" title="处理直接依赖"></a>处理直接依赖</h4><p>在顶层 <code>node_modules</code> 创建一个 <code>foo</code> 硬链接，连接至 <code>foo@1.0.0</code> 中的 <code>foo</code>，以供应用访问：</p>
<p><img src="/2021/npm-history/92c7961c84ae4c64a15588cfad9b4294.png" alt="npm-history-pnpm3.png"></p>
<h4 id="处理更深层次的间接依赖"><a href="#处理更深层次的间接依赖" class="headerlink" title="处理更深层次的间接依赖"></a>处理更深层次的间接依赖</h4><p>假设 <code>foo</code> 和 <code>bar</code> 都依赖了 <code>qar@2.0.0</code>：</p>
<p><img src="/2021/npm-history/672ca3805fb342a988899ee8fc0bcc31.png" alt="npm-history-pnpm4.png"></p>
<p>可以看到，虽然依赖层级变深了，但是文件树并没有变深。这就是 pnpm 的特色结构：通过硬链接创造的依赖“树”。</p>
<h3 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h3><p>由于硬链接的巨大优势加成，在绝大多数情况下，pnpm 的安装速度都要比 yarn 和 npm 更快：</p>
<p><img src="/2021/npm-history/27ade74c8a634c0890e78052594d3321.png"></p>
<h3 id="自动解决锁冲突"><a href="#自动解决锁冲突" class="headerlink" title="自动解决锁冲突"></a>自动解决锁冲突</h3><p>pnpm 能够自动解决锁文件的冲突。当冲突发生时，只需要运行一次 <code>pnpm install</code>，冲突就能自动由 pnpm 解决。很人性化。不过，据说 Yarn 从 1.0 版本开始也提供了类似的功能。</p>
<h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><ol>
<li>并不是所有项目都能“无痛”迁移至 pnpm。由于历史原因（扁平化），我们的应用或者应用的某些依赖并没有很好地遵循“使用到的包必须在 package.json 中声明”这一原则，或者把它当作一项 feature 享受其中。这样的话迁移至 pnpm 会导致原本会被提升到顶层的扁平化依赖重新回到正确的位置，从而无法被找到。如果问题出在应用上，那么只需要将依赖写入 package.json 即可。但是如果出在依赖就比较棘手了。不过官方也提供了<a href="https://pnpm.io/faq#pnpm-does-not-work-with-your-project-here">解决方案</a>。</li>
<li>由于特殊的安装结构，以往一个很有用的打补丁工具 patch-package 用起来就不是那么顺手了。</li>
</ol>
<h3 id="Rush"><a href="#Rush" class="headerlink" title="Rush"></a>Rush</h3><p><img src="/2021/npm-history/74e9d763d51b4d02a39c8b8628be2f35.png" alt="rush.png"></p>
<p><a href="https://rushjs.io/">Rush</a> 是微软出品的一款 monorepo 管理工具。与 Lerna 不同的是：Rush 不仅做了许多“优化流程”的工作，还提供了一套与 pnpm 十分类似的<strong>硬链接目录结构方案</strong>来解决超大型项目中的依赖管理问题。</p>
<p>虽然它声称支持全部的三种包管理工具，但是：</p>
<ol>
<li>配合高版本 npm 使用时有 bug，只能使用 4.x 版本</li>
<li>配合 Yarn 使用时无法启用 workspace，因为这会跟硬链接方案冲突</li>
<li>只有在配合 pnpm 使用时才能解决“双胞胎陌生人”问题</li>
</ol>
<p>很显然，如果想要正常使用，pnpm 几乎是唯一选择。</p>
<p>这里简单列出一些 Rush 提供的特色功能：</p>
<ol>
<li>顺序构建：自动检测包的依赖关系，按照从下至上有序构建</li>
<li>多进程构建：对于可以同时构建的包，开启多个 Node.js 进程同时构建</li>
<li>增量构建：只对发生了变化的包，以及所有受影响的上游或下游包启动构建，支持缓存构建产物</li>
<li>增量发布：自动检测需要发布的包并执行发布，甚至可以将发布任务设置为定时执行</li>
<li>等等……</li>
</ol>
<p><img src="/2021/npm-history/4c43709b3dbd431a95fc6cfb42ca828c.png"></p>
<p>总的来说，微软的一套理论是：企业的项目（不管是业务还是基础）都应该尽可能地放在一个超大型仓库中来管理。并且微软声称自己确实是这么做的（见 <a href="https://rushjs.io/pages/intro/why_mono/">Rush: Why one big repo⁈</a> ）。Rush 的目的也是为了解决这套方法论的后顾之忧，比如:</p>
<ol>
<li>npm 扁平化结构的各种问题</li>
<li>项目逐渐庞大以后的构建速度问题</li>
<li>项目如何发布的问题</li>
</ol>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://pnpm.io/symlinked-node-modules-structure">Symlinked <code>node_modules</code> structure</a></li>
<li><a href="https://pnpm.io/faq">Frequently Asked Questions</a></li>
<li><a href="https://github.com/tj/node-prune">tj&#x2F;node-prune: Remove unnecessary files from node_modules</a></li>
<li><a href="https://github.com/nodejs/node-v0.x-archive/issues/6960">Node’s nested node_modules approach is basically incompatible with Windows #6960</a></li>
<li><a href="https://rushjs.io/pages/intro/why_mono/">Rush: Why one big repo⁈</a></li>
<li><a href="https://rushjs.io/pages/advanced/phantom_deps/">Rush: Phantom dependencies</a></li>
<li><a href="https://rushjs.io/pages/advanced/npm_doppelgangers/">Rush: NPM doppelgangers</a></li>
</ul>
]]></content>
      <tags>
        <tag>nodejs</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Parcel Note</title>
    <url>/2019/parcel-note/</url>
    <content><![CDATA[<p><a href="https://github.com/parcel-bundler/parcel">Parcel Bundler</a> 发布了这么久，终于有机会体验了一次。在一个新的基于 jQuery 的小项目中尝试了这个打包器。结合它的宣传点，整体来说最大的感受是：</p>
<ol>
<li>确实比 Webpack 快很多</li>
<li>确实「基本上」不需要配置</li>
</ol>
<p>虽然没有太多其它的亮点，但这不妨碍它用起来就是比 Webpack 「爽」。</p>
<span id="more"></span>

<h3 id="关于「快」"><a href="#关于「快」" class="headerlink" title="关于「快」"></a>关于「快」</h3><p>就我的感受而言，Parcel 的快大多是要基于它的文件系统缓存的，这也是 Webpack 没有的东西（也许将来会有也说不定）。从体验上来说，应用启动以后「热重载」的速度基本上差不多，就算有差距也可以忽略不计，因为基本两者都是秒速。但是「重启」就不一样了。得益于它的文件系统缓存，Parcel 要比 Webpack 快两到三倍，甚至五倍十倍，我觉得一点都不夸张。这在日常开发中体现的优势还是相当明显的。</p>
<h3 id="关于「零配置」"><a href="#关于「零配置」" class="headerlink" title="关于「零配置」"></a>关于「零配置」</h3><p>说零配置是有些夸张了，应该说 90% 的场景都不需要写配置。比如说 Webpack 必写的 <code>babel-loader</code> &#x2F; <code>css-loader</code> 等东西，它都已经给内置了。开发者需要做的东西仅仅是把它安装下来而已。比如说：</p>
<ol>
<li>我需要使用 Babel，则安装 <code>@babel/core</code> 就好了</li>
<li>我需要使用 Less 预编译 CSS，则安装 <code>less</code> 就好了</li>
<li>我需要使用 Pug 预编译 HTML，则安装 <code>pug</code> 就好了</li>
</ol>
<p>事实上，你可能甚至不用做「安装」这一步。当它检测到你输入了某个类型的文件而需要安装某种依赖才能进行时，它会自动安装。</p>
<p>这种做法给人的感觉是，它并不是真正的零配置，而是所有的配置其实都已经写好了，内置了，然后它会检测你输入的文件类型，去匹配现有的规则，该干嘛干嘛。所以，这并不是什么黑科技，只是「约定大于配置」的一种体现。</p>
<h3 id="吐槽点"><a href="#吐槽点" class="headerlink" title="吐槽点"></a>吐槽点</h3><p>在日常开发中，确实 90% 的场景下都不需要写配置，那么另外的那 10% 呢？</p>
<p>真正用下来会发现，Parcel 在带来方便的同时，也会带来一些问题：任何事物都是有两面性的。某些在 Webpack 下很稀松平常的任务，比如 js 代码混淆，加多一个 loader，配多一个规则就能解决的事情，在 Parcel 的世界里，对不起，做不到。你得自己想办法。</p>
<p>当然这也许是我对 Parcel 的了解还不够深入，不知道如何定制。但 Parcel 的文档里面确实没有提及任何相关的可定制化的东西。所以，真的要说到「可靠性」，「安全感」的话，可能我还是往 Webpack 这边站。但是，毋庸置疑的是 Parcel 确实为小项目提供了一个非常棒的选择。</p>
<p>另外再吐槽一点，Parcel 的文档强制给我跳转中文版，然而中文版文档更新滞后，缺斤少两，我选了英文以后，下次再打开还是中文，这一点太不友好了。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>parcel</tag>
      </tags>
  </entry>
  <entry>
    <title>在 JetBrains IDE 中向 Markdown 粘贴图片</title>
    <url>/2021/paste-image-into-markdown-in-jetbrains-ide/</url>
    <content><![CDATA[<p>其实不需要装任何插件，IDE 自带的 Markdown 插件即可支持该操作：</p>
<ol>
<li>使用任意截图软件截图到剪贴板；</li>
<li>Ctrl + V 复制到编辑器中；</li>
<li>IDE 会自动生成图片文件 <code>img.png</code>（如果已存在，则会加自增后缀），以及相应的 Markdown 标签 <code>![img.png](img.png)</code>。</li>
</ol>
<p>但是，默认的插件不能配置保存路径（只能是 markdown 文件所在的路径），也不能配置命名规则，因此找了一个插件来增强这个功能。</p>
<span id="more"></span>

<p>插件名：Markdown Image Support。</p>
<p><img src="/2021/paste-image-into-markdown-in-jetbrains-ide/0f014f66da4940ed84c124e4febd0010.png"></p>
<p>配置界面如下：</p>
<p><img src="/2021/paste-image-into-markdown-in-jetbrains-ide/d39ec6e11506404ea595afff42a20b43.png"></p>
<p>不过，这个插件也有个 bug：当取消粘贴时，会回退到 ide 自身的操作，也就是创建 <code>img.png</code>。</p>
]]></content>
      <tags>
        <tag>markdown</tag>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>Php Note</title>
    <url>/2021/php-note/</url>
    <content><![CDATA[<p>Php 个人速查笔记。</p>
<span id="more"></span>

<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>)</span><br></pre></td></tr></table></figure>

<h3 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>)</span><br></pre></td></tr></table></figure>

<h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><h4 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$d1</span> = <span class="keyword">new</span> <span class="title class_">DateTime</span>();</span><br></pre></td></tr></table></figure>

<h4 id="获取指定时间"><a href="#获取指定时间" class="headerlink" title="获取指定时间"></a>获取指定时间</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$d2</span> = <span class="keyword">new</span> <span class="title class_">DateTime</span>(<span class="string">&#x27;2021-01-01&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[A-Za-z]+$/&quot;</span>, <span class="variable">$Lastname</span>)</span><br><span class="line"><span class="comment">// boolean</span></span><br></pre></td></tr></table></figure>

<h4 id="获取时间差"><a href="#获取时间差" class="headerlink" title="获取时间差"></a>获取时间差</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$diff</span> = <span class="variable">$d2</span>-&gt;<span class="title function_ invoke__">diff</span>(<span class="variable">$d1</span>);</span><br><span class="line"><span class="comment">// 年份差</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$diff</span>-&gt;y;</span><br></pre></td></tr></table></figure>

<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="EOT"><a href="#EOT" class="headerlink" title="EOT"></a>EOT</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">foreach</span> (<span class="variable">$csv</span> <span class="keyword">as</span> <span class="variable">$i</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="variable">$dateToDisplay</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;F d, Y&#x27;</span>, <span class="variable">$value</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;EOT</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;post-preview&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;a href=&quot;post.php?author=<span class="subst">$value</span>[2]&amp;date=<span class="subst">$value</span>[0]&amp;image=<span class="subst">$value</span>[1]&amp;content=<span class="subst">$value</span>[3]&amp;comment=<span class="subst">$value</span>[4]&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;h2 class=&quot;post-title&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;img class=&quot;Post1&quot; src=&quot;./files/<span class="subst">$value</span>[1]&quot; alt=&quot;farm&quot; height=&quot;380px&quot; width=&quot;720px&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;h3 class=&quot;post-subtitle&quot;&gt;<span class="subst">$value</span>[5]&lt;/h3&gt;</span></span><br><span class="line"><span class="string">    &lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;p class=&quot;post-meta&quot;&gt;Posted by</span></span><br><span class="line"><span class="string">      &lt;a href=&quot;about.php&quot;&gt;<span class="subst">$value</span>[2]&lt;/a&gt;</span></span><br><span class="line"><span class="string">      on <span class="subst">$dateToDisplay</span></span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;hr&gt;</span></span><br><span class="line"><span class="string">EOT</span>;</span><br><span class="line">&#125; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="获取请求方法"><a href="#获取请求方法" class="headerlink" title="获取请求方法"></a>获取请求方法</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$request</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>];</span><br><span class="line"><span class="comment">// POST or GET or anything else</span></span><br></pre></td></tr></table></figure>

<h3 id="输入过滤"><a href="#输入过滤" class="headerlink" title="输入过滤"></a>输入过滤</h3><h4 id="单条"><a href="#单条" class="headerlink" title="单条"></a>单条</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$id</span>  = <span class="title function_ invoke__">filter_input</span>(INPUT_POST, <span class="string">&#x27;id&#x27;</span>, FILTER_SANITIZE_FULL_SPECIAL_CHARS);</span><br></pre></td></tr></table></figure>

<h4 id="一次性"><a href="#一次性" class="headerlink" title="一次性"></a>一次性</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_POST</span> = <span class="title function_ invoke__">filter_input_array</span>(INPUT_POST, FILTER_SANITIZE_STRING);</span><br></pre></td></tr></table></figure>

<h3 id="发请求"><a href="#发请求" class="headerlink" title="发请求"></a>发请求</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$json_url</span> = <span class="string">&#x27;https://data.winnipeg.ca/resource/tx3d-pfxq.json&#x27;</span>;</span><br><span class="line"><span class="variable">$json</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$json_url</span>);</span><br><span class="line"><span class="variable">$list</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$json</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$json</span> = <span class="title function_ invoke__">json_decode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;./member.json&quot;</span>), <span class="literal">true</span>);</span><br><span class="line"><span class="variable">$points</span> = <span class="variable">$json</span>[<span class="string">&#x27;points&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$json</span> = <span class="title function_ invoke__">json_encode</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$json</span>;</span><br></pre></td></tr></table></figure>

<h2 id="MySQLi"><a href="#MySQLi" class="headerlink" title="MySQLi"></a>MySQLi</h2><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$host</span> = <span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="variable">$user</span> = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$db</span> = <span class="string">&#x27;database&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// connect to mysql database</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$host</span>, <span class="variable">$user</span>, <span class="variable">$password</span>, <span class="variable">$db</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="comment">// connection error</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;CREATE TABLE IF NOT EXISTS tablename (</span></span><br><span class="line"><span class="string">ID INT AUTO_INCREMENT PRIMARY KEY,</span></span><br><span class="line"><span class="string">Name varchar(100) NOT NULL,</span></span><br><span class="line"><span class="string">RefID int,</span></span><br><span class="line"><span class="string">FOREIGN KEY (RefID) REFERENCES Ref (ID)</span></span><br><span class="line"><span class="string">)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>) !== <span class="literal">TRUE</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Error creating table: &quot;</span> . <span class="variable">$conn</span>-&gt;error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$stmt</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;insert into table (email, date) VALUE (?,?)&quot;</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;ss&quot;</span>, <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;date&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>()) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="variable">$conn</span>-&gt;error);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;inserted, id is &quot;</span> . <span class="variable">$stmt</span>-&gt;insert_id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;update User set profile = ?, photo = ? where id = ?&quot;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&#x27;ssi&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;profile&#x27;</span>], <span class="variable">$photo</span>, <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="variable">$query</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br></pre></td></tr></table></figure>

<h3 id="查询-单条"><a href="#查询-单条" class="headerlink" title="查询 (单条)"></a>查询 (单条)</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT * FROM user where email=? and password=?&quot;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&#x27;ss&#x27;</span>, <span class="variable">$email</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">get_result</span>();</span><br><span class="line"><span class="variable">$user</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_array</span>(MYSQLI_NUM);</span><br><span class="line"><span class="comment">// user 是数组，</span></span><br><span class="line"><span class="comment">// 字段从 0 开始排列，没有 named key</span></span><br></pre></td></tr></table></figure>

<h3 id="查询-多条"><a href="#查询-多条" class="headerlink" title="查询 (多条)"></a>查询 (多条)</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT * from meal where email=?&quot;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&#x27;s&#x27;</span>, <span class="variable">$_SESSION</span>[<span class="string">&quot;email&quot;</span>]);</span><br><span class="line"><span class="variable">$query</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">get_result</span>()-&gt;<span class="title function_ invoke__">fetch_all</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// result 是数组，每个元素也是数组。</span></span><br><span class="line"><span class="comment">// 字段从 0 开始排列，没有 named key</span></span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;delete from Likes where photoId = ? and userId = ?&quot;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&#x27;ii&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>], <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="variable">$query</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br></pre></td></tr></table></figure>

<h2 id="PDO"><a href="#PDO" class="headerlink" title="PDO"></a>PDO</h2><h3 id="连接-1"><a href="#连接-1" class="headerlink" title="连接"></a>连接</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DB_DSN&#x27;</span>,<span class="string">&#x27;mysql:host=localhost;dbname=blog&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DB_USER&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DB_PASS&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="variable">$db</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(DB_DSN, DB_USER, DB_PASS);</span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException <span class="variable">$e</span>) &#123;</span><br><span class="line">  <span class="keyword">print</span> <span class="string">&quot;Error: &quot;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">  <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;INSERT INTO post (title, content) values (:title, :content)&quot;</span>;</span><br><span class="line"><span class="variable">$statement</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="variable">$query</span>);</span><br><span class="line"><span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="string">&#x27;:title&#x27;</span>, <span class="variable">$title</span>);</span><br><span class="line"><span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="string">&#x27;:content&#x27;</span>, <span class="variable">$content</span>);</span><br><span class="line"><span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"><span class="variable">$insert_id</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">lastInsertId</span>();</span><br></pre></td></tr></table></figure>

<h3 id="更新-1"><a href="#更新-1" class="headerlink" title="更新"></a>更新</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;UPDATE post SET title = :title, content = :content WHERE id = :id&quot;</span>;</span><br><span class="line"><span class="variable">$statement</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="variable">$query</span>);</span><br><span class="line"><span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="string">&#x27;:title&#x27;</span>, <span class="variable">$title</span>);</span><br><span class="line"><span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="string">&#x27;:content&#x27;</span>, <span class="variable">$content</span>);</span><br><span class="line"><span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="string">&#x27;:id&#x27;</span>, <span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"><span class="variable">$insert_id</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">lastInsertId</span>();</span><br></pre></td></tr></table></figure>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;SELECT * FROM post ORDER BY creation_time DESC LIMIT 5&quot;</span>;</span><br><span class="line"><span class="variable">$statement</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="variable">$query</span>);</span><br><span class="line"><span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"><span class="variable">$posts</span>= <span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">fetchAll</span>();</span><br></pre></td></tr></table></figure>

<h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;DELETE FROM post WHERE id = :id&quot;</span>;</span><br><span class="line"><span class="variable">$statement</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="variable">$query</span>);</span><br><span class="line"><span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="string">&#x27;:id&#x27;</span>, <span class="variable">$id</span>, PDO::<span class="variable constant_">PARAM_STR</span>);</span><br><span class="line"><span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br></pre></td></tr></table></figure>

<h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// select user from db first</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] = <span class="variable">$user</span>;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: index.php&quot;</span>);</span><br><span class="line"><span class="keyword">die</span>();</span><br></pre></td></tr></table></figure>

<h3 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">session_destroy</span>();</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: login.php&#x27;</span>);</span><br><span class="line"><span class="keyword">die</span>();</span><br></pre></td></tr></table></figure>

<h3 id="检查授权"><a href="#检查授权" class="headerlink" title="检查授权"></a>检查授权</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$hashed_password</span> = <span class="title function_ invoke__">hash</span>(<span class="string">&#x27;ripemd128&#x27;</span>, <span class="variable">$psw</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Basic-Auth"><a href="#Basic-Auth" class="headerlink" title="Basic Auth"></a>Basic Auth</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;ADMIN_LOGIN&#x27;</span>,<span class="string">&#x27;wally&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;ADMIN_PASSWORD&#x27;</span>,<span class="string">&#x27;mypass&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_AUTH_USER&#x27;</span>]) || </span><br><span class="line">!<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_AUTH_PW&#x27;</span>]) || </span><br><span class="line">(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_AUTH_USER&#x27;</span>] != ADMIN_LOGIN) || </span><br><span class="line">(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_AUTH_PW&#x27;</span>] != ADMIN_PASSWORD)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;HTTP/1.1 401 Unauthorized&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;WWW-Authenticate: Basic realm=&quot;Our Blog&quot;&#x27;</span>);</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;Access Denied: Username and password required.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a>Memcached</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$memcached</span> = <span class="keyword">new</span> <span class="title class_">Memcached</span>();</span><br><span class="line"><span class="variable">$memcached</span>-&gt;<span class="title function_ invoke__">addServer</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">11211</span>);</span><br><span class="line"><span class="variable">$memcached</span>-&gt;<span class="title function_ invoke__">set</span>(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;testcache&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$memcached</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;test&#x27;</span>));</span><br><span class="line"><span class="variable">$memcached</span>-&gt;<span class="title function_ invoke__">set</span>(<span class="string">&#x27;test2&#x27;</span>, <span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$memcached</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;test2&#x27;</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$memcached</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;test3&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h2><h3 id="为导航设置激活状态"><a href="#为导航设置激活状态" class="headerlink" title="为导航设置激活状态"></a>为导航设置激活状态</h3><p>在 page include header 之前：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$page</span> = <span class="string">&#x27;home&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>在 header：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;li&gt;&lt;a <span class="class"><span class="keyword">class</span>=&quot;&lt;?= ($<span class="title">page</span> == &#x27;<span class="title">home</span>&#x27;) ? &quot;<span class="title">current</span>&quot; : &quot;&quot;; ?&gt;&quot; <span class="title">href</span>=&quot;<span class="title">index</span>.<span class="title">php</span>&quot;&gt;<span class="title">Home</span>&lt;/<span class="title">a</span>&gt;&lt;/<span class="title">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><h4 id="保存至文件系统"><a href="#保存至文件系统" class="headerlink" title="保存至文件系统"></a>保存至文件系统</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// upload photo to images/photos</span></span><br><span class="line"><span class="variable">$photo</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$photoExt</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], PATHINFO_EXTENSION);</span><br><span class="line"><span class="variable">$photo</span> = <span class="title function_ invoke__">time</span>() . <span class="string">&quot;.&quot;</span> . <span class="variable">$photoExt</span>;</span><br><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&quot;images/photos/&quot;</span> . <span class="variable">$photo</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert photo to database</span></span><br><span class="line"><span class="variable">$query</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;insert into Photo (photo, description, type, userId) value (?,?,?,?)&quot;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&#x27;sssi&#x27;</span>, <span class="variable">$photo</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;description&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;type&#x27;</span>], <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="variable">$query</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$query</span>-&gt;insert_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">// go homepage</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: index.php&#x27;</span>);</span><br><span class="line"><span class="keyword">die</span>();</span><br></pre></td></tr></table></figure>

<h4 id="保存至数据库"><a href="#保存至数据库" class="headerlink" title="保存至数据库"></a>保存至数据库</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$fileContent</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;fileContent&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line"><span class="variable">$contentName</span> = <span class="title function_ invoke__">mysql_fix_string</span>(<span class="variable">$conn</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;contentName&#x27;</span>]);</span><br><span class="line"><span class="variable">$query</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;INSERT INTO files (contentName, fileContent, userId) values (?,?,?)&quot;</span>);</span><br><span class="line"><span class="variable">$query</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&#x27;ssi&#x27;</span>, <span class="variable">$contentName</span>, <span class="variable">$fileContent</span>, <span class="variable">$user</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="variable">$query</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"><span class="variable">$query</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br></pre></td></tr></table></figure>

<h3 id="MySQLi-初始化数据库"><a href="#MySQLi-初始化数据库" class="headerlink" title="MySQLi 初始化数据库"></a>MySQLi 初始化数据库</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$host</span>, <span class="variable">$user</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create database</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;CREATE DATABASE if not exists <span class="subst">$db</span>&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>) === <span class="literal">TRUE</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Database <span class="subst">$db</span> created.&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Error creating database: &quot;</span> . <span class="variable">$conn</span>-&gt;error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// connect to database</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$host</span>, <span class="variable">$user</span>, <span class="variable">$password</span>, <span class="variable">$db</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="comment">// connection error</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">create table if not exists faculty</span></span><br><span class="line"><span class="string">(</span></span><br><span class="line"><span class="string">    id   int  not null auto_increment primary key,</span></span><br><span class="line"><span class="string">    name text not null</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>) === <span class="literal">TRUE</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt; faculty table created successfully&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt; faculty table create error:&quot;</span> . <span class="variable">$conn</span>-&gt;error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>php</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>ReactNative WebView 接入支付宝与微信支付</title>
    <url>/2019/plug-alipay-and-wxpay-with-react-native-webview/</url>
    <content><![CDATA[<p>在 ReactNative App 的 WebView 中接入支付宝与微信支付其实很简单。首先前提是：使用 H5 网页提前做好了支付相关的动作，ReactNative 方面只负责展示 H5 页面，以及调起相应的 App 来完成支付，不需要接入底层相关的 SDK 或其它代码。</p>
<span id="more"></span>

<p>对于 Android 平台来说，经过一番研究，发现 ReactNative 方不需要添加任何额外代码即可达成目的，通过 WebView 拉起支付 App 完成相应支付功能，并在支付成功后返回原 App，体验完美。<strong>但是有一点要注意的是，不要随意修改 WebView 的 UserAgent，如果需要修改的话最好使用追加的方式</strong>，因为支付宝的支付页面如果检测不到 Android 相关的 UserAgent 则不会拉起 App，只能在网页上支付。</p>
<p>iOS 使用以下代码来达到拉起 App 的目的。但有一个问题是，从 App 完成支付动作后，系统会打开浏览器来显示支付结果，而不是回到原 App，这个缺陷应该是使用 WebView 方式无法避免的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onShouldStartLoadWithRequest = <span class="function">(<span class="params">&#123;url&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 实际上应该不需要判断， 因为 onShouldStartLoadWithRequest 只支持 iOS，但是保险起见</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Platform</span>.<span class="property">OS</span> !== <span class="string">&#x27;ios&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> isAlipay = url &amp;&amp; url.<span class="title function_">startsWith</span>(<span class="string">&#x27;alipay&#x27;</span>); <span class="comment">// 支付宝支付链接为 alipay:// 或 alipays:// 开头</span></span><br><span class="line">  <span class="keyword">const</span> isWxPay = url &amp;&amp; url.<span class="title function_">startsWith</span>(<span class="string">&#x27;weixin&#x27;</span>); <span class="comment">// 微信支付链接为 weixin:// 开头</span></span><br><span class="line">  <span class="keyword">const</span> isPay = isAlipay || isWxPay;</span><br><span class="line">  <span class="keyword">if</span> (isPay) &#123;</span><br><span class="line">    <span class="comment">// 检测客户端是否有安装支付宝或微信 App</span></span><br><span class="line">    <span class="title class_">Linking</span>.<span class="title function_">canOpenURL</span>(url)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">supported</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (supported) &#123;</span><br><span class="line">          <span class="title class_">Linking</span>.<span class="title function_">openURL</span>(url); <span class="comment">// 使用此方式即可拉起相应的支付 App</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`请先安装<span class="subst">$&#123;isAlipay ? <span class="string">&#x27;支付宝&#x27;</span> : <span class="string">&#x27;微信&#x27;</span>&#125;</span>客户端`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 这一步很重要</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>补充一点：IOS 9.0 以上需要在 <code>info.plist</code> 中添加白名单，否则 <code>canOpenURL</code> 会始终返回 <code>false</code>，不管用户安装与否：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>LSApplicationQueriesSchemes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 微信 URL Scheme 白名单--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>wechat<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>weixin<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- 支付宝  URL Scheme 白名单--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>alipay<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW14">developer.apple.com</a></p>
]]></content>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title>Publish using GitHub Action</title>
    <url>/2020/publish-using-github-action/</url>
    <content><![CDATA[<p>本文是一些 GitHub Actions 常用发布动作的总结。</p>
<p>强烈建议将所有 Publish actions 分开执行，不要集中到一个 Workflow 内。原因是如果其中一个动作因为某些原因失败了，GitHub 目前只能重启整个 Workflow，而如果 Workflow 内某个 Job 已经成功了，那么该 Job 下一次执行必然是失败（因为此类任务一般不能对同一个版本号执行两次，发布成功一次以后第二次尝试将会被拒绝发布），因此这一个提交的 Workflow 将永远不可能成功。</p>
<p>需要注意的是，以下所提到的 <code>secrets.GITHUB_TOKEN</code> 均是 GitHub Action 内置的 Access Token，无需自行创建。而其它 secrets 则需要在 <code>项目主页</code> -&gt; <code>Settings</code> -&gt; <code>Secrets</code> 处创建。</p>
<span id="more"></span>

<h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p>发布 GitHub Pages 使用的是 <a href="https://github.com/crazy-max/ghaction-github-pages">crazy-max&#x2F;ghaction-github-pages</a> 这个 action：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># publish_pages.yaml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">CD</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;v*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy_gh_pages:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># checkout &amp; yarn</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">c-hive/gha-yarn-cache@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">--frozen-lockfile</span></span><br><span class="line">      <span class="comment"># build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GitHub</span> <span class="string">Pages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">crazy-max/ghaction-github-pages@v2.1.3</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">target_branch:</span> <span class="string">gh-pages</span></span><br><span class="line">          <span class="attr">build_dir:</span> <span class="string">dist</span></span><br><span class="line">          <span class="attr">jekyll:</span> <span class="literal">false</span> <span class="comment"># 禁用 GitHub 默认开启的 jekyll 构建</span></span><br><span class="line">          <span class="attr">fqdn:</span> <span class="string">some.domain.com</span> <span class="comment"># 自定义域名，需要时填写</span></span><br></pre></td></tr></table></figure>

<p>如果想要在 push 到分支时就直接 deploy，可以使用：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<h2 id="GitHub-Release"><a href="#GitHub-Release" class="headerlink" title="GitHub Release"></a>GitHub Release</h2><p>发布 Release 包含几个动作：</p>
<ol>
<li>根据提交记录生成 Changelog，使用 <a href="https://github.com/ScottBrenner/generate-changelog-action">ScottBrenner&#x2F;generate-changelog-action</a></li>
<li>创建一个 Release，正文填写上一步得到的 Changelog，使用 <a href="https://github.com/actions/create-release">actions&#x2F;create-release</a></li>
<li>为 Release 附加需要的 assets，使用 <a href="https://github.com/actions/upload-release-asset">actions&#x2F;upload-release-asset</a></li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># publish_release.yaml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">CD</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;v*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy_release:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># checkout，由于 changelog 需要读取所有历史记录</span></span><br><span class="line">      <span class="comment"># 因此这里 `fetch-depth` 需要填 0，代表所有</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">dev</span></span><br><span class="line">      <span class="comment"># yarn &amp; build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">c-hive/gha-yarn-cache@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">--frozen-lockfile</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="comment"># 生成 changelog</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Changelog</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">scottbrenner/generate-changelog-action@master</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">Changelog</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">REPO:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="comment"># 创建 release</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">Release</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">create_release</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/create-release@v1</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">tag_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">release_name:</span> <span class="string">Release</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">body:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; steps.Changelog.outputs.changelog &#125;&#125;</span></span><br><span class="line"><span class="string"></span>          <span class="attr">draft:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">prerelease:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 添加 assets</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">Release</span> <span class="string">Asset</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">upload-release-asset</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-release-asset@v1</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">upload_url:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.create_release.outputs.upload_url</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">asset_path:</span> <span class="string">./dist/some-js.min.js</span></span><br><span class="line">          <span class="attr">asset_name:</span> <span class="string">some-js.min.js</span></span><br><span class="line">          <span class="attr">asset_content_type:</span> <span class="string">text/javascript</span></span><br></pre></td></tr></table></figure>

<h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p>发布 npm 有一个预定义的 action: <a href="https://github.com/JS-DevTools/npm-publish">JS-DevTools&#x2F;npm-publish</a>，但是用过以后我觉得实际上没有自己敲命令行好用，因为它会做一些额外的不必要的动作，可能会导致发布出错。如：第一次发布时，它默认会检查历史包而报找不到 package 的错误，虽然它文档提示可以通过参数关闭该功能，但实测下来并不行。</p>
<p>注：下面的 <code>NPM_TOKEN</code> 是需要自行配置的。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># publish_npm.yaml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">CD</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;v*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy_npm:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">c-hive/gha-yarn-cache@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">12.</span><span class="string">x</span></span><br><span class="line">          <span class="attr">registry-url:</span> <span class="string">https://registry.npmjs.org</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">--frozen-lockfile</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="comment"># 发布</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Publish</span> <span class="string">NPM</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">publish</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">NODE_AUTH_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.NPM_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="NPM-GitHub-Registry"><a href="#NPM-GitHub-Registry" class="headerlink" title="NPM GitHub Registry"></a>NPM GitHub Registry</h2><p>GitHub Registry 与 NPM 不一样的是，它要求发布的包必须是以当前仓库所属的 username 为 scope 的。因此如果要同时发布 NPM 和 GitHub Registry，在执行此步骤时 <code>package.json</code> 需要做一点小更改：将包名改为 scoped 的。</p>
<p>这里为求简便，使用了 <a href="https://github.com/deef0000dragon1/json-edit-action">deef0000dragon1&#x2F;json-edit-action</a> 来执行替换。实际上熟悉 shell 命令的话一行代码也可以完成。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># publish_github.yaml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">CD</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;v*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">publish_github:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">12</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="comment"># 将 package.json 中的 name 字段替换</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">change</span> <span class="string">package</span> <span class="string">name</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">deef0000dragon1/json-edit-action@v1</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">KEY:</span> <span class="string">name</span></span><br><span class="line">          <span class="attr">VALUE:</span> <span class="string">&quot;@username/some-package&quot;</span></span><br><span class="line">          <span class="attr">FILE:</span> <span class="string">package.json</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">c-hive/gha-yarn-cache@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">--frozen-lockfile</span></span><br><span class="line">      <span class="comment"># 配置 npmrc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">//npm.pkg.github.com/:_authToken=$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span> <span class="string">&gt;&gt;</span> <span class="string">.npmrc</span></span><br><span class="line">      <span class="comment"># 发布</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">publish</span> <span class="string">--registry=https://npm.pkg.github.com</span></span><br></pre></td></tr></table></figure>

<p>关于 <code>npmrc</code> 这一步，使用 <code>NODE_AUTH_TOKEN</code> 环境变量应该也可以达到相同目的。</p>
]]></content>
      <tags>
        <tag>github</tag>
        <tag>devops</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 MVC 的未来：浅谈 Hooks 与 VCA 在设计思路上的异同</title>
    <url>/2021/react-hooks-vs-vca/</url>
    <content><![CDATA[<p>关于 React Hooks 与 Vue Composite API：</p>
<ul>
<li>React 16.8 新增了 <a href="https://reactjs.org/docs/hooks-intro.html">Hooks API</a> （简称 hooks)</li>
<li>Vue 3.0 新增了 <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">Composite API</a> （简称 VCA）</li>
</ul>
<p>二者为了共同的目的，在接近的时间点，以非常相似但是又带有本质区别的方式，推出了各自对于未来前端代码结构发展的新思路。本文在对二者做一些简单介绍的同时，也会重点关注二者之间的统一与区别。</p>
<span id="more"></span>

<h2 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论"></a>先说结论</h2><h3 id="共同目的"><a href="#共同目的" class="headerlink" title="共同目的"></a>共同目的</h3><h4 id="1-优化代码复用"><a href="#1-优化代码复用" class="headerlink" title="1. 优化代码复用"></a>1. 优化代码复用</h4><p>以下所说的代码复用，不包含组件复用等内容。两大框架老的复用方式存在的共同问题：</p>
<ul>
<li>变量、参数来源不明确（混乱）；</li>
<li>无命名空间，变量之间可能冲突、覆盖（不可靠）；</li>
</ul>
<p><strong>React</strong></p>
<ul>
<li>mixin</li>
</ul>
<p>因为 mixin 的缺点根本多到数不清，<a href="https://reactjs.org/docs/react-without-es6.html#mixins">React mixin</a> 是一种已经基本上被废弃了的写法。它在 class 组件中已经不可用了。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">TickTock</span> = <span class="title class_">React</span>.<span class="title function_">createClass</span>(&#123;</span><br><span class="line">    <span class="attr">mixins</span>: [<span class="title class_">SetIntervalMixin</span>], <span class="comment">// Use the mixin</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>HOC</li>
</ul>
<p><a href="https://reactjs.org/docs/higher-order-components.html">HOC</a> 是 Higher-Order Components 的简称。HOC 是通过语言自身的特性实现的，跟 React 本身没有关系。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AdvancedComp</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123; </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">BaseComp</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">text</span>=<span class="string">&#123;</span>&#x27;<span class="attr">someText</span>&#x27;&#125; /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HOC 是在 React Hooks 出现之前被广泛使用的代码复用方式，但是它存在自己的问题和局限性：</p>
<ol>
<li>不能在 <code>render</code> 函数内定义 HOC（会导致组件丢失状态，以及消耗性能）</li>
<li>高阶组件会丢失原组件的静态与实例方法，需要手动复制</li>
<li><code>ref</code> 将无法得到原始组件的引用，必须用 <code>React.forwardRef</code> 处理</li>
<li>复杂的高阶组件跟 mixin 一样，存在参数来源以及去向混乱的问题</li>
</ol>
<ul>
<li>继承（不支持生命周期钩子）</li>
</ul>
<p>继承这种方式，看起来很符合语言特性，但是 React 对它的支持是不完备的，甚至没有出现在官方推荐的方式里面。最主要的问题是，高阶组件没有办法复用基类的生命周期以及 render 函数，也不能通过形如 <code>super.componentDidMount()</code> 的形式来绕过这个问题。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AdvancedComp</span> <span class="keyword">extends</span> <span class="title class_ inherited__">BaseComp</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Vue</strong></p>
<ul>
<li>Mixin</li>
</ul>
<p>Vue 的 mixin 跟 React 非常类似，在提供便利的同时，同样带来了多到数不清的问题。摘录一下来自 Vue 官方文档的吐槽：</p>
<blockquote>
<p>在 Vue 2 中，mixin 是将部分组件逻辑抽象成可重用块的主要工具。但是，他们有几个问题：</p>
<ol>
<li><p>Mixin 很容易发生冲突：因为每个 mixin 的 property 都被合并到同一个组件中，所以为了避免 property 名冲突，你仍然需要了解其他每个特性。</p>
</li>
<li><p>可重用性是有限的：我们不能向 mixin 传递任何参数来改变它的逻辑，这降低了它们在抽象逻辑方面的灵活性。</p>
</li>
</ol>
</blockquote>
<ul>
<li>Directive</li>
</ul>
<p>Directive（指令）是一种特殊的代码复用，它的目的非常局限：操作 DOM 节点。也就是说，它的复用范围仅限于跟 DOM 操作相关的内容。</p>
<h4 id="2-减轻心智负担"><a href="#2-减轻心智负担" class="headerlink" title="2. 减轻心智负担"></a>2. 减轻心智负担</h4><p>在以<strong>职能</strong>来组织代码的时候，当我们的组件开始变得更大时，<strong>逻辑关注点</strong>的列表也会增长，举例（一张来自 Vue 文档的图片）：</p>
<p><img src="/2021/react-hooks-vs-vca/vue-sfc.png"></p>
<p>相信对于这类文件写过 Vue 的同学都深有体会。当我们需要查找跟某项功能相关的代码的时候，需要在文件中不停地搜索、上下跳动。非常难受。</p>
<h4 id="3-干掉-this"><a href="#3-干掉-this" class="headerlink" title="3. 干掉 this"></a>3. 干掉 <code>this</code></h4><p><code>this</code> 在 JavaScript 这个大环境下始终存在指向不明确的问题，无论是对初学者还是资深前端工程师来说也始终是一个需要特别注意的地方，同时也不利于静态分析和强类型检查。</p>
<h3 id="本质区别"><a href="#本质区别" class="headerlink" title="本质区别"></a>本质区别</h3><p>二者的区别，说来非常简单，但是又非常巨大：</p>
<ol>
<li>React Hooks 是 <strong>effect</strong> (副作用)，在组件<strong>每次渲染的时候都会执行</strong></li>
<li>VCA 是 <strong>setup</strong> (安装&#x2F;配置)，仅在组件初始化的时候<strong>执行一次</strong></li>
</ol>
<p>这些区别是由框架本身的特性决定的，而它们具体代表了什么，需要在下文继续阐释。</p>
<h2 id="常用场景差异"><a href="#常用场景差异" class="headerlink" title="常用场景差异"></a>常用场景差异</h2><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>Hooks 移除了生命周期的概念，取而代之的是 <a href="https://reactjs.org/docs/hooks-effect.html">effect</a> ，VCA 则近乎完整地保留了生命周期概念与函数。</p>
<h4 id="1-Mount-Unmount"><a href="#1-Mount-Unmount" class="headerlink" title="1. Mount &#x2F; Unmount"></a>1. Mount &#x2F; Unmount</h4><p><strong>hooks</strong></p>
<p>React Hooks 摒弃了 mount &#x2F; unmount &#x2F; update 等生命周期概念，转而引入了一个新的 <a href="https://reactjs.org/docs/hooks-effect.html">useEffect</a> 函数，简而言之：</p>
<ol>
<li><code>useEffect</code> 接收两个参数，第一个是回调函数 <code>callback</code>，第二个是数组 <code>deps</code></li>
<li><code>callback</code> 可以没有返回值，也可以返回一个函数，如果返回了函数，那将会是这个 effect 的「清除」函数</li>
<li>当组件初次挂载，或者每当 <code>deps</code> 里面的任意一个元素发生变化的时候（这个时机由 React 判断），回调函数将会被执行一次</li>
<li>特殊情况：<ol>
<li><code>deps</code> 未传：<code>callback</code> 在每次渲染的时候都会执行一次</li>
<li><code>deps</code> 为空数组：<code>callback</code> 当且仅当组件第一次挂载的时候执行一次</li>
</ol>
</li>
</ol>
<p>因此，可以使用 <code>useEffect</code> 同时模拟 mount 与 unmount 事件：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// componentDidMount (mounted)</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[componentDidMount]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">clicked</span> = (<span class="params">e: MouseEvent</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setXy</span>([e.<span class="property">clientX</span>, e.<span class="property">clientY</span>])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, clicked)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// componentWillUnmount (beforeUnmount)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[componentWillUnmount]&#x27;</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, clicked)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure>

<p>这样做有几个好处：</p>
<ol>
<li>对于通常需要成对出现的，类似注册、解注册的逻辑来说，这么做可以使得逻辑更加内聚</li>
<li>挂载和卸载函数可以读取到同一个作用域下的变量和方法，就比如以上例子中的 <code>clicked</code> 事件</li>
</ol>
<p>但是，由此也带来了一个显而易见的问题：<code>callback</code> 没法使用 <code>async</code> 函数了。因为 <code>async</code> 函数必定会返回一个 <code>Promise</code> 实例，而这明显与设计相悖。想要在 <code>useEffect</code> 内部使用 <code>async</code> 函数的话，做法会有点绕：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">  &#125;)()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>vca</strong></p>
<p>与 Hooks 大相庭径：</p>
<ol>
<li>VCA 保留了传统的 mounted 与 unmount 事件，只不过换了个形式</li>
<li>VCA 不需要写 <code>deps</code></li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  setup () &#123;</span><br><span class="line">    <span class="keyword">const</span> xy = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">y</span>: <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">clicked</span> = (<span class="params">e: MouseEvent</span>) =&gt; &#123;</span><br><span class="line">      xy.<span class="property">x</span> = e.<span class="property">clientX</span></span><br><span class="line">      xy.<span class="property">y</span> = e.<span class="property">clientY</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, clicked)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onBeforeUnmount</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, clicked)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;xy&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2-Update-Watch"><a href="#2-Update-Watch" class="headerlink" title="2. Update &#x2F; Watch"></a>2. Update &#x2F; Watch</h4><p><strong>hooks</strong></p>
<p>当 <code>useEffect</code> 的 <code>deps</code> 不为空时，回调函数在组件第一次挂载时，以及后续每次 <code>deps</code> 的其中之一变化时都会执行。</p>
<p>这里有一点需要注意的是：**除 <code>useRef</code> 以及 <code>useState</code> 的 setter 以外，其它所有回调函数中用到的变量，都需要写进 <code>deps</code>**，包括 <code>state</code> &#x2F; <code>memo</code> &#x2F; <code>callback</code> 等，否则（因为闭包的存在）函数调用时永远会拿到旧的值。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// componentDidUpdate (watch / updated)</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[componentDidUpdate]&#x27;</span>, xy)</span><br><span class="line">&#125;, [xy])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误！fetchData 也需要写进 deps</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// useRef</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(countRef.<span class="property">current</span>)</span><br><span class="line">  <span class="comment">// useCallback useState</span></span><br><span class="line">  <span class="title function_">fetchData</span>(page)</span><br><span class="line">&#125;, [page])</span><br></pre></td></tr></table></figure>

<p><strong>vca</strong></p>
<p>VCA 的 updated 与 watch 与原 API 也基本类似，但是有几个需要注意的点：</p>
<ol>
<li>增加了一个新的概念 <code>watchEffect</code>，与 <code>useEffect</code> 十分类似，但是不需要写 <code>deps</code>！</li>
<li><code>watch</code> 与 <code>watchEffect</code> 都<strong>不能</strong>直接监听 <code>reactive</code> 本身——因为只有 reactive 下面的属性才是真正意义上的 reactive</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">onUpdated</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated&#x27;</span>, xy)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">() =&gt;</span> xy.<span class="property">y</span>, <span class="function">(<span class="params">y, oy</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watch&#x27;</span>,y, oy)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误，两个参数都将是更新后的值</span></span><br><span class="line"><span class="title function_">watch</span>(xy, <span class="function">(<span class="params">y, oy</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watch&#x27;</span>,y, oy)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watchEffect&#x27;</span>, xy.<span class="property">y</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误，无法触发</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watchEffect&#x27;</span>, xy)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><p>总体区别：</p>
<ul>
<li>从利于维护的角度出发，hooks 内原则上不允许直接定义任何变量，包括常量、方法等，因为<strong>组件每次渲染时都会重新初始化</strong>。因此从某种意义上来说，直接定义的变量也是一种响应式变量（当能够正确赋予初始值的时候）。</li>
<li>VCA 无此限制。并且直接定义的变量为常量。</li>
</ul>
<p>注：关于第一点，社区一直存在争议。争议的关键点在于每次渲染都重新初始化变量到底会不会对性能造成压力。<a href="https://zh-hans.reactjs.org/docs/hooks-faq.html#are-hooks-slow-because-of-creating-functions-in-render">官方文档</a> 的说法是<strong>不会</strong>，但是从目前的 benchmark 结果来看，React Hooks 确实已经处于下风了（当然这里面也会有其它方面的影响因素）：</p>
<p><img src="/2021/react-hooks-vs-vca/bench.png"></p>
<h4 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h4><p><strong>hooks</strong></p>
<p>hooks 大致提供了以下几种定义变量的方法：</p>
<ul>
<li><code>useState</code>: 响应式变量，不需要 <code>deps</code></li>
<li><code>useMemo</code>: 常量（不可变）或计算值，需要写 <code>deps</code></li>
<li><code>useRef</code>: 变量（可改变，但不影响渲染），不需要 <code>deps</code></li>
<li>直接定义: 通常来说是错误的写法</li>
</ul>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// state， 影响渲染</span></span><br><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算属性，count 发生变化时会改变，影响渲染</span></span><br><span class="line"><span class="keyword">const</span> doubleCount = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> count * <span class="number">2</span>, [count])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量，但不影响渲染</span></span><br><span class="line"><span class="keyword">const</span> doubleCountRef = <span class="title function_">useRef</span>(count * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接定义，每次渲染时都会重新计算值，因此也能影响渲染</span></span><br><span class="line"><span class="keyword">const</span> renderEveryTime = count * <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/react-hooks-vs-vca/cf7fa8cb-e185-4e49-b81a-297d402633cb.gif"></p>
<p><strong>vca</strong></p>
<p>VCA 提供了以下几种定义变量的方法：</p>
<ul>
<li><code>ref</code>: 包裹（深度）响应式对象。之所以存在，是因为基础类型目前来说无法做到响应式，所以必须通过一个对象来包裹，通过 <code>xxx.value</code> 访问基础类型才能获得响应式。同时允许 object&#x2F;array 的重新赋值。</li>
<li><code>reactive</code>: 与 ref 实现的效果一样，区别是不需要通过 <code>.value</code> 即可访问，同时也不能被重新赋值。</li>
<li><code>computed</code>: 计算值</li>
<li>直接定义: 常量</li>
</ul>
<p>无论哪种方式，VCA 都不需要写 deps</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// state， 影响渲染</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算属性，count 发生变化时会改变，影响渲染</span></span><br><span class="line"><span class="keyword">const</span> double = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量，一次性的值，不影响渲染</span></span><br><span class="line"><span class="keyword">const</span> doubleCountRef = count.<span class="property">value</span> * <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/react-hooks-vs-vca/35dff667-33ef-4403-86d4-ded321ea8bea.gif"></p>
<h4 id="2-方法"><a href="#2-方法" class="headerlink" title="2. 方法"></a>2. 方法</h4><p><strong>hooks</strong></p>
<ul>
<li>从利于维护的角度出发，方法定义需要使用 <code>useCallback</code> 包裹，某则每次渲染都会被重新创建，并且当方法作为 PureComponent 子组件的参数使用时会触发子组件的重新渲染。</li>
<li>方法必须正确定义 <code>deps</code>，否则内部取值将得不到变化后的值</li>
<li>方法的 <code>deps</code> 一旦改变，方法将会被重新创建，闭包也会得到更新</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">const</span> addCount = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">setCount</span>(<span class="function"><span class="params">v</span> =&gt;</span> ++v)</span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">const</span> addCount = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">setCount</span>(count + <span class="number">1</span>)</span><br><span class="line">&#125;, [count])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误, 永远相当于 setCount(0 + 1)</span></span><br><span class="line"><span class="keyword">const</span> addCount = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">setCount</span>(count + <span class="number">1</span>)</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure>

<p><strong>vca</strong></p>
<p>没什么限制，可以随心所欲。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> addCount = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  ++count.<span class="property">value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码复用"><a href="#代码复用" class="headerlink" title="代码复用"></a>代码复用</h3><p>二者在代码复用这一块的理念十分类似，最终体现在代码上就像是两兄弟。</p>
<p><strong>hooks</strong></p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState, memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useMousePosition</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> [xy, setXy] = <span class="title function_">useState</span>([<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">moved</span> = (<span class="params">e: MouseEvent</span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">setXy</span>([e.<span class="property">clientX</span>, e.<span class="property">clientY</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, moved)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, moved)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: xy[<span class="number">0</span>],</span><br><span class="line">    <span class="attr">y</span>: xy[<span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; x, y &#125; = <span class="title function_">useMousePosition</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>CustomHooks<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Mouse Position: &#123;x&#125;,&#123;y&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="/2021/react-hooks-vs-vca/b39cea16-d17f-4472-8fa4-671cd4a459c4.gif"></p>
<p><strong>vca</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useMousePosition</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> xy = <span class="title function_">reactive</span>(&#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">moved</span> = (<span class="params">e: MouseEvent</span>) =&gt; &#123;</span><br><span class="line">    xy.<span class="property">x</span> = e.<span class="property">clientX</span></span><br><span class="line">    xy.<span class="property">y</span> = e.<span class="property">clientY</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, moved)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onBeforeUnmount</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, moved)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> xy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  setup () &#123;</span><br><span class="line">    <span class="keyword">const</span> xy = <span class="title function_">useMousePosition</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; xy &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/2021/react-hooks-vs-vca/2ab2c69e-41bf-458d-8d69-074ee188044e.gif"></p>
<h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>简单来说，由于两个框架各自的特性，问题也通常来自于：</p>
<ol>
<li>deps (hook)</li>
<li>Proxy (VCA)</li>
</ol>
<p>不过有一个好消息是，React 提供了一个插件 <a href="https://www.npmjs.com/package/eslint-plugin-react-hooks">eslint-plugin-react-hooks</a> 可以帮忙检测 deps 的缺失，并且后续有计划通过代码静态分析去除掉这个烦人的依赖项。</p>
<h3 id="Hook-忘记写-deps-导致变量不更新"><a href="#Hook-忘记写-deps-导致变量不更新" class="headerlink" title="Hook: 忘记写 deps 导致变量不更新"></a>Hook: 忘记写 deps 导致变量不更新</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// state</span></span><br><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// method</span></span><br><span class="line"><span class="keyword">const</span> addCount = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">setCount</span>(count + <span class="number">1</span>)</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure>

<p><img src="/2021/react-hooks-vs-vca/f9bafbe2-24f7-46bf-89a4-fee6aae5c33c.gif"></p>
<h3 id="Hook-Deps-写不好导致死循环"><a href="#Hook-Deps-写不好导致死循环" class="headerlink" title="Hook: Deps 写不好导致死循环"></a>Hook: Deps 写不好导致死循环</h3><h4 id="案例一：在-setState-的同时又依赖了-state"><a href="#案例一：在-setState-的同时又依赖了-state" class="headerlink" title="案例一：在 setState 的同时又依赖了 state"></a>案例一：在 setState 的同时又依赖了 state</h4><p>常见于列表加载：</p>
<ol>
<li>首页数据可以直接 <code>setState</code></li>
<li>后续分页的数据要在现有基础上追加</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addCount = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">setCount</span>(count + <span class="number">1</span>)</span><br><span class="line">&#125;, [count])</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">addCount</span>()</span><br><span class="line">&#125;, [addCount])</span><br></pre></td></tr></table></figure>

<p><img src="/2021/react-hooks-vs-vca/f88339f0-a7f2-401b-a5b3-03de5cf75e3c.gif"></p>
<h4 id="案例二：-useEffect-忘记写-deps"><a href="#案例二：-useEffect-忘记写-deps" class="headerlink" title="案例二： useEffect 忘记写 deps"></a>案例二： useEffect 忘记写 deps</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> addCount = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">setCount</span>(<span class="function"><span class="params">v</span> =&gt;</span> v + <span class="number">1</span>)</span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">addCount</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="案例三：deps-里面填入了直接定义的引用类型变量"><a href="#案例三：deps-里面填入了直接定义的引用类型变量" class="headerlink" title="案例三：deps 里面填入了直接定义的引用类型变量"></a>案例三：deps 里面填入了直接定义的引用类型变量</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue = []</span><br><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于 someValue 每次渲染时都会重新初始化，</span></span><br><span class="line"><span class="comment">// 而引用类型重新初始化后其地址是不等的，</span></span><br><span class="line"><span class="comment">// 因此会触发死循环</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">setCount</span>(<span class="function"><span class="params">v</span> =&gt;</span> ++v)</span><br><span class="line">&#125;, [someValue])</span><br></pre></td></tr></table></figure>

<h3 id="Hooks-定义位置的限制"><a href="#Hooks-定义位置的限制" class="headerlink" title="Hooks: 定义位置的限制"></a>Hooks: 定义位置的限制</h3><p>因为 Hooks 的实现原理是链表，必须保证每次组件渲染得到的 hooks 及其顺序都是一致的，因此使用 Hook 需要遵循两条额外的规则：</p>
<ul>
<li>只能在 React 函数中调用 Hook，不能在普通的 JavaScript 函数中调用；</li>
<li>不能在循环，条件或嵌套函数中调用 Hook</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误的写法，会直接报错</span></span><br><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (count === <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [double, doubleCount] = <span class="title function_">useState</span>(count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="VCA-解构丢失响应性"><a href="#VCA-解构丢失响应性" class="headerlink" title="VCA: 解构丢失响应性"></a>VCA: 解构丢失响应性</h3><p>包括 <code>props</code> &#x2F; <code>reactive</code> 在内的所有 Proxy 类型变量都不能解构，否则会丢失响应性。解构必须使用 <code>toRefs</code> 方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  setup () &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">reactive</span>(&#123; <span class="attr">value</span>: <span class="number">0</span> &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> addCount = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      ++count.<span class="property">value</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; count, value, addCount &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/2021/react-hooks-vs-vca/f773cbbb-79bd-4920-8164-cdd998748c02.gif"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a>React Hooks</h3><p>优点：</p>
<ul>
<li>目前为止最好的代码复用方式（之一）</li>
<li>优秀且精炼的设计理念</li>
</ul>
<p>缺点：</p>
<ul>
<li>需要写 <code>deps</code></li>
<li>由于其每次渲染都执行 (effect) 的特点，目前被业界公认为心智负担极重</li>
</ul>
<h3 id="Vue-Composite-API"><a href="#Vue-Composite-API" class="headerlink" title="Vue Composite API"></a>Vue Composite API</h3><p>优点：</p>
<ul>
<li>目前为止最好的代码复用方式（之一）</li>
<li>作为 setup，上手难度相较 hooks 可谓是极低，心智负担极低</li>
</ul>
<p>缺点：</p>
<ul>
<li>与 Hooks 相比，API 设计（也许）不够精炼，受制于历史包袱</li>
<li>Proxy 虽然带来了便利，但是也带来了麻烦，经常需要考虑：<ul>
<li>一个对象能否解构？</li>
<li>一个属性到底应该用 <code>ref</code> 还是 <code>reactive</code>？</li>
<li>取值的时候要不要加 <code>.value</code>（常常被忘记）？</li>
</ul>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://zh-hans.reactjs.org/docs/hooks-intro.html">React Hooks 官方文档</a></li>
<li><a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">Vue Composite API 官方文档</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/133819602">知乎：Vue3 究竟好在哪里？（和 React Hook 的详细对比）</a></li>
<li><a href="https://www.zhihu.com/question/390974405">知乎：新版react中，useCallback 和 useMemo 是不是值得大量使用？</a></li>
<li><a href="https://blog.vuejs.org/posts/vue-3.2.html">Vue 3.2 Released!</a></li>
</ol>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>vue</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React Hooks</title>
    <url>/2019/react-hooks/</url>
    <content><![CDATA[<p><a href="https://reactjs.org/docs/hooks-intro.html">Hooks</a> 是 React 在 v16.8.0 版本所支持的一个新特性，允许开发者在 Functional Component 中实现「状态」以及「生命周期」等原本只能在 Class Component 中实现的特性。</p>
<p>而 <a href="https://zhuanlan.zhihu.com/p/68477600">Vue Function-based API</a> 是将来会出现在 Vue.js 3.0 大版本中的一个 API 变革的整体预览，二者（至少）在形式上保持了高度统一，而 yyx 也在文章中直言是受到了 React Hooks 的启发，二者分别解决了自身框架的一些痛点，并允许开发写编者更加「纯粹」的函数式组件。也许可以认为是未来前端框架发展的一个大方向？</p>
<span id="more"></span>

<p>以下代码例子大部分来自于<a href="https://reactjs.org/docs/hooks-intro.html">官方文档</a>。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>React Hooks 提供了两个基本 Hooks: <code>useState</code> 与 <code>useEffect</code>，其中：</p>
<ul>
<li><code>useState</code> hook 赋予了函数式组件保存以及更新「状态」的能力</li>
<li><code>useEffect</code> hook 赋予了函数式组件在「生命周期」之中执行函数的能力</li>
</ul>
<p>官网上的一个简单例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Similar to componentDidMount and componentDidUpdate:</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Update the document title using the browser API</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上组件定义了一个函数式组件，并在组件内注册了一个 state <code>count</code>，实现了每当点击按钮的时候，<code>count</code> 会自增 1，视图相应更新，并且页面标题会随着 <code>count</code> 更新而更新的功能。</p>
<h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><p><code>useState</code> 的作用很明显，也很简单：它接受一个参数作为 state 的初始值，返回一个数组，数组第一位是 state 的值，第二位是改变该 state 的方法。以上例子使用了 ES6 的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">数组解构</a>特性来简化了代码，同时这也是推荐的写法。</p>
<p>如果一个组件需要保有多个状态，那么有两种实现方式：</p>
<ol>
<li>分别定义 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [age, setAge] = <span class="title function_">useState</span>(<span class="number">42</span>);</span><br><span class="line"><span class="keyword">const</span> [fruit, setFruit] = <span class="title function_">useState</span>(<span class="string">&#x27;banana&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> [todos, setTodos] = <span class="title function_">useState</span>([&#123; <span class="attr">text</span>: <span class="string">&#x27;Learn Hooks&#x27;</span> &#125;]);</span><br></pre></td></tr></table></figure></li>
<li>合并定义 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">   <span class="attr">age</span>: <span class="number">42</span>,</span><br><span class="line">   <span class="attr">fruit</span>: <span class="string">&#x27;banana&#x27;</span>,</span><br><span class="line">   <span class="attr">todos</span>: [&#123; <span class="attr">text</span>: <span class="string">&#x27;Learn Hooks&#x27;</span> &#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
<p>React 并没有明确推荐哪一种形式，但是有一点需要注意的是，如果采用第二种形式，与传统的 Class Component 有所区别的是，<code>setState</code> 不会默认为 <code>state</code> 进行 merge 操作，而是 replace，也就是说如果要达到预期的效果应该这么写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">42</span>,</span><br><span class="line">  <span class="attr">fruit</span>: <span class="string">&#x27;banana&#x27;</span>,</span><br><span class="line">  <span class="attr">todos</span>: [&#123; <span class="attr">text</span>: <span class="string">&#x27;Learn Hooks&#x27;</span> &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 age 变更为 50 而不影响其它 state</span></span><br><span class="line"><span class="title function_">setState</span>(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">  ...state,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">50</span> </span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

<h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><p><code>useEffect</code> 可以看作是传统生命周期函数 <code>componentDidMount</code> &#x2F; <code>componentDidUpdate</code> &#x2F; <code>componentWillUnmount</code> 的结合，不过有一点区别是 <code>useEffect</code> 是异步执行的，不会阻塞渲染。它的用法要比 <code>useState</code> 稍微复杂些。</p>
<p>最简单的例子就跟上面的一样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Update the document title using the browser API</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>接受一个函数作为参数，<strong>每当视图重新渲染完成后</strong>，函数将会被执行。也就是说，它可以看做是一个 <code>componentDidMount</code> 与 <code>componentDidUpdate</code> 的综合。</p>
<p>有时候我们需要在 <code>componentDidMount</code> 的时候为组件注册一些事件，然后在 <code>componentWillUnmount</code> 时销毁它，那么这时候可以在函数结束时返回另一个函数，返回的函数就将会作为「清理」函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleStatusChange</span>(<span class="params">status</span>) &#123;</span><br><span class="line">    <span class="title function_">setIsOnline</span>(status.<span class="property">isOnline</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">ChatAPI</span>.<span class="title function_">subscribeToFriendStatus</span>(props.<span class="property">friend</span>.<span class="property">id</span>, handleStatusChange);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">ChatAPI</span>.<span class="title function_">unsubscribeFromFriendStatus</span>(props.<span class="property">friend</span>.<span class="property">id</span>, handleStatusChange);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>不过很明显我们还需要做一件事情：并不是所有 <code>componentDidUpdate</code> 都需要进行注册、销毁这一系列操作，只有在当某个监听的 value 真正发生了变化的时候才需要。因此 <code>useEffect</code> hook 提供了第二个参数。参数为一个数组，数组中传入需要监听的变量。只有当数组中任一参数的值（或引用）发生了改变时，effect 函数才会被执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleStatusChange</span>(<span class="params">status</span>) &#123;</span><br><span class="line">    <span class="title function_">setIsOnline</span>(status.<span class="property">isOnline</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">ChatAPI</span>.<span class="title function_">subscribeToFriendStatus</span>(props.<span class="property">friend</span>.<span class="property">id</span>, handleStatusChange);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">ChatAPI</span>.<span class="title function_">unsubscribeFromFriendStatus</span>(props.<span class="property">friend</span>.<span class="property">id</span>, handleStatusChange);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, [props.<span class="property">friend</span>.<span class="property">id</span>]); <span class="comment">// Only re-subscribe if props.friend.id changes</span></span><br></pre></td></tr></table></figure>

<p>（文档中有提到在之后的版本中这个参数可能会在构建阶段自动加入，这样相当于 React 在某种程度上也向 Vue.js 靠近了一点点，或者说相互借鉴）</p>
<p>如果想要定义一个只在 <code>componentDidMount</code> 时执行一次的 effect，那么第二个参数可以传一个空数组，它就再也不会在 <code>componentDidUpdate</code> 时被执行。</p>
<h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p>React 为 Hooks 制定了两条规则：</p>
<ol>
<li>只在顶层调用 Hooks，避免在循环体、条件判断或者嵌套函数中调用。因为 React 对 Hooks 的解释依赖于它们定义的顺序，开发者必须保证每次 Render 的过程中 Hooks 执行的顺序都是一致的，这样 Hooks 才能正确工作。</li>
<li>只在 React Function 中调用 Hooks。</li>
</ol>
<p>此外，React 还提供了一个 Eslint 插件 <a href="https://www.npmjs.com/package/eslint-plugin-react-hooks">eslint-plugin-react-hooks</a> 来确保各位遵守规则。</p>
<h2 id="自定义-Hooks"><a href="#自定义-Hooks" class="headerlink" title="自定义 Hooks"></a>自定义 Hooks</h2><p>自定义 Hooks 实际上跟 React Hooks 的初衷有一定关系：为了解决某些与状态绑定的逻辑很难在跨组件中复用的问题。由于 React 并不提倡 Class Component 使用继承的方式来复用高阶逻辑（实际上是因为 React 并没有像 Vue 一样对生命周期函数等做类似 Mixin 的工作，因此会导致一些 Bug），所以这个问题在传统写法中几乎无解。而 Hooks 则是为了解决这个问题而来的。</p>
<p>（ <a href="https://zhuanlan.zhihu.com/p/68477600">Vue Function-based API</a> 这篇文章中也提到了 Mixin 虽然为 Vue 带来了一些方便，但是同时也存在许多问题，3.x 版本中 Vue 也将使用类似的方式来使逻辑复用更清晰，算是殊途同归）</p>
<p>官网上举了一个例子：有多个组件需要根据「用户是否在线」这个标志来显示不一样的东西，而获取这个标志的逻辑是固定的，因此可以写成一个自定义 Hook：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useFriendStatus</span>(<span class="params">friendID</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleStatusChange</span>(<span class="params">status</span>) &#123;</span><br><span class="line">      <span class="title function_">setIsOnline</span>(status.<span class="property">isOnline</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">ChatAPI</span>.<span class="title function_">subscribeToFriendStatus</span>(friendID, handleStatusChange);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">ChatAPI</span>.<span class="title function_">unsubscribeFromFriendStatus</span>(friendID, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isOnline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而使用它的方式则非常简单：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FriendStatus</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isOnline = <span class="title function_">useFriendStatus</span>(props.<span class="property">friend</span>.<span class="property">id</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isOnline === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Loading...&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isOnline ? <span class="string">&#x27;Online&#x27;</span> : <span class="string">&#x27;Offline&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此可以发现，所谓的自定义 Hooks，其实只是把能复用的逻辑「抽离」了出来当做一个函数用以在各处执行，并没有什么特别之处。React 建议自定义 Hooks 使用 ‘use’ 作为方法名的前缀，这样可以让代码可读性显得更高，同时也可以让 lint 工具自动识别并检测该函数是否符合既定规则。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>vue</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native Text Inline Image</title>
    <url>/2018/react-native-text-inline-image/</url>
    <content><![CDATA[<p>原文地址（需科学上网）：<a href="https://medium.com/@yloeza/react-native-text-inline-image-6055dabd9399">React Native Text Inline Image</a></p>
<p>RN 版本：0.49</p>
<p>图文混排（在文字中插入图片，并保持正确换行）是客户端普遍的需求，但在 RN 中它有一点问题，具体表现在 Android 平台下图片显得异常的小，并且相同系统不同设备之间的表现也不尽一样，而 ios 则表现正常。</p>
<span id="more"></span>

<p>就像这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">AppRegistry</span>,</span><br><span class="line">  <span class="title class_">StyleSheet</span>,</span><br><span class="line">  <span class="title class_">Text</span>,</span><br><span class="line">  <span class="title class_">View</span>,</span><br><span class="line">  <span class="title class_">Image</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = <span class="title class_">StyleSheet</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">container</span>: &#123;</span><br><span class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">paddingTop</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&#x27;#f6f7f8&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">image</span>: &#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">80</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">80</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">text</span>: &#123;</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&#x27;#dcdcde&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.text&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Hello people!</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Image</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&#123;styles.image&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">source</span>=<span class="string">&#123;&#123;uri:</span> &#x27;<span class="attr">http:</span>//<span class="attr">s3.hilariousgifs.com</span>/<span class="attr">displeased-cat.jpg</span>&#x27;&#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">AppRegistry</span>.<span class="title function_">registerComponent</span>(<span class="string">&#x27;App&#x27;</span>, <span class="function">() =&gt;</span> <span class="title class_">App</span>);</span><br></pre></td></tr></table></figure>

<p>它在 ios 下看起来是这样的：</p>
<p><img src="https://static.wxsm.space/blog/48595774-3ac02200-e991-11e8-8320-d5763b33b4e1.png" alt="ios-before"></p>
<p>而在 Android 下看起来是这样的：</p>
<p><img src="https://static.wxsm.space/blog/48595773-3ac02200-e991-11e8-90a8-f7cc619eed50.png" alt="android-before"></p>
<p><strong>可以看到，在 Android 下面这张图异常地小！</strong></p>
<p>实际上这与设备的像素比（pixel ratio）有关，是现版本 React Native 在渲染文字内联图片时的一个 Bug，为了解决这个问题，我们可以给图片设定一个基于设备像素比的宽高。</p>
<p>就像这样:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">AppRegistry</span>,</span><br><span class="line">  <span class="title class_">StyleSheet</span>,</span><br><span class="line">  <span class="title class_">Text</span>,</span><br><span class="line">  <span class="title class_">View</span>,</span><br><span class="line">  <span class="title class_">Image</span>,</span><br><span class="line">  <span class="title class_">Platform</span>,</span><br><span class="line">  <span class="title class_">PixelRatio</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> width = <span class="number">80</span> * (<span class="title class_">Platform</span>.<span class="property">OS</span> === <span class="string">&#x27;ios&#x27;</span> ? <span class="number">1</span> : <span class="title class_">PixelRatio</span>.<span class="title function_">get</span>());</span><br><span class="line"><span class="keyword">const</span> height = <span class="number">80</span> * (<span class="title class_">Platform</span>.<span class="property">OS</span> === <span class="string">&#x27;ios&#x27;</span> ? <span class="number">1</span> : <span class="title class_">PixelRatio</span>.<span class="title function_">get</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = <span class="title class_">StyleSheet</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">container</span>: &#123;</span><br><span class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">paddingTop</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&#x27;#f6f7f8&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">image</span>: &#123;</span><br><span class="line">    <span class="attr">width</span>: width,</span><br><span class="line">    <span class="attr">height</span>: height,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">text</span>: &#123;</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&#x27;#dcdcde&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.text&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Hello people!</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Image</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&#123;styles.image&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">source</span>=<span class="string">&#123;&#123;uri:</span> &#x27;<span class="attr">http:</span>//<span class="attr">s3.hilariousgifs.com</span>/<span class="attr">displeased-cat.jpg</span>&#x27;&#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">AppRegistry</span>.<span class="title function_">registerComponent</span>(<span class="string">&#x27;App&#x27;</span>, <span class="function">() =&gt;</span> <span class="title class_">App</span>);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://static.wxsm.space/blog/48595772-3a278b80-e991-11e8-922d-f2a5885debfc.png" alt="android-after"></p>
<p>如此一来，内联图片在 Android 下就能以正常缩放比显示了。</p>
<p>方便起见，可以将这段逻辑封装到组件中去。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">StyleSheet</span>,</span><br><span class="line">  <span class="title class_">Image</span>,</span><br><span class="line">  <span class="title class_">Platform</span>,</span><br><span class="line">  <span class="title class_">PixelRatio</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This component fixes a bug in React Native with &lt;Image&gt; component inside of</span></span><br><span class="line"><span class="comment">// &lt;Text&gt; components.</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">InlineImage</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> style = props.<span class="property">style</span>;</span><br><span class="line">  <span class="keyword">if</span> (style &amp;&amp; <span class="title class_">Platform</span>.<span class="property">OS</span> !== <span class="string">&#x27;ios&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// Multiply width and height by pixel ratio to fix React Native bug</span></span><br><span class="line">    style = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="title class_">StyleSheet</span>.<span class="title function_">flatten</span>(props.<span class="property">style</span>));</span><br><span class="line">    [<span class="string">&#x27;width&#x27;</span>, <span class="string">&#x27;height&#x27;</span>].<span class="title function_">forEach</span>(<span class="function">(<span class="params">propName</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (style[propName]) &#123;</span><br><span class="line">        style[propName] *= <span class="title class_">PixelRatio</span>.<span class="title function_">get</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Image</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;style&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;Inherit&quot; prop types from Image</span></span><br><span class="line"><span class="title class_">InlineImage</span>.<span class="property">propTypes</span> = <span class="title class_">Image</span>.<span class="property">propTypes</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">InlineImage</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title>React node starter</title>
    <url>/2018/react-node-starter/</url>
    <content><![CDATA[<p>出于某种需求搭建了一个非常简单的、基于 React &#x2F; Node &#x2F; Express &#x2F; MongoDB 的 starter 工程：<a href="https://github.com/wxsms/react-node-starter">wxsms&#x2F;react-node-starter</a>，旨在简化小型或中小型项目开发流程，关注实际业务开发。</p>
<p>目前所实现的内容有：</p>
<ul>
<li>前后端完全分离</li>
<li>热重载</li>
<li>用户注册、登录</li>
</ul>
<p><img src="https://static.wxsm.space/blog/46710580-0ca53f00-cc7b-11e8-8328-f49e0a14c601.png"></p>
<p>麻雀虽小，五脏俱全。下面记录搭建过程。</p>
<span id="more"></span>

<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p>整个项目实际上是一个使用 <a href="https://github.com/facebook/create-react-app">facebook&#x2F;create-react-app</a> 创建出来的架构。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install create-react-app -g</span><br><span class="line">$ create-react-app react-node-starter</span><br></pre></td></tr></table></figure>

<p>如此就完事了。创建出来的项目会包含 React 以及 React Scripts，Webpack 等配置都已经包含在了 React Scripts 中。执行 <code>npm start</code> 会打开 <a href="http://localhost:3000/">http://localhost:3000</a>，但是有一个遗憾之处是，这里提供的热重载不是 HMR，而是整个页面级别的重新加载。</p>
<h2 id="Node-Express"><a href="#Node-Express" class="headerlink" title="Node &amp; Express"></a>Node &amp; Express</h2><p>要在前端项目的基础上加入 Node 服务端，由于项目的极简性质，需要考虑一个问题是：如何在不跨域、不加入额外反代的情况下完成这个任务。有幸的是 create-react-app 贴心地加入了 <a href="https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#proxying-api-requests-in-development">Proxying API Requests in Development</a> 功能，只需要给 <code>package.json</code> 加入一对键值，就可以达成目的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;proxy&quot;: &quot;http://localhost:3001&quot;</span><br></pre></td></tr></table></figure>

<p>这样一来，在开发环境下，前端会自动将 <code>Accept</code> Header 不包含 <code>text/html</code> 的请求（即 Ajax 请求）转发到 3001 端口，那么我们只需要将服务端部署到 3001 端口就好了。</p>
<p>至于生产环境则无此烦恼，只需要将 <code>npm run build</code> 打包出来的文件当做静态资源，服务器依旧照常启动即可。</p>
<p>在项目根目录下新建 <code>server</code> 文件夹，用来存放服务端代码。</p>
<p><code>server/server.js</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">&#x27;./app&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3001</span>;</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;port&#x27;</span>, port);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(app);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(port);</span><br></pre></td></tr></table></figure>

<p><code>server/app.js</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">&#x27;morgan&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">logger</span>(<span class="string">&#x27;dev&#x27;</span>));</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">  <span class="attr">secret</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">saveUninitialized</span>: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../build&#x27;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/public&#x27;</span>, express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../public&#x27;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">sendFile</span>(<span class="string">&#x27;build/index.html&#x27;</span>, &#123;<span class="attr">root</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../&#x27;</span>)&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app;</span><br></pre></td></tr></table></figure>

<p>就是一个典型的 Express HTTP 服务器。当处于开发环境时，<code>build</code> 目录只存在于内存中。执行生产构建脚本后，会打包至硬盘，因此上面的代码可以同时覆盖到开发与生产环境，无需再做额外配置。</p>
<p>准备完成后，将 <code>start</code> 脚本更新为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;start&quot;: &quot;concurrently \&quot;react-scripts start\&quot; \&quot;nodemon server/server.js\&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>即可。其中：</p>
<ul>
<li><a href="https://github.com/kimmobrunfeldt/concurrently">concurrently</a> 是为了在一个终端窗口中同时执行前端与服务端命令</li>
<li><a href="https://github.com/remy/nodemon">nodemon</a> 是为了实现服务端热重载</li>
</ul>
<p>熟悉 Node.js 的应该对这两个工具都不陌生。</p>
<p>这里有一个对原项目作出改变的地方是，出于尽可能简化的目的，将 <code>registerServiceWorker.js</code> 文件及其引用移除了，同时使用 Express 来对 <code>public</code> 文件夹做静态资源路由。</p>
<p>如此一来，重新执行 <code>npm start</code> 会发现 Express 服务器能够按照预期运行了。</p>
<h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>建好 Express 整体框架后，加入 MongoDB 的相关支持就非常简单了。安装 <a href="https://mongoosejs.com/">mongoose</a>，然后在 <code>server</code> 目录下新建一个 <code>models</code> 文件夹用来存放 Model，然后新建一个 db 初始化文件：</p>
<p><code>server/mongodb.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://localhost:27017&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readdirSync</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/models&#x27;</span>)).<span class="title function_">forEach</span>(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;./models/&#x27;</span> + file);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>最后将此文件在 <code>app.js</code> 中引用即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./mongodb&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Session-Auth"><a href="#Session-Auth" class="headerlink" title="Session Auth"></a>Session Auth</h2><p>本项目采用 Session 鉴权，那么在前后端分离的项目中，无法通过服务端模板来同步赋值，因此有一个问题就是如何让前端项目获取到当前登录的角色。出于尽可能简单的目的，最终做法是在页面入口初始化时向服务端发起请求获取当前登录角色，获取过程中显示 Loading 界面。用户信息获取成功后才开始真正的路由渲染，如果具体页面鉴权失败则重定向回登录页面。</p>
<h2 id="AntD"><a href="#AntD" class="headerlink" title="AntD"></a>AntD</h2><p>前端选用 <a href="https://github.com/ant-design/ant-design">Ant Design</a> 作为 UI 框架，为了更方便地使用它，参考其文档教程，这里做一点小小的配置，首先安装 <a href="https://github.com/timarney/react-app-rewired">react-app-rewired</a> 与 <a href="https://www.npmjs.com/package/babel-plugin-import">babel-plugin-import</a>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yarn add react-app-rewired babel-plugin-import</span><br></pre></td></tr></table></figure>

<p>修改 <code>package.json</code> 中的脚本，将 <code>react-scripts</code> 全都替换为 <code>react-app-rewired</code>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;concurrently \&quot;react-app-rewired start\&quot; \&quot;nodemon server/server.js\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-app-rewired build&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-app-rewired test --env=jsdom&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;eject&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-app-rewired eject&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>然后在项目根目录中创建 <code>config-overrides.js</code> 文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;injectBabelPlugin&#125; = <span class="built_in">require</span>(<span class="string">&#x27;react-app-rewired&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> <span class="title function_">override</span> (config, env) &#123;</span><br><span class="line">  config = <span class="title function_">injectBabelPlugin</span>(</span><br><span class="line">    [<span class="string">&#x27;import&#x27;</span>, &#123;<span class="attr">libraryName</span>: <span class="string">&#x27;antd&#x27;</span>, <span class="attr">libraryDirectory</span>: <span class="string">&#x27;es&#x27;</span>, <span class="attr">style</span>: <span class="string">&#x27;css&#x27;</span>&#125;],</span><br><span class="line">    config,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这样做的好处是，CSS 可以按需加载，并且引用 AntD 组件更方便了，如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Button</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>安装 Redux 全家桶：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yarn add redux redux-thunk react-redux immutable</span><br></pre></td></tr></table></figure>

<p>然后按照 <a href="https://codesandbox.io/s/9on71rvnyo">示例项目</a> 插入到项目中去即可。区别是为了在 action 中执行异步操作加入了一个中间件 <a href="https://github.com/reduxjs/redux-thunk">redux-thunk</a>，以及原示例没有使用 <a href="https://facebook.github.io/immutable-js/">Immutable.js</a>，也在本项目中加入了。</p>
<p><code>src/redux/store.js</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/index&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(</span><br><span class="line">  rootReducer,</span><br><span class="line">  <span class="title function_">applyMiddleware</span>(thunk)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>nodejs</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React Note - Basic</title>
    <url>/2017/react-note-basic/</url>
    <content><![CDATA[<p>React 学习笔记（基础篇）。</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g create-react-app</span><br><span class="line">create-react-app hello-world</span><br><span class="line"><span class="built_in">cd</span> hello-world</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>

<p>实践：create 这一步会同时执行 <code>npm install</code> 因此有失败的可能，多尝试几次就成功了。</p>
<p>这个程序跟 vue-loader 很像，会造出一个简单的手脚架，包含了 Babel 编译器以及打包工具等等。但是细看它的 <code>package.json</code> 文件并没有包含上述内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;react-scripts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.8.5&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^15.4.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;react-dom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^15.4.2&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>因此，跟 vue-loader 不一样的是，react 这个手脚架把无关内容都封装了。这么做我觉得有利有弊：它让人用起来更方便，然而不可能达到直接使用原组件的自由度了。相比之下，这里我更喜欢 vue-loader 的处理方式。</p>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>最简示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="JSX-语法"><a href="#JSX-语法" class="headerlink" title="JSX 语法"></a>JSX 语法</h2><p>JSX 是 JavaScript 的一种语法扩展，实际上可以看做是语法糖。通过编译器，以下语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;greeting&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Hello, world!</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>相当于：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">className</span>: <span class="string">&#x27;greeting&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: <span class="string">&#x27;Hello, world&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>后者就是编译后的结果，JSX 语法块变成了一个对象（称之为 <code>React element</code>）。</p>
<p>（JB 家的 IDE 已经对 JSX 语法提供了默认支持，不然这篇笔记就到此为止了）</p>
<p>JSX 支持一些稍微高级的用法，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">formatName</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> user.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + user.<span class="property">lastName</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;Harper&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;Perez&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Hello, &#123;formatName(user)&#125;!</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  element,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>在任何地方使用 JSX：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getGreeting</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (user) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;formatName(user)&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, Stranger.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><p>上面有说到 <code>React element</code>（元素），<strong>元素</strong>的概念与<strong>组件</strong>不同：元素是组件的组成部分。</p>
<h3 id="元素渲染"><a href="#元素渲染" class="headerlink" title="元素渲染"></a>元素渲染</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  element,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>显然，它掌控了 DOM 中一个 ID 为 root 的节点，并往里面插入了元素。</p>
<h3 id="元素更新"><a href="#元素更新" class="headerlink" title="元素更新"></a>元素更新</h3><p><strong>已创建的元素是无法更新属性的</strong>。因此，如果要改变它，只能够重新创建并渲染一次。</p>
<p>然而，托虚拟 DOM 的福，重新渲染并不代表重新渲染整个 DOM，React 会查找并只更新有改变的节点。</p>
<p>但是一般不回这么做。因为有一点很重要：在设计一个元素的时候就要考虑到它在所有状态下的表现。这个其实在其它框架下也是一样的。</p>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>React 是组件化框架，因此组件是组成一个应用的基础。组件的特点：独立、可重用。</p>
<p>组件有两种定义方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="组件渲染"><a href="#组件渲染" class="headerlink" title="组件渲染"></a>组件渲染</h3><p>一个简单的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Sara&quot;</span> /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  element,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>可以看到元素组成了组件，组件又组成了元素，最后渲染在 DOM 上的是元素。</p>
<p>这个跟 Vue 很像了，区别是 Vue 没有区分所谓的“元素”跟“组件”，通通都是组件。</p>
<p>需要注意的是，在 React 世界中有个约定：自定义控件以大写字母打头。这是为了跟 HTML 元素有所区分。</p>
<h3 id="组件使用与拆解"><a href="#组件使用与拆解" class="headerlink" title="组件使用与拆解"></a>组件使用与拆解</h3><p>一个简单的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Sara&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Cahal&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Edite&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>需要注意的是，组件只能有一个根节点。（如例子中的 3 个 <code>Welcome</code> 必须包裹在 <code>div</code> 中）</p>
<h3 id="参数只读"><a href="#参数只读" class="headerlink" title="参数只读"></a>参数只读</h3><p>简单地说，React 不允许在控件内修改参数（包括值的修改以及对象修改）。允许修改的称之为“状态”（约等于 Vue 中的 component data）</p>
<h2 id="状态管理与生命周期"><a href="#状态管理与生命周期" class="headerlink" title="状态管理与生命周期"></a>状态管理与生命周期</h2><h3 id="添加状态管理"><a href="#添加状态管理" class="headerlink" title="添加状态管理"></a>添加状态管理</h3><p>组件的更新依赖于状态，因此需要实时更新的组件应在其内部建立状态管理机制（低耦合高内聚）。</p>
<p>需要状态管理机的组件，必须使用 ES6 方式声明，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Clock</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>但是，此时，组件是无法更新的：因为状态在创建时就已经被决定了。</p>
<h3 id="添加生命周期"><a href="#添加生命周期" class="headerlink" title="添加生命周期"></a>添加生命周期</h3><p>代码有注释：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 组件渲染到 DOM 后调用</span></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timerID</span> = <span class="built_in">setInterval</span>(</span><br><span class="line">      <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">tick</span>(),</span><br><span class="line">      <span class="number">1000</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 组件将销毁后调用</span></span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timerID</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Clock</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>整个流程很简单清晰了：</p>
<ol>
<li>ReactDOM 渲染 <code>Clock</code>，并对 state 做第一次初始化</li>
<li><code>render</code> 方法被调用，插入 DOM</li>
<li><code>componentDidMount</code> 方法被调用，计时器启动，<code>tick</code> 每秒钟执行一次</li>
<li>每次 <code>tick</code> 执行都调用 <code>setState</code> 方法去更新状态，这样 React 就知道需要更新 DOM 了</li>
<li>当组件被从 DOM 移除后，<code>componentWillUnmount</code> 执行</li>
</ol>
<h3 id="正确使用状态"><a href="#正确使用状态" class="headerlink" title="正确使用状态"></a>正确使用状态</h3><p>直接更改 state 属性是不会触发 UI 更新的。因此，有一些规则需要遵守。</p>
<h4 id="不直接修改状态"><a href="#不直接修改状态" class="headerlink" title="不直接修改状态"></a>不直接修改状态</h4><p>在组件内进行修改状态操作，使用 <code>setState</code> 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">comment</span> = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">comment</span>: <span class="string">&#x27;Hello&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="关于异步更新"><a href="#关于异步更新" class="headerlink" title="关于异步更新"></a>关于异步更新</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">  <span class="attr">counter</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">counter</span> + <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">increment</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">counter</span>: prevState.<span class="property">counter</span> + props.<span class="property">increment</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<h4 id="状态合并"><a href="#状态合并" class="headerlink" title="状态合并"></a>状态合并</h4><p>在进行 <code>setState</code> 的时候，只关心需要更改的属性即可，没有传入的属性会被保留。就好像新的状态被“合并”进入旧状态一样。</p>
<h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><p>在 React 世界，组件与组件之间的状态传递是单向的，传值的方式就是将 state 当做 prop 传给子组件。</p>
<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>跟 DOM 操作很像，区别：</p>
<ol>
<li>事件命名使用驼峰式</li>
<li>直接向 JSX 中传入方法</li>
<li>不支持 <code>return false</code> 操作</li>
</ol>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DOM</span></span><br><span class="line">&lt;button onclick=<span class="string">&quot;activateLasers()&quot;</span>&gt;</span><br><span class="line">  <span class="title class_">Activate</span> <span class="title class_">Lasers</span></span><br><span class="line">&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;activateLasers&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  Activate Lasers</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A prevent default sample</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ActionLink</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The link was clicked.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Click me</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A class sample</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Toggle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">isToggleOn</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This binding is necessary to make `this` work in the callback</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">isToggleOn</span>: !prevState.<span class="property">isToggleOn</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.state.isToggleOn ? &#x27;ON&#x27; : &#x27;OFF&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：这个 <code>e</code> 是 React 封装过的，但遵循 W3C 标准，因此无需做浏览器差异化处理。</p>
<p>另外，<code>this.handleClick.bind</code> 方法是为了保证在 <code>onClick</code> 中调用了正确的 <code>this</code>，但使用箭头函数可以避免这个累赘的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoggingButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// This syntax ensures `this` is bound within handleClick.</span></span><br><span class="line">  <span class="comment">// Warning: this is *experimental* syntax.</span></span><br><span class="line">  handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is:&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isLoggedIn</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> button = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">    button = <span class="language-xml"><span class="tag">&lt;<span class="name">LogoutButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLogoutClick&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    button = <span class="language-xml"><span class="tag">&lt;<span class="name">LoginButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLoginClick&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">isLoggedIn</span>=<span class="string">&#123;isLoggedIn&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;button&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="行内判断"><a href="#行内判断" class="headerlink" title="行内判断"></a>行内判断</h3><p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Mailbox</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> unreadMessages = props.<span class="property">unreadMessages</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;unreadMessages.length &gt; 0 &amp;&amp;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          You have &#123;unreadMessages.length&#125; unread messages.</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> messages = [<span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Re: React&#x27;</span>, <span class="string">&#x27;Re:Re: React&#x27;</span>];</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Mailbox</span> <span class="attr">unreadMessages</span>=<span class="string">&#123;messages&#125;</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>这段代码的工作方式跟 JavaScript 一致：</p>
<ul>
<li><code>true &amp;&amp; expression</code> -&gt; <code>expression</code></li>
<li><code>false &amp;&amp; expression</code> -&gt; <code>false</code></li>
</ul>
<p>因此，当 <code>unreadMessages.length &gt; 0</code> 为真时，后面的 JSX 会被渲染，反则不会。</p>
<p>除此以外还有三元表达式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isLoggedIn</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      The user is <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;isLoggedIn ? &#x27;currently&#x27; : &#x27;not&#x27;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span> logged in.</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="阻止渲染"><a href="#阻止渲染" class="headerlink" title="阻止渲染"></a>阻止渲染</h3><p>在组件的 <code>render</code> 方法内 <code>return null</code> 会阻止组件的渲染，但是其生命周期不受影响。</p>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>一个简单的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> listItems = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;number&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;listItems&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="循环组件"><a href="#循环组件" class="headerlink" title="循环组件"></a>循环组件</h3><p>一个列表组件示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">NumberList</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.<span class="property">numbers</span>;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;number.toString()&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;number&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;listItems&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">NumberList</span> <span class="attr">numbers</span>=<span class="string">&#123;numbers&#125;</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>注意，这里对列表项添加了一个 <code>key</code> 属性。</p>
<h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><p><code>Key</code> 是 React 用来追踪列表项的一个属性。跟 angular 以及 vue 中 <code>track-by</code> 的概念一样。</p>
<p>如果列表项没有唯一标识，也可以用索引作为 key （不推荐）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> todoItems = todos.<span class="title function_">map</span>(<span class="function">(<span class="params">todo, index</span>) =&gt;</span></span><br><span class="line">  <span class="comment">// Only do this if items have no stable IDs</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;todo.text&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>注意：<code>Key</code> 只能直接在数组循环体内定义。如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ListItem</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> value = props.<span class="property">value</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// Wrong! There is no need to specify the key here:</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;value.toString()&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;value&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">NumberList</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.<span class="property">numbers</span>;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">    <span class="comment">// Wrong! The key should have been specified here:</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ListItem</span> <span class="attr">value</span>=<span class="string">&#123;number&#125;</span> /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;listItems&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>正则断言</title>
    <url>/2021/regex-assertions/</url>
    <content><![CDATA[<blockquote>
<p>Assertions include boundaries, which indicate the beginnings and endings of lines and words, and other patterns indicating in some way that a match is possible (including look-ahead, look-behind, and conditional expressions).</p>
</blockquote>
<p>断言是正则表达式组成的一部分，包含两种断言。本文记录了一些常用断言。</p>
<span id="more"></span>

<h2 id="边界类断言"><a href="#边界类断言" class="headerlink" title="边界类断言"></a>边界类断言</h2><h3 id=""><a href="#" class="headerlink" title="^"></a><code>^</code></h3><p><strong>匹配输入的开头</strong>。在多行模式匹配中，<code>^</code> 在换行符后也能匹配。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/^A/.<span class="title function_">test</span>(<span class="string">&#x27;Apple&#x27;</span>);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">/^B/</span>.<span class="title function_">test</span>(<span class="string">&#x27;Apple\nBanana&#x27;</span>);</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">/^B/m</span>.<span class="title function_">test</span>(<span class="string">&#x27;Apple\nBanana&#x27;</span>);</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="-1"><a href="#-1" class="headerlink" title="$"></a><code>$</code></h3><p><strong>匹配输入的结尾</strong>。在多行模式匹配中，<code>$</code> 在换行符前也能立即匹配。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/e$/.<span class="title function_">test</span>(<span class="string">&#x27;Apple&#x27;</span>);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">/e$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;Apple\nBanana&#x27;</span>);</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">/e$/m</span>.<span class="title function_">test</span>(<span class="string">&#x27;Apple\nBanana&#x27;</span>);</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="其它断言"><a href="#其它断言" class="headerlink" title="其它断言"></a>其它断言</h2><h3 id="x-y"><a href="#x-y" class="headerlink" title="x(?=y)"></a><code>x(?=y)</code></h3><p><strong>向前断言</strong>。x 被 y 跟随时匹配 x，匹配结果不包括 y。</p>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/<span class="title class_">Jack</span>(?=<span class="title class_">Sprat</span>)/.<span class="title function_">exec</span>(<span class="string">&#x27;JackSprat&#x27;</span>);</span><br><span class="line"><span class="comment">// [&quot;Jack&quot;, index: 0, input: &quot;JackSprat&quot;, groups: undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">/Jack(?=Sprat)/</span>.<span class="title function_">exec</span>(<span class="string">&#x27;Jack Sprat&#x27;</span>);</span><br><span class="line"><span class="comment">// null</span></span><br><span class="line"><span class="comment">// 因为多了一个空格，无法匹配</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">/Jack(?=\s?Sprat)/</span>.<span class="title function_">exec</span>(<span class="string">&#x27;Jack Sprat&#x27;</span>);</span><br><span class="line"><span class="comment">// [&quot;Jack&quot;, index: 0, input: &quot;Jack Sprat&quot;, groups: undefined]</span></span><br><span class="line"><span class="comment">// 加上空格后匹配成功</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">/Jack(?=Sprat|Frost)/</span>.<span class="title function_">exec</span>(<span class="string">&#x27;JackFrost&#x27;</span>);</span><br><span class="line"><span class="comment">// [&quot;Jack&quot;, index: 0, input: &quot;JackFrost&quot;, groups: undefined]</span></span><br></pre></td></tr></table></figure>

<h3 id="x-y-1"><a href="#x-y-1" class="headerlink" title="x(?!y)"></a><code>x(?!y)</code></h3><p><strong>向前否定断言</strong>。x 没有被 y 紧随时匹配 x，匹配结果不包括 y。</p>
<p>举例，匹配小数点后的数字：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/\d+(?!\.)/.<span class="title function_">exec</span>(<span class="string">&#x27;3.1415926&#x27;</span>);</span><br><span class="line"><span class="comment">// [&quot;1415926&quot;, index: 2, input: &quot;3.1415926&quot;, groups: undefined]</span></span><br></pre></td></tr></table></figure>

<h3 id="-2"><a href="#-2" class="headerlink" title="(?&lt;=y)x"></a><code>(?&lt;=y)x</code></h3><p><strong>向后断言</strong>。x 跟随 y 的情况下匹配 x，匹配结果不包括 y。</p>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/(?&lt;=<span class="title class_">Jack</span>)<span class="title class_">Sprat</span>/.<span class="title function_">exec</span>(<span class="string">&#x27;JackSprat&#x27;</span>);</span><br><span class="line"><span class="comment">// [&quot;Sprat&quot;, index: 4, input: &quot;JackSprat&quot;, groups: undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">/(?&lt;=Jack\s?)Sprat/</span>.<span class="title function_">exec</span>(<span class="string">&#x27;Jack Sprat&#x27;</span>);</span><br><span class="line"><span class="comment">// [&quot;Sprat&quot;, index: 5, input: &quot;Jack Sprat&quot;, groups: undefined]</span></span><br></pre></td></tr></table></figure>

<h3 id="-3"><a href="#-3" class="headerlink" title="(?&lt;!y)x"></a><code>(?&lt;!y)x</code></h3><p><strong>向后否定断言</strong>。x 不跟随 y 时匹配 x，匹配结果不包括 y。</p>
<p>举例，匹配小数点前的数字：</p>
<h2 id="综合举例"><a href="#综合举例" class="headerlink" title="综合举例"></a>综合举例</h2><h3 id="匹配二级域名"><a href="#匹配二级域名" class="headerlink" title="匹配二级域名"></a>匹配二级域名</h3><p>匹配某个完整域名中的二级域名：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/\w+(?=\.<span class="property">daily</span>\.<span class="property">xoyo</span>)/.<span class="title function_">exec</span>(<span class="string">&#x27;https://tg.daily.xoyo.com/&#x27;</span>);</span><br><span class="line"><span class="comment">// [&quot;tg&quot;, index: 8, input: &quot;https://tg.daily.xoyo.com/&quot;, groups: undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">/\w+(?=\.daily\.xoyo)/</span>.<span class="title function_">exec</span>(<span class="string">&#x27;https://tg.service.daily.xoyo.com/&#x27;</span>);</span><br><span class="line"><span class="comment">// [&quot;service&quot;, index: 11, input: &quot;https://tg.service.daily.xoyo.com/&quot;, groups: undefined]</span></span><br></pre></td></tr></table></figure>

<h3 id="社交场景"><a href="#社交场景" class="headerlink" title="社交场景"></a>社交场景</h3><p>比如，某条 ugc 内容包含以下规则：</p>
<ol>
<li><code>@某人</code> 表示 @</li>
<li><code>#某话题</code> 表示话题</li>
<li><code>[某表情]</code> 表示表情</li>
</ol>
<p>某个字符串如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;@大吧主 @小吧主 你们好，什么时候能把我的号解封[微笑][微笑] #狗管理 #玩不了了&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="获取所有-人"><a href="#获取所有-人" class="headerlink" title="获取所有 @ 人"></a>获取所有 @ 人</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.<span class="title function_">match</span>(<span class="regexp">/(?&lt;=@).+?(?=\s|$)/g</span>)</span><br><span class="line"><span class="comment">// [&quot;大吧主&quot;, &quot;小吧主&quot;]</span></span><br></pre></td></tr></table></figure>

<h4 id="获取所有话题"><a href="#获取所有话题" class="headerlink" title="获取所有话题"></a>获取所有话题</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.<span class="title function_">match</span>(<span class="regexp">/(?&lt;=#).+?(?=\s|$)/g</span>);</span><br><span class="line"><span class="comment">// [&quot;狗管理&quot;, &quot;玩不了了&quot;]</span></span><br></pre></td></tr></table></figure>

<h4 id="获取所有表情"><a href="#获取所有表情" class="headerlink" title="获取所有表情"></a>获取所有表情</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.<span class="title function_">match</span>(<span class="regexp">/(?&lt;=\[).+?(?=\]|$)/g</span>);</span><br><span class="line"><span class="comment">// [&quot;微笑&quot;, &quot;微笑&quot;]</span></span><br></pre></td></tr></table></figure>

<h4 id="一次性获取所有特殊内容"><a href="#一次性获取所有特殊内容" class="headerlink" title="一次性获取所有特殊内容"></a>一次性获取所有特殊内容</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.<span class="title function_">match</span>(<span class="regexp">/(?&lt;=@).+?(?=\s|$)|(?&lt;=#).+?(?=\s|$)|(?&lt;=\[).+?(?=\]|$)/g</span>);</span><br><span class="line"><span class="comment">// [&quot;大吧主&quot;, &quot;小吧主&quot;, &quot;微笑&quot;, &quot;微笑&quot;, &quot;狗管理&quot;, &quot;玩不了了&quot;]</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title>《意外之旅》</title>
    <url>/2013/review-of-an-unexpected-journey/</url>
    <content><![CDATA[<p>本来也没有抱很大希望，所以算是乐在其中。最让我开心的是看到了熟悉的人和事物，戒指坠地的声音依旧震慑人心。甘道夫虽然说年轻了六十岁但是看起来更老了，另外就是大招的冷却时间明显缩短了。然后剩下的内容，基本可以用“吃饭睡觉打兽人”概括， 而且可以看出六十年前的兽人智商还不太发达。有点像成龙大哥的风格，相比艰辛，更多的还是幽默。</p>
<p>这一次只能说中规中矩，如果想要惊世骇俗吃老本肯定是不行的了，我设想的话，既然都不搞原著了，那么第三部不如来个惊天大逆转，矮人勇者斗巨龙团灭，甘道夫和比尔博灰头土脸踏上归乡之路，这叫道高一尺，魔高一丈！</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>仙五感想</title>
    <url>/2013/review-of-cp5/</url>
    <content><![CDATA[<p>前两天觉得实在无聊，花了50人民币买了个仙5KEY，并且挂一晚上同时下载了5和5前，本来打算都玩玩看的，现在有谁想要玩的吗我给你KEY，不过只有一个哦，而且是5不是最新的5前。不准备购买5前KEY了。</p>
<p>老实说我也还没有耍通关，大概是走了一半多一点的剧情，不过确实没什么耍下去的愿望了，于是就广泛观察了一下广大玩家的意见，基本还是毁誉参半。支持者的观点也基本还是那几句，你不懂仙剑，你不懂感动，你不懂传承。反对的人，提出意见的人和建议改革的人一般都会被喷的很惨，尤其是那些用国外优秀游戏作品和仙剑做比较的，反观这个人群却能够更加理性的和广大支持者辩论。当然从四代开始正版的销量也成为了广大玩家所认可的仙剑成功的标志之一，在我个人看来这是一个很可怕的现象，如果仙剑系列的开发者也认为这是他们作品的一个成功标志的话那么这个游戏就彻底完蛋了。中国人开始买正版仙剑和上海软星的解散有直接关联，仔细想想是能够知道为什么的，这是一种民族情怀，不是因为它成功，而是希望它成功，希望终有一天我们的游戏文化也可以走出国门，而不是占山为王固步自封一万年。仙剑是国产游戏业的第一品牌，谁都希望它能够越做越优秀，这点还是统一的。</p>
<p>那么我也来说一说对5代的感想。</p>
<p>首先仍然是很传统的人设和故事，大大咧咧的男主角，误打误撞认识了一位知书达理的女主角，然后还有一个英俊帅气的男二号，和另外一位蛮横霸道的女主角，一共是四个人。然后就是混杂着各种纠缠不清的关系的剧情发展，到最后男一号自然是打败了为害人间的大魔头，但是却牺牲了其中一名美丽可爱的女主角，于是又引发了各种凄美的爱情故事。恩，至于5代后面的剧情我就是看攻略得来的了，暂时还没有亲身体会。这个主角阵容几乎从它祖宗开始就是这个模样，俊男美女闯六界，所以也没什么好奇怪的，这个剧情嘛也就这个样子，广大人民群众喜闻乐见。然后就是回合制战斗模式加强加强再加强版，仙剑虽然每一代都是回合制，但是又每一代都有新花样，这个新花样也会成为正式发布前的宣传重点之一。至于这一代的亮点，第一，我个人认为是李逍遥的回归，毕竟这一代是姚仙的孩子，给足了逍遥哥戏份，对于一代迷的我来说，很满意，第二，就是它的剧情配音，感情丰富，声调饱满，非常幽默，十分满意，逗笑了我很多次。5前对于角色数量方面似乎有很大创新，可能是基情与百合的发展使得游戏也不得不跟上时代的步伐。</p>
<p>然而这次我想说的重点不在这里。</p>
<p>一代的画面是仙剑系列永远的痛，于是后代仙剑人从来没有放弃过对画面的追求，从一代的数格子，到二代的线条2D，到三代的方块3D，再到4代5代的真3D。5代的画面在我看来已经非常成功了，各种光影，渲染，迷雾，反射，应有尽有，色彩鲜艳，场景宏大，角色的模型也是很有进步，丝毫没有愧对玩家的期待。问题就出在这里，在这如诗如画的梦幻般的游戏过程里，我完全感觉不到游戏制造者的诚意。</p>
<p>就提几点吧。都是些细节。</p>
<p>第一，仙剑奇侠传系列的主角们，从1995年至今，嘴巴从来就没有动过，但是他们却会说话。难道这也是特色传统之一吗？不要跟我说以前还没有这样的技术，李逍遥在1995年不用动嘴巴，到了2013年仍然是不用动嘴巴，这说明他天生就不用动嘴巴。腹语术。</p>
<p>第二，太空步无处不在，真的又好气又好笑，尤其是当角色上下楼梯的时候，已经不能用不自然来形容了，简直是灵异事件。当然，毫不客气的说，这也是传统之一。</p>
<p>第三，这点很重要，游戏角色永远只有屈指可数的动作，然而制作人又想要用这些动作来表达复杂多变的游戏情节，于是后面是怎样的一组情形就不必多言了。这个情况是从仙剑系列踏入3D，也就是第三代开始的，当时由于技术限制，我并没有太大的关注这个问题。可是到了今天游戏制作人仍然没有一丝一毫想要改进的意思，一方面想要让角色尽量生动，一方面又偷工减料不制作实时动作，让我感到非常可笑。一个人进门怎么表现呢？凭空消失呗。一个人给另外一个人一件事物怎么表现呢？手突然平举呗，事物还是腾空的呗。像这样的画面堂而皇之的出现在近距刻画中，在今天我觉得难以接受。</p>
<p>第四，历代都在期盼的角色实时换装系统千呼万唤不出来，再飘逸的服饰装备设计也失去了意义。不要说换了武器能体现，如果连这个都不能体现，我早喊QNMLGB了。</p>
<p>第五，角色进入居民屋可以翻箱倒柜，顺手牵羊，这个是真正的传统，我不知道姚仙在今天对于这个设计是怎么样的一个看法。</p>
<p>还有很多，不列举了，关于这些问题，只希望仙剑开发者有朝一日能发现并解决之，这将是对所有仙剑爱好者极大的鼓舞。这些就是细节，细节就是诚意。</p>
<p>至于我为什么半途就失去了将仙5通关的愿望，并不是因为游戏性，仙剑系列每一代的游戏性都半斤八两，只不过由于画面不断提高，所以才显得它的游戏性愈加飘渺，想要体验游戏性的话膝盖中箭才是最佳选择。我只是对这一代的主角全无好感而已。当然，对四代的主角也全无好感。这两代的人设简直就是同一个妈生的。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>《地心引力》</title>
    <url>/2013/review-of-gravity/</url>
    <content><![CDATA[<ul>
<li>很独特的设定。地球很美丽，宇宙很黑暗。</li>
<li>镜头经常走得很慢，处于宇宙中的各种物体也看似很慢，其实不然，经常在对比建立起来一瞬间就能感觉到可怕的速度。这样的镜头处理也让我觉得很独特。 而且对主角有很多又长又慢的镜头特写，然而影片的节奏并不慢。</li>
<li>片头直入主题，片尾紧凑收官，90分钟全无拖沓，难能可贵。</li>
<li>非常酷炫的3D效果，感觉又是一次突破，太空碎片往荧幕外飞的时候老夫的面部神经抽搐了很多下，从未有过的体验。感觉imax的地心引力会非常精彩！</li>
<li>女主遇到的连续挫折感觉已经超出了人类所能接受的极限，即使在最后一刻，依然存在挑战。</li>
<li>太空垃圾真的不会形成一个地球专属的小行星带吗？</li>
</ul>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>《西游记之孙悟空三打白骨精》</title>
    <url>/2016/review-of-the-monkey-king-2/</url>
    <content><![CDATA[<p>有剧透。</p>
<p>2016年看的第一场电影，昨天，三打白骨精。有点晚了。春节档唯一感兴趣的就是它。</p>
<p>美人鱼看了预告片和简介，结合各种评分短评影评，我觉得它远远没有达到期望。个人认为评分7分上下，对于其它电影或许是“值得一看”，对于周星驰的电影来说，只能相当于“不是垃圾”。这是在砸招牌。更不用说很多人的高分只是给的这块招牌。</p>
<p>说回到三打白骨精（以下简称三打）。虽然它评分不高，虽然我看过的国产电影不多，虽然它题材滥上加滥，但我还是要说，这是我看过的<b>最好的最值的最不坑的</b>国产爆米花电影，比去年的口碑高峰寻龙诀还要好上不少。国产电影能有这么大的进步，作为一个普通电影爱好者我是觉得很高兴。</p>
<p>为什么说三打要比寻龙诀好呢。其实它的特效没有比寻龙诀高，尤其是3D这一方面，但是，三打把电影的使命捡了回来，就是<b>讲故事</b>。寻龙诀根本就没有在讲故事，看的过程中就感觉各种特效乱飞，火花四溅，然后就结束了。然而三打不一样，它做到了<b>特效为故事服务</b>。虽然一路走过来依然很酷炫，但是作为观众我能感受到重要的角色都有它背后的故事，以及正在发生的故事。能感受到角色的立体度。实实在在的角色，而不是只活在大银幕这个平面之上。</p>
<p>三打对原故事进行了不少的改编，以往的国产电影很多改编都是坑爹，但是我认为这些改编却偏偏很多都是<b>恰到好处</b>的。为什么呢。因为改编后的电影可以让观众更加关注于主要的故事其本身，另外节省说故事的时间。就比如说，我们都知道师傅是如何收的二师兄以及沙师弟，但是电影就将其极简化了，他俩简单粗暴地一起搭上了大师兄的顺风车。这么做虽然当时看的时候觉得有点怪，但是事后想想是非常妙的。观众不需要导演去告诉他们师傅在白骨精之前是怎么走过来的，90%的观众都知道这背后到底是怎么回事，观众看的电影叫三打白骨精，直入主题。这样的改编在电影中还有不少，我认为都是为了简化故事结构突出主线而生。</p>
<p>但是，有几处改编，却又是在“三打白骨精”这个原著故事上做出了扩展。这也是很有意思的一点。<b>电影把无关紧要的剧情都尽量简要交代，然后竭尽所能地拓展主线。</b>原著故事没有吃人血的国君，没有白骨精的前世今生，也没有佛祖亲自收它，白骨精之于大师兄更是蝼蚁之于巨象。但是，电影偏偏在这么一个简单的故事上脱离了纯爆米花的低级趣味：要探讨人性，要探讨佛性，要挖掘黑暗面。其实我觉得如果要更有意思一点的话，其它可以有，白骨精还是不要那么强的好，就保持原著的水平，千年修行，最后被大师兄一棍子打死，然后师父再舍生取义，再打死师傅，更探讨，更黑暗。不过这么搞特效就没法做了。</p>
<p>此外，看了那么多的西游电影电视剧，貌似也只有三打在真正地学习老版西游记的精华。不是说它的“二师兄，师傅被妖怪抓走了”之类的吐槽以及片尾曲，而是说只有这只猴子以及老版西游记的猴子是在演猴子。看得出郭天王努力地在向六小龄童大师学习，各种动作都是以猴为基准，而不是人，虽然水平是差了一个筋斗云，但是最起码有认真地去学。要是不说他是郭富城我估计真没多少人能猜得出来，说得夸张些，他的影子里只有猴。<b>如果说老版西游记的猴子是精华，那么师傅就是糟粕。三打不但吸取了精华，还扔掉了糟粕。</b>这里面的师傅，虽然在大圣和妖怪面前看起来依然是手无缚鸡之力，但是，重要的一点，这是一个有主见，有信仰，有觉悟的师傅，是不辱其名的圣僧（吐槽一下电影的圣僧之翻译：Holy monk，上帝的和尚）。多说无益，看过便知。</p>
<p>要说缺陷的话，自然还是不少，不然不会只有5+的评分。二师兄和沙师弟是打了整场的酱油，就俩高级步兵，除了会吐槽以外屁用没有。认真想想的话其实有他俩没他俩剧情根本一模一样，即使最后大师兄回家了也不是二师兄给讨回来的。电影的审美过于西化了，比如小白龙的形象，比如白骨精的形象。但是，瑕不掩瑜，还是要说，这是我看过的<b>最好的最值的最不坑的</b>国产爆米花电影。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>用 PM2 代理静态文件</title>
    <url>/2017/serve-static-with-pm2/</url>
    <content><![CDATA[<p>命令 (2.4.0+)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pm2 serve &lt;path&gt; &lt;port&gt;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pm2 serve /dist 80</span><br></pre></td></tr></table></figure>

<p>默认情况下，如果页面未找到，它将显示 <code>404.html</code> 目录中的文件 (<strong>无法</strong>配置)。</p>
]]></content>
      <tags>
        <tag>nodejs</tag>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title>简单 CSS 实现暗黑模式</title>
    <url>/2021/simple-css-dark-mode/</url>
    <content><![CDATA[<!-- 「」 -->

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: dark) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">filter</span>: <span class="built_in">invert</span>(<span class="number">90%</span>) <span class="built_in">hue-rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">img</span>, <span class="selector-tag">video</span>, svg, <span class="selector-tag">div</span><span class="selector-attr">[class*=<span class="string">&quot;language-&quot;</span>]</span> &#123;</span><br><span class="line">        <span class="attribute">filter</span>: <span class="built_in">invert</span>(<span class="number">110%</span>) <span class="built_in">hue-rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">        <span class="attribute">opacity</span>: .<span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体效果参考本站（打开系统级别的暗黑模式）。 解释：</p>
<ol>
<li><code>invert</code> 将所有色值反转，<code>hue-rotate</code> 将黑白以外的其它主色调再反转回来（防止页面主题色出现大的变化）；</li>
<li>网上的 <code>invert</code> 通常取值为 <code>100%</code>，但是这样反转得到的黑色往往太过黑，眼睛看起来有点累，因此我觉得 <code>90%</code> 是一个更合理的值；</li>
<li>将图片、视频等其它不需要被反转的元素再反转回来，并加一个透明度，让其不那么刺眼；</li>
<li>如果 html 反转 <code>90%</code>，则图片等元素需要反转 <code>110%</code>；</li>
<li><code>div[class*=&quot;language-&quot;]</code> 对应的是本站 (VuePress) 上的代码块。</li>
</ol>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Simplest Wechat Client on Linux</title>
    <url>/2018/simplest-wechat-client-on-linux/</url>
    <content><![CDATA[<p>微信没有为 Linux 提供桌面客户端，可用的替代方式有：</p>
<ol>
<li>使用<a href="https://wx.qq.com/">网页版微信</a></li>
<li>使用第三方客户端，如 <a href="https://github.com/geeeeeeeeek/electronic-wechat">electronic-wechat</a></li>
<li>自己动手，将网页版微信封装为桌面应用程序</li>
</ol>
<p>但是每种方式都有不尽人意的地方。网页版总是嵌入在浏览器中，用起来不太方便；第三方客户端安全性无法保证；自己做一个客户端又太麻烦。</p>
<p>然而，实际上还有一种更简单的方式：通过 Chrome 将网页直接转化为桌面应用。</p>
<span id="more"></span>

<p>步骤：</p>
<ol>
<li>使用 Chrome 打开<a href="https://wx.qq.com/">网页版微信</a></li>
<li>右上角设置，<code>More tools</code> -&gt; <code>Create shortcut...</code></li>
<li>然后就可以在 Chrome Apps 中找到微信了</li>
</ol>
<p>通过此方式创建的 Apps 同时拥有桌面应用的表现以及网页版的功能，并且可以将它固定到 Dock 栏，以及独立于浏览器运行，只能用「完美」两个字形容。</p>
<p>除微信外，其它缺少 Linux 客户端但有网页客户端的应用亦可如法炮制，如有道云笔记等。</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 无法删除 Node_modules 文件夹的解决方案</title>
    <url>/2016/solution-to-windows-cant-remove-node-modules-folder/</url>
    <content><![CDATA[<p>在 Windows 操作系统下开发 NodeJS 项目的时候经常会遇到无法删除 Node_modules 文件夹的尴尬（因为依赖过多，文件路径长度爆炸），解决办法如下。</p>
<span id="more"></span>

<p>全局安装 <code>rimraf</code> 模块到系统下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g rimraf</span><br></pre></td></tr></table></figure>

<p>CD 到相应文件夹，执行如下指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rimraf node_modules</span><br></pre></td></tr></table></figure>

<p>等待其完成即可。</p>
<p>其实这个模块也可以用来删除其它无法正常删除的东西，挺好用的。Node 用习惯了以后可以为系统提供许多便利，比如说现在我都不怎么使用系统自带的计算器了，直接 WIN + R + NODE 就可以得到一个 Node 环境下的计算器，非常快捷。</p>
]]></content>
      <tags>
        <tag>nodejs</tag>
        <tag>windows</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>留念</title>
    <url>/2013/some-memory/</url>
    <content><![CDATA[<p>玩了那么多年，经历了大大小小的版本更替，如今已脱胎换骨，与当年小小的一张地图相比已经面目全非，不得不说这也是一种软件的生命周期，或者开发模式。陪伴了老夫孤独寂寞的高中时光，消磨了大量宝贵的大学时间，亦由此对它产生了深厚的感情。如今大家各奔东西，在一起的时间越来越少，于是dota也渐渐变得没什么意思，偶尔上线也只是习惯所趋。</p>
<p>我还记得我玩的第一个英雄是胖子，那么第一把自然是坑队友了，然后下一把玩了个传说哥，大家都懂的。不过好在老夫war3功底雄厚，渐渐也有了起色，开始没打算继续下去的，是因为身边的朋友在老夫带领下居然也开始喜欢dota，于是大感欣慰，遂征战至今，主要也是因为当年3C实在前路渺茫。朋友不多不少，刚好足够开一间黑店，可惜连跪几乎已是命中注定的剧本，于是我又要批评一下达Q了，你TM能不能不要裸秘法。徐尘是老夫最喜欢的选手，低调不失华丽，实力与智商兼顾，还会拍马屁。至于贝伦同学尽心尽力辅助了这么多年，只能说辛苦了。椰子同学自从退伍归来后实力大减，简直成为团队毒瘤。。好吧开玩笑的。</p>
<p>从最开始的QQ平台开始，也不知道到底耍了多少把了，印象深刻的也没有多少，只能说记性不好。无数个白昼与通宵，就在这上面一点一点的消逝去了，这里却留下不少回忆，比如小林被他不知道什么亲属拽回家去的那晚，以为是个抢劫的，老夫差点就拍案而起。还有一次和徐尘通宵，第二天一早老夫回学校睡觉，下午睡醒吃饭回到网吧看到他居然还坐在那里继续操作，那个哭笑不得。记得那时候的水饺，炒饭，泡面，汽水，和各式各样的FirstBlood。</p>
<p>如今大势已去，dota虽然还在发展，却已不适合你我，只能当做茶余饭后之娱乐了。不过也好，人总要成长。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 的一些古怪之处</title>
    <url>/2016/some-oddities-about-javascript/</url>
    <content><![CDATA[<p>大概一年前在看一本介绍JavaScript与jQuery的书籍之时看到了这么一个有趣的章节，当时印象挺深刻的。现在突然回想起来了这回事，于是就重新翻出来做了个笔记。作者将这些材料归结为两类：神奇的知识点以及WTF。这里去除了与浏览器有关的部分，因为那些和JavaScript本身并没有关联。</p>
<span id="more"></span>

<h2 id="数据类型与定义"><a href="#数据类型与定义" class="headerlink" title="数据类型与定义"></a>数据类型与定义</h2><h3 id="NULL是一个对象"><a href="#NULL是一个对象" class="headerlink" title="NULL是一个对象"></a>NULL是一个对象</h3><p>不同于C或者Java之类的语言，JavaScript的 <code>null</code> 值是一个对象。也许你会说“<code>null</code> 应该定义为一个完全没有意义的值”，也许你是对的，然并卵，事实是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">//object</span></span><br></pre></td></tr></table></figure>

<p>尽管如此，<code>null</code> 并不是任何对象的一个实例（补充：JavaScript中的所有“值”都是基本对象的实例，比如说数字是 <code>Number</code> 对象的实例，字符串是 <code>String</code> 对象的实例，所有对象都是 <code>Object</code> 对象的实例，等等）。于是我们可以理智地认为：如果 <code>null</code> 代表的是没有值，那么它就不能是任何对象的实例。因此下面的表达式应该返回 <code>false</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="literal">null</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">//evaluates false</span></span><br></pre></td></tr></table></figure>

<h3 id="NAN是一个数字"><a href="#NAN是一个数字" class="headerlink" title="NAN是一个数字"></a>NAN是一个数字</h3><p>你以为 <code>null</code> 是一个对象已经够离谱了吗，too young too simple！<code>NaN</code>→ Not a Number → 它是一个数字。还有更过分的呢，它甚至不等于它自身。我受到了伤害。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">NaN</span>); <span class="comment">//alerts &#x27;Number&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>); <span class="comment">//evaluates false</span></span><br></pre></td></tr></table></figure>

<p>事实上，<code>NaN</code> 不与任何值相等。如果想要判断一个值是不是 <code>NaN</code>，唯一的办法是通过调用 <code>isNaN()</code> 函数。</p>
<h3 id="空数组-FALSE"><a href="#空数组-FALSE" class="headerlink" title="空数组&#x3D;&#x3D;FALSE"></a>空数组&#x3D;&#x3D;FALSE</h3><p>这个特性其实很受欢迎的呢：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="keyword">new</span> <span class="title class_">Array</span>() == <span class="literal">false</span>); <span class="comment">//evaluates true</span></span><br></pre></td></tr></table></figure>

<p>要弄明白这里面到底发生了什么事，首先要知道在JavaScript世界中<strong>真假相</strong>的概念。它在逻辑上有一些简化。</p>
<p>作者认为最简单的理解方式是：在JavaScript的世界中，<strong>所有非布尔类型的值，它们都存在有一个内置的布尔类型标志位</strong>，当该非布尔值在要求做出布尔类型的比较时，实际上调用的是它的标志位。</p>
<p>（我觉得理解为JavaScript有内置的比较逻辑表也是可以的吧）</p>
<p>因为苹果没办法和梨比较，猫不能和狗比较，因此当JavaScript需要比较两种不同类型的数值时，它要做的第一件事必然是将其<strong>强转</strong>为通用的可比较的类型。<code>False</code>，<code>null</code>，<code>undefined</code>，<code>NaN</code>,空字符串以及零到最后全都会变成 <code>false</code>。不过这当然不是永久的，这种转换只在特定的表达式（布尔表达式）中生效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someVar = <span class="number">0</span>;</span><br><span class="line"><span class="title function_">alert</span>(someVar == <span class="literal">false</span>); <span class="comment">//evaluates true</span></span><br></pre></td></tr></table></figure>

<p>以上就是一个<strong>强转</strong>的例子。</p>
<p>至此还没有开始讨论数组的行为呢。空数组是一件非常奇特的事物，它们实际上是表示真，但如果你拿它来做布尔运算，它又是假的。我总觉得这里面隐藏着什么不可告人的秘密 (¬_¬)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someVar = []; <span class="comment">//empty array</span></span><br><span class="line"><span class="title function_">alert</span>(someVar == <span class="literal">false</span>); <span class="comment">//evaluates true</span></span><br><span class="line"><span class="keyword">if</span> (someVar) <span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">//alert runs, so someVar evaluates to true</span></span><br></pre></td></tr></table></figure>

<p>为了避免类似的困扰，我们可以使用<strong>全等操作符</strong>（三个等号，同时比较类型与值）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someVar = <span class="number">0</span>;</span><br><span class="line"><span class="title function_">alert</span>(someVar == <span class="literal">false</span>); <span class="comment">//evaluates true – zero is a falsy</span></span><br><span class="line"><span class="title function_">alert</span>(someVar === <span class="literal">false</span>); <span class="comment">//evaluates false – zero is a number, not a boolean</span></span><br></pre></td></tr></table></figure>

<p>这个问题十分广泛，这里也就不过多介绍了。如果想要深入了解其内部原理，可以阅读<a href="http://www.mozilla.org/js/language/E262-3.pdf">ECMA-262标准之11.9.3章节</a>文档。</p>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="REPLACE-可以接受回调函数"><a href="#REPLACE-可以接受回调函数" class="headerlink" title="REPLACE()可以接受回调函数"></a>REPLACE()可以接受回调函数</h3><p>这绝对是JavaScript最为隐秘的特性之一，从1.3版本之后加入。绝大多数人都是这么用它的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;10 13 21 48 52&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/\d+/g</span>, <span class="string">&#x27;*&#x27;</span>)); <span class="comment">//replace all numbers with *</span></span><br></pre></td></tr></table></figure>

<p>（原文中有一些疏忽，比如使用了 <code>d+</code> 而非 <code>\d+</code>，这里均做出了修正）</p>
<p>简单的替换，字符串，星号。但如果我们想要更进一步的控制呢？比如我们只想替换30以下的数字？这个逻辑通过正则来实现会较为困难，毕竟它不是数学运算，我们可以这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;10 13 21 48 52&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/\d+/g</span>, <span class="keyword">function</span>(<span class="params">match</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">parseInt</span>(match) &lt; <span class="number">30</span> ? <span class="string">&#x27;*&#x27;</span> : match;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<p>这段代码的意思是，如果匹配到的字符串转换为整型数值后小于30，则替换为星号，否则原样返回。</p>
<h3 id="不仅仅是比较和替换"><a href="#不仅仅是比较和替换" class="headerlink" title="不仅仅是比较和替换"></a>不仅仅是比较和替换</h3><p>通常情况下我们都只用到了正则表达式的比较和替换功能，但其实JavaScript提供的方法远远不止两个。</p>
<p>比如说 <code>test()</code> 函数，它和比较十分类似，但它不反回比较值，只确认字符串是否匹配。这样代码可以更轻一些。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="regexp">/\w&#123;3,&#125;/</span>.<span class="title function_">test</span>(<span class="string">&#x27;Hello&#x27;</span>)); <span class="comment">//alerts &#x27;true&#x27;</span></span><br></pre></td></tr></table></figure>

<p>以上表达式判断了字符串是否有3个或以上的字符。</p>
<p>还有就是 <code>RegExp</code> 对象，通过它我们可以构建动态的正则表达式。一般情况下正则表达式都是通过短格式声明的（封闭在斜杠中，就像上面所用到的）。这么做的话，我们不能在其中插入变量。当然，我们还有 <code>RegExp</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findWord</span>(<span class="params">word, string</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> instancesOfWord = string.<span class="title function_">match</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;\\b&#x27;</span>+word+<span class="string">&#x27;\\b&#x27;</span>, <span class="string">&#x27;ig&#x27;</span>));</span><br><span class="line">	<span class="title function_">alert</span>(instancesOfWord);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">findWord</span>(<span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;Carl went to buy a car but had forgotten his credit card.&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>这里我们基于 <code>word</code> 参数构建了一个动态的正则表达式。这个函数会返回car作为独立单词在字符串中出现的次数。本例只有一次。</p>
<p>由于 <code>RegExp</code> 使用字符串来表示正则表达式，而非斜杠，因此我们可以在里面插入变量。但是，与此同时，需要注意的是，表达式中特殊符号前的反斜杠我们也要写两次（转义处理）。</p>
<h2 id="函数与作用域"><a href="#函数与作用域" class="headerlink" title="函数与作用域"></a>函数与作用域</h2><h3 id="你可以伪造作用域"><a href="#你可以伪造作用域" class="headerlink" title="你可以伪造作用域"></a>你可以伪造作用域</h3><p>作用域决定了变量可以在哪些地方被访问。独立（即不在函数内部）的JavaScript可以在全局作用域（对浏览器来说是 <code>window</code> 对象）下访问，函数内部定义的变量则只能在内部访问，其对外部不可见。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = <span class="string">&#x27;dog&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAnimal</span>(<span class="params">adjective</span>) &#123; <span class="title function_">alert</span>(adjective+<span class="string">&#x27; &#x27;</span>+<span class="variable language_">this</span>.<span class="property">animal</span>); &#125;</span><br><span class="line"><span class="title function_">getAnimal</span>(<span class="string">&#x27;lovely&#x27;</span>); <span class="comment">//alerts &#x27;lovely dog&#x27;;</span></span><br></pre></td></tr></table></figure>

<p>这里，我们的变量和函数都是在全局作用域下定义的（比如 <code>window</code>）。因为 <code>this</code> 总是指向当前作用域，因此在本例中它指向了 <code>window.animal</code>，于是就找到了。一切看起来都没问题。但是，我们可以骗过函数本身，让它认为自己执行在另一个作用域下，并无视其原本的作用域。我们通过调用内置的 <code>call()</code> 函数来达到目的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = <span class="string">&#x27;dog&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAnimal</span>(<span class="params">adjective</span>) &#123; <span class="title function_">alert</span>(adjective+<span class="string">&#x27; &#x27;</span>+<span class="variable language_">this</span>.<span class="property">animal</span>); &#125;;</span><br><span class="line"><span class="keyword">var</span> myObj = &#123;<span class="attr">animal</span>: <span class="string">&#x27;camel&#x27;</span>&#125;;</span><br><span class="line">getAnimal.<span class="title function_">call</span>(myObj, <span class="string">&#x27;lovely&#x27;</span>); <span class="comment">//alerts &#x27;lovely camel&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在这里，函数不在 <code>window</code> 而在 <code>myObj</code> 中运行 — 作 为 <code>call</code> 方法的第一个参 数。本质上说 <code>call</code> 方法将函数 <code>getAnimal</code> 看成 <code>myObj</code> 的一个方法（如果没看懂这是什么意思， 你可能需要去看一下 JavaScrip t的原型继承系统相关内容）。注意，我们传递给 <code>call</code> 的第一个参数后面的参数都会被传递给我们的函数 — 因此我们将 lovely 作为相关参数传递进来。尽管好的代码设计不需要采用这种伪造手段，这依然是非常有趣的知识。<code>apply</code> 函数与 <code>call</code> 函数作用相似，它的参数应该被指定为数组。所以，上面的例子如果用 <code>apply</code> 函数的话如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getAnimal.<span class="title function_">apply</span>(myObj, [<span class="string">&#x27;lovely&#x27;</span>]); <span class="comment">//func args sent as array</span></span><br></pre></td></tr></table></figure>

<h3 id="函数可以自执行"><a href="#函数可以自执行" class="headerlink" title="函数可以自执行"></a>函数可以自执行</h3><p>显然：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>); &#125;)(); <span class="comment">//alerts &#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这个语法非常简单：我们定义了一个函数，然后立刻就调用了它，就像调用其它函数一样。也许你会觉得这有些奇怪，函数包含的代码一般都是在之后执行的，比如我们想在某个时刻调用它，既然它需要立即执行，那为什么要把代码放在函数体内呢？</p>
<p>自执行函数的一大用处就是将<strong>变量的当前值</strong>绑定到将来要被执行的函数中去。就比如说回调，延迟或者持续运行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someVar = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="title function_">alert</span>(someVar); &#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">var</span> someVar = <span class="string">&#x27;goodbye&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>这段代码有一个问题，它的输出永远都是goodbye而不是hello，这是因为timeout中的函数在真正执行之前永远不会去关心里面的变量发生了什么变化，到那时候，<code>someVar</code> 早就被goodbye覆盖了。</p>
<p>（JavaScript新手经常会犯的一个错误就是在循环中定义事件，并且将index作为参数传入，到最后发现真正绑上了事件的只有最后的那个元素，这也是同理）</p>
<p>解决办法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someVar = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>((<span class="keyword">function</span>(<span class="params">someVar</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)  &#123; <span class="title function_">alert</span>(someVar); &#125;</span><br><span class="line">&#125;)(someVar), <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">var</span> someVar = <span class="string">&#x27;goodbye&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>在这里，被传入函数中的相当于是一个快照，而不是真正的变量本身。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="0-1-0-2-0-3"><a href="#0-1-0-2-0-3" class="headerlink" title="0.1 + 0.2 !&#x3D;&#x3D; 0.3"></a>0.1 + 0.2 !&#x3D;&#x3D; 0.3</h3><p>其实这是计算机科学中的一个普遍问题，我已经在很多编程语言中都发现了它的影子，它是由浮点数不能做到完全精确导致的。实际的计算结果是0.30000000000000004</p>
<p>如何解决，归根到底取决于计算需求：</p>
<ul>
<li>转换成整型计算，而后再转回浮点</li>
<li>允许某个范围内的误差</li>
</ul>
<p>因此，与其：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">0.1</span>, num2 = <span class="number">0.2</span>, shouldEqual = <span class="number">0.3</span>;</span><br><span class="line"><span class="title function_">alert</span>(num1 + num2 == shouldEqual); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>不如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(num1 + num2 &gt; shouldEqual - <span class="number">0.001</span> &amp;&amp; num1 + num2 &lt; shouldEqual + <span class="number">0.001</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>这就是一个简单的允许误差的办法。</p>
<h3 id="UNDEFINED可以被DEFINED"><a href="#UNDEFINED可以被DEFINED" class="headerlink" title="UNDEFINED可以被DEFINED"></a>UNDEFINED可以被DEFINED</h3><p>这个看起来有点蠢了。undefined在JavaScript中其实不是一个关键字，尽管它一般是用来表示一个变量是否未被定义。就像这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someVar;</span><br><span class="line"><span class="title function_">alert</span>(someVar == <span class="literal">undefined</span>); <span class="comment">//evaluates true</span></span><br></pre></td></tr></table></figure>

<p>然而也可以这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span> = <span class="string">&quot;I&#x27;m not undefined!&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> someVar;</span><br><span class="line"><span class="title function_">alert</span>(someVar == <span class="literal">undefined</span>); <span class="comment">//evaluates false!</span></span><br></pre></td></tr></table></figure>

<p>看起来很有趣的样子……</p>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Static Blog Built with Vue</title>
    <url>/2016/static-blog-built-with-vue/</url>
    <content><![CDATA[<p>博客再次迁移，这次是从 Wordpress 转向静态博客（自建）。</p>
<p>技术栈:</p>
<ul>
<li>前端：vue + vue-router + vuex + bootstrap + webpack</li>
<li>服务端：没有</li>
<li>数据库：没有</li>
</ul>
<p>整站打包后，一次加载所有资源（HTML + CSS + JS + DATA）300K 不到（gzip 后 80K+），秒速渲染，与先前真的是天差地别。</p>
<p>图片资源从本地服务器搬迁到免费云。 写作使用 Markdown，从此 IDE 写博客不是梦。</p>
<p>代码地址：<a href="https://github.com/wxsms/wxsms.github.io/tree/src">https://github.com/wxsms/wxsms.github.io/tree/src</a></p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次项目经历</title>
    <url>/2016/some-project-memo/</url>
    <content><![CDATA[<p>前几天收到一个项目请求，其实是某人希望做个简单的毕设代码实现。因为去年毕业季的时候帮同学的一些朋友做过毕设项目，因此找到了我，希望继续帮忙。因为这种东西一般都比较简单，所以我也没想很多就答应了。</p>
<span id="more"></span>

<p>这位同学通过 QQ 联系上了我。她的具体需求是一个基于 C# 的 ASP.NET 网站，就几个页面，非常简单，但是相比去年做的那几个稍复杂些，因此我提高了要价，开价 500，为了让对方确信我没有在坐地起价，我还把她师姐们的需求文档都发了过去，让她自己对比。</p>
<p>然而，对方依然觉得太贵了，说想要“友情价”。我觉得挺搞笑的，脸皮很厚嘛。不过我也不想扯皮，就当你是个穷困潦倒的学生吧，大家都经历过，我也当做好事了，于是就降到了 400，说实话这个价格我是真不想做。虽然只需要一天，但是没意思，就跟上班一天一样，而且还是加班，还没有双倍工资。</p>
<p>其实除了这些，更让我觉得难过的是，对方是“几乎什么都不懂”，因此我后期可能还有非常多的工作需要做。在对方论文完成以前，我可能会成为免费技术顾问，而且她会觉得这是我理所当然应该做的。</p>
<p>约定的交货期限大概是十天的样子。于是就开始了。</p>
<p>大概在第五天的时候，对方想找我要数据库的截图，我说干嘛呢，她说贴论文里，要交初稿了。我去，合着我还帮你写论文呢。然而这时间我还没开始动手，我也没有义务提前交货，于是说想要就给加班费。对方就放弃了。</p>
<p>后来几天没有联系过。到了约定日期我把项目通过 QQ 发送给了对方，第二天早上就发现自己给删了好友。</p>
<p>其实故事到这里本该结束了。我没花多少时间，也不在乎这点钱。爱给不给吧。</p>
<p>然而，好在我有一个责任感强烈的“经纪人”。</p>
<p>就是那位给我介绍这个项目的同学，我简单地说明了一下情况，她深感自己把我坑了，于是千辛万苦帮我追数。其实我也挺过意不去的，这说到底是我的疏忽，现在反而要麻烦别人。我一直强调没事算了吧，然而“经纪人”始终不肯善罢甘休。</p>
<p>在这期间，有一些不知道是与项目主人何种关系的人来联系我，希望通过支付部分款项以息事宁人等。然而这些人的交流方式让我略感奇怪，三句不离同情，说得我跟个要饭的一样，因此没有同意。</p>
<p>最终，在“将作弊行为告知导师”的压力下，项目主人现身道歉，并且支付了全款。</p>
<p>后来，我反思了一下。我是以在校学生的思维方式来对待这件事情的，其实最近我也越发觉得这种思维方式让自己在社会中非常吃亏。现在来说，至少我也应该尊重自己的劳动力吧。同时，自己的错误也给别人带来了不必要的麻烦。</p>
<p>至于项目主人那边的几位，我只能说“人各有志”。收到钱的第二分钟，她们就全在我的黑名单里面了。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>过期鸡汤</title>
    <url>/2016/tasteless-chicken-soup/</url>
    <content><![CDATA[<p>花了两个晚上读了最近挺火的一本书，名曰《解忧杂货店》，同时也是我看过的第一本日本小说。看完以后只有一个感觉：这大概是过期的鸡汤吧。一点味道都没有。与此同时，总觉得有些什么地方不对。现在认真想了想，果然是奇葩。由于不清楚日本文化，也不知道该说是日本人奇葩，还是说仅仅是故事或者作者奇葩。</p>
<span id="more"></span>

<p>这本书大概讲述了这么一件事：</p>
<p>三名无业青年爆了一个老板娘的格，跑路途中车抛锚了无奈躲进一个荒废的屋子里，后发现有信投入，内容是吐槽烦恼。回信后立马又收到了回信，终此往复。由于咨询者不知手机为何物，因此闹洞大开认为这屋子大概是个时空机器BlaBlaBla，迷途的少年感觉找到了人生的价值，摇身一变成为烦恼终结者。接下来就是各种各样奇葩的往事，各种咨询，然后通过一个孤儿院把大家都联系在了一起，最后回到现实少年发现刚爆的可怜老板娘就是最后一个与自己通信的人。少年们随即决定重新做人，义无反顾地开始捡肥皂生涯。</p>
<p>故事的核心是“一间能够连接时空的杂货店”，因此它本身是一个和时空有关的故事。这种故事太多太多了，现在读起来已经不是特别有趣，同时也非常容易出BUG，然而我想吐槽的东西不在这里。简单地说，故事里的主角们，基本都是重度自私+自恋狂。当然这里要除去杂货店主那爷俩，他俩没有任何特别之处，普通人。以下的吐槽也不是针对他俩。</p>
<p>什么意思呢，大概就是脑子里想的永远都只有自己，无论别人发生什么事，只要一切按照自己的意愿来就行。什么爱人，什么父母，都不在考虑范围内。有些故事的角色看起来是在非常无私地处处替别人考虑，比如运动员的男友，比如富二代的老爸，然而这却是更可怕的自私。他们都有如下特点：完全不考虑别人的感受，完全不给人选择的余地，然后依然是一切按照自己的意愿来就行。</p>
<p>看这本书的时候就觉得，那些人做那么多事情，完全都不需要理由的啊，或者自己觉得这么做有理就一条路走到黑做下去了，根本就不管对身边的人有什么影响，反正老子喜欢就要干。此外，也看不出角色们有什么心理活动，感觉大家都只有一根筋。</p>
<p>难道这就是日本人的特征吗？</p>
<p>除此以外，基本上所有故事都是主流鸡汤文，以挫折、烦恼和梦想为主题。最后大家通过自己的努力（辅以杂货店的建议），都达到了自己所有或者部分的目标，或者干脆啥都没做成，但最后还是觉得自己得到了升华，甚至干脆整个人升华。整本书没有任何起伏跌宕，所有故事就那么以第三人称视觉丝毫不带感情地展开了。所以说它无味。</p>
<p>作者说，希望读者在合卷的时候能够喃喃自语曰“从来没有读过这样的小说”。我想说的倒是，从来没有读过这么无聊的鸡汤。赵国的鸡汤起码能给人打鸡血，你国连鸡血都打不了。</p>
<p>&nbsp;</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>对 ReactNative 的一些想法</title>
    <url>/2018/thoughts-of-react-native/</url>
    <content><![CDATA[<p>使用 ReactNative 开发半年有余，本文是作为一些简单的感想。</p>
<p>官网简介：</p>
<blockquote>
<p>Build native mobile apps using JavaScript and React.</p>
</blockquote>
<p>简约，不简单。看着很牛逼，但实际用起来总是差了点意思。</p>
<p>总而言之：帮你节省时间的同时，隐藏着无处不在的坑。</p>
<span id="more"></span>

<h2 id="关于框架本身"><a href="#关于框架本身" class="headerlink" title="关于框架本身"></a>关于框架本身</h2><p>一个东西要辩证地看：ReactNative 的伟大之处在于它的定位，再一次验证了一句古老的预言：一切能用 JavaScript 实现的东西，终将被 JavaScript 实现。然而就目前的状态来看，还有许多问题。</p>
<p>使用 ReactNative 的目的是：让不会写原生 App 的人，通过 JavaScript 以及 React 也能编写出原生 App，并且跨 ios &#x2F; Android 平台，乍一看相当美好。然而实际用过以后会发现，这其实是一个悖论，因为：</p>
<p>如果开发者真的完全对原生开发一窍不通，那么他根本不应该使用 ReactNative，因为他一旦遇到问题将完全没有任何解决能力，除了 Google -&gt; Try -&gt; Fail -&gt; Google 直到成功（大部分时候也许是“看起来成功”）以外毫无办法。</p>
<p>使用一项技术的前提是，至少对其有所了解。而普通 JavaScript 用户使用 ReactNative，简直就像是在对着一个黑盒子编程，没有任何可靠性可言。这也是我在开发初期的真实情况：出 bug 了，不知道为什么，解决了，也不知道为什么。处于一种非常恐慌的状态。</p>
<p>也许你会说，<a href="https://electronjs.org/">Electron</a> 不也是这种模式吗？那我为什么没有吐槽它呢？是的，他们俩“看起来”是一样的，但是实际上又完全不一样：</p>
<ul>
<li>Electron App 实际上是一个 Hybrid App，开发者写的 HTML 代码不需要经过任何处理，直接使用浏览器内核解析、显示，整个过程是透明的、可控的</li>
<li>ReactNative App 是一个真正的 Native App，开发者写的任何组件都会先被转化为原生组件，然后才显示给用户，而这个转化过程是一个黑盒子，是不可控的</li>
</ul>
<p>因此，理想与现实总是存在差距。ReactNative 开发者不能闭门造车，一定要不断地深入底层，才能真正明白自己“在干嘛”以及“该怎么干”。这也正是悖论所在：既然如此，我为什么不从一开始就使用原生方式编写 App 呢？当然，使用 ReactNative 还有另一个重要原因，即提供跨平台开发的可能性。但要知道，它在节省大量时间的同时，也给项目组带来了大量的限制和坑。</p>
<h2 id="关于这个项目"><a href="#关于这个项目" class="headerlink" title="关于这个项目"></a>关于这个项目</h2><p>ReactNative 毫无疑问是一个相当庞大的项目。</p>
<p>目前 ReactNative 还没有发布 1.0 版本，也就是说项目依旧在发展期。目前来说，我觉得<strong>最大的一个问题是项目升级问题</strong>。项目保持快速发展当然很棒，但是如何能够让现有的版本升级到最新版本呢？这对于实力不强的开发者来说几乎是不可能事件。</p>
<p>主要原因：</p>
<ul>
<li>MINOR version 会包含大量 breaking changes，无痛升级不存在的</li>
<li>也许要同时升级 React 版本</li>
<li>第三方库不一定兼容，尤其是涉及底层的</li>
</ul>
<p>另一方面，<strong>向 ReactNative 提 PR 可要比向其它 JavaScript 项目提 PR 门槛要高得多</strong>：JavaScript &#x2F; ios &#x2F; Android 你至少得会其中两个才行。</p>
<p>我说这个不是为了别的。我在 issues 下面最常看到的一句话就是：</p>
<blockquote>
<p>Hi there! This issue is being closed because it has been inactive for a while. Maybe the issue has been fixed in a recent release, or perhaps it is not affecting a lot of people. Either way, we’re automatically closing issues after a period of inactivity. Please do not take it personally!</p>
</blockquote>
<p>可以说相当无情了。关闭一个 issue 的原因，可以是 <code>maybe</code>，可以是 <code>perhaps</code>，极少有 <code>resolved</code>，这就是现状。</p>
<p>我理解它是一个开源项目，开发者的时间有限，更没有义务。但这可以为使用者提供一些参考。ReactNative 存在超大量诸如此类的 issue，没有被 fix，更没有 fix 计划，有很大一部分其实是非常基础的诉求，比如图文混排，这在 Android 平台下已然是不可能事件。</p>
<p>因此，综上来说，如果你对 ios&#x2F; Android 并不精通，那你一旦遇到棘手的问题，只能祈祷：</p>
<ul>
<li>还有更多、非常多的人遇到了跟你同样的问题</li>
<li>并且引发了激烈的讨论</li>
<li>并且成功地被开发者修复了</li>
<li>并且没有跨很多版本</li>
</ul>
<p>否则还是歇着吧。</p>
<h2 id="掉坑总结"><a href="#掉坑总结" class="headerlink" title="掉坑总结"></a>掉坑总结</h2><p>正如上文所言，<strong>ReactNative App 最主要的功能之一是 Layout 绘制，而它自带的黑盒子属性，也正是最大的坑之所在</strong>。</p>
<p>简单来说，你写了一个控件，如果不经过测试的话：</p>
<ol>
<li>你不知道它是否能在 ios 下正常表现、工作</li>
<li>你也不知道它是否能在 Android 下正常表现、工作</li>
<li>你更不知道它是否能在两个平台之间保持一致</li>
</ol>
<p><strong>总而言之，如果你不真的去试试，那你什么都不知道</strong>。也许它在 ios 下完全正常，在 Android 就直接崩溃了。</p>
<p>ReactNative 提供了许多基础的跨平台组件，但是他们基本上都各有各的坑，更有组合坑。比如：</p>
<ul>
<li><code>&lt;Text&gt;</code> 中不能有 <code>&lt;View&gt;</code> （Android 崩溃）</li>
<li><code>&lt;Text&gt;</code> 中不能有 <code>&lt;Image&gt;</code> （Android 显示异常）</li>
<li><code>&lt;Image&gt;</code> 不能同时使用 <code>borderRadius</code> 与 <code>backgroundColor</code> 样式 （Android 显示异常）</li>
<li><code>overflow</code> 样式在 Android 下无效，始终表现为 <code>hidden</code></li>
<li>等等…</li>
</ul>
<p>（冰山一角）</p>
<p>以上所说的“异常”，是无法通过适配得到解决的异常，也就是说你一定不能这么用。这些有的在文档里会标为“已知问题”，有的则没有，如果你是一个新手，那么处处都存在着惊喜等待你去发掘。</p>
<p>除此以外，还有一个显著问题就是，<strong>在 ReactNative 的世界中，Debug 是不完全可靠的</strong>。因为它在 Debug 时用的是开发电脑上的 chrome 附带的 JavaScript 引擎，而在真正运行时则使用手机内置浏览器的 JavaScript 引擎。虽然大部分时候你感觉不到差异，但是一旦出现了差异则往往是致命的。</p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="2020-10-05"><a href="#2020-10-05" class="headerlink" title="2020&#x2F;10&#x2F;05"></a>2020&#x2F;10&#x2F;05</h3><blockquote>
<p>MINOR version 会包含大量 breaking changes，无痛升级不存在的</p>
</blockquote>
<p>关于这一点，目前我理解了：因为 React Native 至今还是 0.x 版本，没有发布正式版。也就是说，不保证 minor 版本号能够兼容。</p>
<p>时隔两年，再回来看当年写的这篇文章，感觉写得还是挺对的。当然上面提到的一小部分问题，在今天的版本已经被修复了。不过总体的问题依然存在，在享受双端开发的快感同时，就必须要接受它带来的诸多问题和限制。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title>对 Moment.js 的一些想法</title>
    <url>/2018/thougths-about-momentjs/</url>
    <content><![CDATA[<p><a href="https://momentjs.com/">Moment.js</a> 是一个流行的基于 JavaScript 的时间处理工具库。应该是一个从 2011 年开始启动的项目，至今它的 <a href="https://github.com/moment/moment">Github repo</a> 也有了 3w+ 的星星，可以说在前端界人尽皆知了。反正我自从用了它基本上就没再接触过其它的相关库。</p>
<p>但最近我却对它的看法却产生了些许改变。原因是，它的 API 设计给使用者埋下了巨大无比的坑，简单来说：“名不副实”。</p>
<span id="more"></span>

<p>具体看图吧：</p>
<p><img src="https://static.wxsm.space/blog/48595809-41e73000-e991-11e8-8de0-d37e072df03c.png" alt="strange-moment-js"></p>
<p>很明显，调用 Moment.js 的 API 产生了预期之外的副作用。函数在带有返回值的同时却又对原始值进行了修改，违反了基本的 OO 设计原则。</p>
<blockquote>
<p><strong>Command–query separation (CQS)</strong> is a principle of imperative computer programming. It was devised by Bertrand Meyer as part of his pioneering work on the Eiffel programming language. <strong>It states that every method should either be a command that performs an action, or a query that returns data to the caller, but not both.</strong> In other words, Asking a question should not change the answer. More formally, methods should return a value only if they are referentially transparent and hence possess no side effects.</p>
</blockquote>
<p>也就是说，设计一个函数，它应该：</p>
<ul>
<li>要么进行操作（Mutable）；</li>
<li>要么进行返回（Immutable）；</li>
<li>但，以上两点不能同时进行。</li>
</ul>
<p>这里的“返回”，我的理解不是所有类型的返回，而是特指与原始值相对应的返回。</p>
<p>比如说，在 JavaScript 世界中 <code>array.slice</code> 是一个 Immutable 类型的函数，它不会对输入值进行改变，而是返回一份 copy：</p>
<blockquote>
<p>The <code>slice()</code> method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included). The original array will not be modified.</p>
</blockquote>
<p>但 <code>array.splice</code> 则不同（它虽然也有返回值，但跟输入值并不是对应的关系了）：</p>
<blockquote>
<p>The <code>splice()</code> method changes the contents of an array by removing existing elements and&#x2F;or adding new elements. Return value: An array containing the deleted elements.</p>
</blockquote>
<p>同理还有 <code>array.push</code> &#x2F; <code>array.pop</code> 等。</p>
<p><strong>而 Moment.js 是如何设计的呢？</strong></p>
<p>这里有一个 issue，通过它，基本可以看出来 Moment 有哪些 API 是有问题的：<a href="https://github.com/moment/moment/issues/1754">make moment mostly immutable #1754</a></p>
<p>比如一个简单的 <code>add</code> 方法，对日期进行“加”操作（比如日期加一天）。那么它应该是这样的：</p>
<ul>
<li>要么直接对输入进行“加”操作；</li>
<li>要么产生一份复制值，对复制进行“加”操作并返回。</li>
</ul>
<p>但是，Moment 真正的做法是，直接对输入进行“加”操作，并且返回。这样就很让人头疼了。</p>
<p>更过分的就是上图的例子，名如 <code>startOf</code> &#x2F; <code>endOf</code> 这样的方法，看起来像是 Immutable 操作，实际上却还是 Mutable 的。所以说，如果用户使用了 Moment，那么所有的原始输入值基本上都是无法得到任何保证。你根本不知道输入值在什么时候就被修改了。</p>
<p>值得欣慰的是，在 Moment 发展了三年以后的 2014 年，终于有人提出了上述问题，并且被维护者认可并加入版本计划中了。但是，三年之后又三年，如今已经到了 2018，问题依旧没有得到解决。在 ES 发展如此迅速的时代，一个基本上处于垄断地位的流行库，以及一个三年都没能解决的问题，不知道是否还有救？</p>
<p>不过也许它已经完成曲线救国了（推倒重来总是比较简单）：<a href="https://github.com/moment/luxon">https://github.com/moment/luxon</a></p>
<blockquote>
<p>Features: Immutable, chainable, unambiguous API.</p>
</blockquote>
<p>不可否认 Moment.js 确实帮助开发者解决了很多问题，节省了大量时间。但是有一个问题：一个质量如此的库，是如何做到流行，如何拿到 3w 个 stars 的呢？是不是包括我在内的这些开发者，从根本上就存在软件开发基础知识的不足呢。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>令牌软件使用体验</title>
    <url>/2016/token-apps-usage-experiences/</url>
    <content><![CDATA[<p>所谓令牌，就是说，一个账号在登录的时候，除了要提供常规密码外，还要提供一组动态密码。而动态密码的来源，可以是实体设备，也可以是软件。</p>
<p>这里就说两个手机 APP：Steam 令牌与网易将军令。</p>
<p>APP 的功能很简单：在用户需要登录的时候提供动态密码。</p>
<ul>
<li>Steam 令牌会在用户需要的时候主动推送动态密码到通知；</li>
<li>而网易将军令需要用户手动打开软件查看动态密码。</li>
</ul>
<p>哪一种设计更好呢？</p>
<span id="more"></span>

<p>我在用的时候就觉得，为什么将军令这么笨，不懂得直接把密码推送给我呢？每次要自己去打开烦不烦。</p>
<p>网易招回去的研究生、博士们，真的就想不到这一点吗？</p>
<p>后来仔细想了想，这里面大概还是有原因的！</p>
<p>除了是否要主动打开 APP 以外，手机软件还有一个隐藏区别：用户是否已解锁。显然，使用推送方式谁都能看到敏感的动态密码，而打开 APP 则必须要有用户手机已解锁的前提。</p>
<p>这样一来，万一用户的账号在使用令牌的情况下被盗，责任划分可就不一样了。Steam 不好说，可能要扯皮，反正网易将军令肯定是 100% 免责：用户不设手机密码，手机密码被盗或破解，越狱，ROOT 等情况或行为，均与网易无关。</p>
<p>（不过这些可能在服务条款里声明也没什么事，毕竟银行提供的还是实体设备，其安全与否就只能看用户是否持有设备。难道网易是真的没考虑过主动推送？）</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>Travis CI in GitHub</title>
    <url>/2017/travis-ci-in-github/</url>
    <content><![CDATA[<p>Travis CI 是一款免费的持续集成工具，可以与 Github 无缝集成。能够自动完成项目代码的日常测试、编译、部署等工作。现在，我把它应用到了我的两个项目中。</p>
<p>首先，要在这个平台上做持续集成的前提是到它上面 <a href="https://travis-ci.org/">https://travis-ci.org/</a> 去注册个账号。实际上直接用 Github 账号进行 OAuth 登录就行了。登录以后可以在首页找到自己的所有仓库，在需要进行持续集成的项目前面的开关打开即可。开启后，Travis CI 会监听项目的代码推送与 PR，当发生改变时会立刻进行相应操作。</p>
<p>至于具体操作内容，由项目根目录的 <code>.travis.yml</code> 文件决定。这个文件的简单用法由下面两个具体例子来说明。</p>
<span id="more"></span>

<h2 id="wxsms-github-io"><a href="#wxsms-github-io" class="headerlink" title="wxsms.github.io"></a>wxsms.github.io</h2><p>该项目就是这个博客了。因为它是静态博客，所以代码上线前都要进行一次打包过程，在之前这个工作是手动完成的，主要的流程如下：</p>
<ol>
<li>在 <code>src</code> 分支上进行代码编辑，</li>
<li>在 <code>src</code> 分支上 push</li>
<li>在 <code>src</code> 分支上运行 <code>npm run post</code> 与 <code>npm run build</code> 分别生成文章与博客代码</li>
<li>切换到 <code>master</code> 分支，将上一步打包编译出来的东西覆盖到相应目录下</li>
<li>在 <code>master</code> 分支上 push</li>
<li>切换回 <code>src</code> 分支</li>
</ol>
<p>这些步骤看似简单却又容易出错，每次想要刷博客都必须做这么多事情，烦不胜烦。而且，Github 仓库会因为充斥了无意义的 <code>master</code> 历史记录而变得臃肿与难看。</p>
<p>现在有了 Travis CI，一切都将变得简单。</p>
<p><code>.travis.yml</code> 文件内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;node&quot;</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">post</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">dist-config</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">    <span class="attr">skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">github_token:</span> <span class="string">$GITHUB_TOKEN</span></span><br><span class="line">    <span class="attr">local_dir:</span> <span class="string">dist</span></span><br><span class="line">    <span class="attr">target_branch:</span> <span class="string">master</span></span><br><span class="line">    <span class="attr">on:</span></span><br><span class="line">      <span class="attr">branch:</span> <span class="string">src</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li><code>language</code> 指项目代码的语言，这里使用 <code>node_js</code></li>
<li><code>cache</code> 是 Travis CI 会缓存的内容，比如一些依赖文件无需每次都完全安装。这里缓存了 <code>npm_modules</code> 这个目录</li>
<li><code>node_js</code> 这里指定 node 的版本，<code>node</code> 的意思是使用最新版</li>
<li><code>script</code> 则是 Travis CI 具体会去完成的工作，是有顺序关系的，如果没有指定，则默认是 <code>npm run test</code>，这里依次执行了 3 个脚本：<ul>
<li><code>npm run post</code> 打包文章</li>
<li><code>npm run build</code> 打包代码</li>
<li><code>npm run dist-config</code> 生成配置文件以及 Readme 等。前两步显而易见，至于第三步，因为 Travis 部署会是一个 force push 的过程，会删除原有分支上的所有内容，因此需要手动生成 Github 的 README.md 文件以及 Github Page 的 CNAME 文件。</li>
</ul>
</li>
<li><code>deploy</code> 则是项目在所有脚本执行完成后会进行的部署操作，部署只会在脚本全部执行成功（返回 0）后进行<ul>
<li>这里使用 <code>page</code> 即 Github Page 方式部署。</li>
<li><code>skip_cleanup</code> 这个参数用来防止 Travis 删除脚本生成的文件（删掉了就没意义了）</li>
<li><code>github_token</code> 是我们 Github 账号的 Access Token，因为私密原因不能写在代码文件里，因此可以在此写一个变量 <code>$GITHUB_TOKEN</code>，然后在 Travis 相应的仓库设置中添加 <code>GITHUB_TOKEN</code> 环境变量，Travis 会在运行时自动替换</li>
<li><code>local_dir</code> 是指需要部署的打包出来的目录，设置为 <code>dist</code> 目录</li>
<li><code>target_branch</code> 即目标分支，Travis 会将为 <code>dist</code> 目录整个部署到 <code>master</code> 分支上去</li>
<li><code>on</code> 则是附加条件。这里的含义应该是只监听 <code>src</code> 分支上的更改</li>
</ul>
</li>
</ul>
<p>因此，Travis 可以帮我完成以下工作</p>
<ul>
<li>监听 <code>src</code> 分支上的改动</li>
<li>出现改动时，自动执行所有 build 步骤</li>
<li>如果 build 成功则将相应文件部署到 <code>master</code> 分支上去</li>
</ul>
<p>如此一来，我自己需要做的事情就只剩下简单的两步了：</p>
<ol>
<li>在 <code>src</code> 分支上进行代码编辑</li>
<li>在 <code>src</code> 分支上 push</li>
</ol>
<p>在我无需关注发布过程的同时，Travis 还能帮我保持整个代码仓库的整洁（<code>master</code> 分支始终进行的都是 force push，不存在无用的历史记录），简直完美！</p>
<h2 id="uiv"><a href="#uiv" class="headerlink" title="uiv"></a>uiv</h2><p>这个项目其实也差不多，有些许变化：</p>
<ul>
<li>脚本变为：<ul>
<li><code>npm run test</code> 执行测试</li>
<li><code>npm run build</code> 打包代码</li>
<li><code>npm run build-docs</code> 打包文档</li>
</ul>
</li>
<li>需要将代码部署到 npm，而文档部署到 Github Page</li>
<li>代码与文档都只在版本发布时（Tagged）才进行部署</li>
</ul>
<p><code>.travis.yml</code> 文件内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;node&quot;</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build-docs</span></span><br><span class="line"><span class="attr">after_success:</span> <span class="string">&#x27;npm run coveralls&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">provider:</span> <span class="string">npm</span></span><br><span class="line">    <span class="attr">skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">&quot;address@email.com&quot;</span></span><br><span class="line">    <span class="attr">api_key:</span> <span class="string">$NPM_TOKEN</span></span><br><span class="line">    <span class="attr">on:</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">    <span class="attr">skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">github_token:</span> <span class="string">$GITHUB_TOKEN</span></span><br><span class="line">    <span class="attr">local_dir:</span> <span class="string">docs</span></span><br><span class="line">    <span class="attr">on:</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>这个配置文件多了一些内容：</p>
<ul>
<li><code>after_success: &#39;npm run coveralls&#39;</code> 这个是在所有脚本成功以后执行的，目的是与 Coveralls 集成来在项目仓库上添加测试覆盖率的集成，这个在后面说</li>
<li><code>deploy</code> 中增加了 <code>npm</code> 一项，配置内容跟 <code>pages</code> 基本一致，其中不同的：<ul>
<li><code>email</code> 是用来发布的 npm 账户邮箱名</li>
<li><code>api_key</code> 是用来发布的 npm 账户 token，可以在本地 <code>~/.npmrc</code> 文件中找到（前提是本地电脑的 npm 已登录）</li>
<li><code>on</code> -&gt; <code>tags: true</code> 这个标志是说只在带有标签的 Commit 推送时才进行 deploy</li>
</ul>
</li>
<li>Github Page 的部署配置中也加入了 <code>on</code> -&gt; <code>tags: true</code>，起的是一样的作用。这里的 Github Page 是从 master 分支的 docs 文件夹 deploy 到 gh-pages 分支（gh-pages 是 Github Page 的默认分支，所以不用配置 <code>target_branch</code> 项）</li>
</ul>
<p>这样一来，Travis 就可以：</p>
<ul>
<li>在日常 push 的时候执行 test and build 脚本，但不发布</li>
<li>在版本 push 的时候执行 test and build 脚本，全部成功则将内容分别发布到 NPM 与 Github Pages</li>
</ul>
<p>完美！</p>
<h2 id="关于-Coveralls"><a href="#关于-Coveralls" class="headerlink" title="关于 Coveralls"></a>关于 Coveralls</h2><p>Coveralls <a href="https://coveralls.io/">https://coveralls.io/</a> 是一个将代码测试覆盖率集成到 Github 的工具，在 Travis 的加持下，算是锦上添花的一项。同样，到相应网站注册账号是第一步。</p>
<p>由于 vue-cli 生成的项目默认已经附带了代码测试覆盖率的检测，我要做的只是把这个结果上传而已。</p>
<p>步骤：</p>
<ol>
<li><code>npm install coveralls --save-dev</code></li>
<li>将 <code>&quot;coveralls&quot;: &quot;cat test/unit/coverage/lcov.info | ./node_modules/.bin/coveralls&quot;</code> 添加到 npm scripts 中。注意：cat 的路径是随项目不同而改变的</li>
<li>在 <code>.travis.yml</code> 中添加 <code>after_success: &#39;npm run coveralls&#39;</code> 配置项</li>
</ol>
<p>它可以：</p>
<ol>
<li>在测试完成后生成覆盖率文件（这一步 vue-cli 已经做了）</li>
<li>将文件内容传给 <code>coveralls</code>，这个模块可以将结果从 Travis 上传到 Coveralls 平台</li>
<li>Github 上会 by commit 地显示测试率是增加还是降低了</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>持续集成的好处无需多言，反正 Travis 就是一个免费的、能与 Github 集成的持续集成工具（实际上其它开源平台也可以，以及可以付费为私有项目提供服务）。简单、易用。</p>
<p>这些配置看似简单，却花费了我大量时间去摸索。由于只能通过不断推送 commit 的方式来触发 build 并验证配置的正确性，其过程异常繁琐，但是现在看来是十分值得的！</p>
<p>BTW：测试用的 commit 事后可以用本地 reset 与 force push 干掉。</p>
]]></content>
      <tags>
        <tag>github</tag>
        <tag>devops</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Vue 2 与 Bootstrap 3 的组件库 uiv 发布啦</title>
    <url>/2017/uiv-release/</url>
    <content><![CDATA[<p>一点微小的工作。</p>
<p>Demo: <a href="https://uiv.wxsm.space/">https://uiv.wxsm.space</a></p>
<p>Github: <a href="https://github.com/wxsms/uiv">https://github.com/wxsms/uiv</a></p>
<p>NPM: <a href="https://www.npmjs.com/package/uiv">https://www.npmjs.com/package/uiv</a></p>
<p>项目使用 MIT 许可，随便用。</p>
<span id="more"></span>

<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>做这个东西的初衷是，想要一些简单的、基础的、常用的基于 Vue 2 与 Bootstrap 3 的可重用组件。因为我还有一个目标：一个灵活健壮的、类似 MEAN.js 这样的 Vue + Node.js + MongoDB 的 Seed 项目。没有一个简单的组件库，项目无法进行。</p>
<p>其实现在社区有很多开源作品了，但是简单来说，就是觉得不是很满意，怎么说呢：</p>
<ul>
<li>VueStrap 这个作品虽然出现的比较早也比较全，然而貌似止步在 Vue 1 了，更新比较慢，不客气地说，里面很多组件其实是不好用的。只要稍稍对比下 Angular UI Bootstrap 就能发现差距，有些东西从设计上就有问题。</li>
<li>Bootstrap-Vue 这个作品是基于 Bootstrap 4 的，不知道为什么，就是不太喜欢。</li>
<li>Material Design 的作品有两三个，但实际使用上，感觉还是 Bootstrap 的应用场景更多，也更轻量。</li>
<li>至于 ElementUI，做得非常好非常全，然而是自立门户做的，跟 Bootstrap 与 Material 都没有关联。</li>
</ul>
<p>我想要的是：</p>
<ul>
<li>能够完全使用到 Bootstrap CSS</li>
<li>很多方面只要像 Angular UI Bootstrap 靠齐就行，毕竟经过了 Angular 1 时代的考验，事实证明它是最好用的</li>
<li>最小的体积</li>
<li>纯净的依赖，没有除了 Vue 与 Bootstrap CSS 以外的东西</li>
<li>主流浏览器支持</li>
</ul>
<p>好吧，说白了就是想自己做。跟前辈们做的东西好与不好无关。反正开源作品，人畜无害。</p>
<p>做着做着，于是就有了这个东西。感谢静纯的参与，帮我完成了一部分工作。</p>
<h2 id="项目现状"><a href="#项目现状" class="headerlink" title="项目现状"></a>项目现状</h2><p>目前已完成的组件有：</p>
<ul>
<li>Alert （警告）</li>
<li>Carousel （轮播）</li>
<li>Collapse （收缩与展开）</li>
<li>Date Picker （日期选择）</li>
<li>Dropdown （下拉）</li>
<li>Modal （模态框）</li>
<li>Pagination （分页）</li>
<li>Popover （弹出框）</li>
<li>Tabs （标签页）</li>
<li>Time Picker （时间选择）</li>
<li>Tooltip （提示）</li>
<li>Typeahead （自动补全）</li>
</ul>
<p>共 12 个。</p>
<p>依赖只有 Vue 2 与 Bootstrap 3，最终打包压缩 + Gzip 后体积约 9 KB，应该算是比较轻比较小的啦。</p>
<p>所有组件在主流浏览器（Chrome &#x2F; Firefox &#x2F; Safari）与 IE 9 &#x2F; 10 &#x2F; 11 下都经过了测试，暂时没有发现问题。当然，由于 IE 9 不支持 Transition 属性，因此是没有动画效果的，不过功能正常，不影响使用流程。</p>
<p>当然，除了以上的浏览器环境测试以外，还进行了完善的单元测试，组件代码测试覆盖率达到 99%（Github 与项目主页上的测试率标签显示为 97%，因为其中包括了文档源码，与实际组件无关）。可以保证在大多数情况下正常工作。</p>
<h2 id="Road-Map"><a href="#Road-Map" class="headerlink" title="Road Map"></a>Road Map</h2><p>接下来要做的事：</p>
<ul>
<li>把自动化的 E2E 测试搞起来，目前项目使用的自动测试只有单元测试，无法自动测试不同的浏览器，这个很重要，保证项目在跨浏览器上的质量</li>
<li>收集一些意见与反馈，完善一下现有的东西</li>
<li>将 Date Picker 与 Time Picker 组合</li>
<li>Multi Select （多选组件）</li>
<li>等等等等……</li>
</ul>
<p>有问题请提 issue，一定尽快解决。同时也欢迎 PR</p>
<p>最后，欢迎使用。</p>
]]></content>
      <tags>
        <tag>vue</tag>
        <tag>bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>Unicode Substring</title>
    <url>/2018/unicode-substring/</url>
    <content><![CDATA[<p>最近遇到一个问题：在做字符串截取操作时，如果字符串中包含了 emoji 字符（一个表情占多个 unicode 字符），而碰巧又把它截断了，程序会出错。在 ReactNative App 下的具体表现就是崩溃。由于以前做的是网页比较多，基本没有输入表情字符的案例，而在手机上就不一样了，因此这个问题还是第一次发现。</p>
<p>比如说：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;😋Emoji😋&#x27;</span>.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">2</span>) <span class="comment">// 😋</span></span><br></pre></td></tr></table></figure>

<p>因此，如果对这个字符串做 <code>substring(0, 1)</code> 操作，就会截取到一个未知字符。</p>
<span id="more"></span>

<p>中间的探索过程就不谈了，Google 了一下解决方案，以及咨询同事们以后，发现最简单的办法是通过 <code>lodash</code> 自带的 <code>toArray</code> 方法，先将它转为数组，然后将整个逻辑改为数据的截取操作，最后再转回字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">safeSubStr</span> (str, start, end) &#123;</span><br><span class="line">  <span class="keyword">const</span> charArr = _.<span class="title function_">toArray</span>(str);</span><br><span class="line">  <span class="keyword">return</span> _.<span class="title function_">slice</span>(charArr, start, end).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际上解决问题的是 <code>_.toArray</code>，它帮我们把表情字符正确地截了出来：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">_.<span class="title function_">toArray</span>(<span class="string">&#x27;😋Emoji😋&#x27;</span>) <span class="comment">// [&quot;😋&quot;, &quot;E&quot;, &quot;m&quot;, &quot;o&quot;, &quot;j&quot;, &quot;i&quot;, &quot;😋&quot;]</span></span><br></pre></td></tr></table></figure>

<p>其实我也比较好奇它是怎么做的，通过观察源码，发现了真正的解决方案：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lodash/_unicodeToArray.js</span></span><br><span class="line"><span class="comment">/** Used to compose unicode character classes. */</span></span><br><span class="line"><span class="keyword">var</span> rsAstralRange = <span class="string">&#x27;\\ud800-\\udfff&#x27;</span>,</span><br><span class="line">    rsComboMarksRange = <span class="string">&#x27;\\u0300-\\u036f&#x27;</span>,</span><br><span class="line">    reComboHalfMarksRange = <span class="string">&#x27;\\ufe20-\\ufe2f&#x27;</span>,</span><br><span class="line">    rsComboSymbolsRange = <span class="string">&#x27;\\u20d0-\\u20ff&#x27;</span>,</span><br><span class="line">    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,</span><br><span class="line">    rsVarRange = <span class="string">&#x27;\\ufe0e\\ufe0f&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Used to compose unicode capture groups. */</span></span><br><span class="line"><span class="keyword">var</span> rsAstral = <span class="string">&#x27;[&#x27;</span> + rsAstralRange + <span class="string">&#x27;]&#x27;</span>,</span><br><span class="line">    rsCombo = <span class="string">&#x27;[&#x27;</span> + rsComboRange + <span class="string">&#x27;]&#x27;</span>,</span><br><span class="line">    rsFitz = <span class="string">&#x27;\\ud83c[\\udffb-\\udfff]&#x27;</span>,</span><br><span class="line">    rsModifier = <span class="string">&#x27;(?:&#x27;</span> + rsCombo + <span class="string">&#x27;|&#x27;</span> + rsFitz + <span class="string">&#x27;)&#x27;</span>,</span><br><span class="line">    rsNonAstral = <span class="string">&#x27;[^&#x27;</span> + rsAstralRange + <span class="string">&#x27;]&#x27;</span>,</span><br><span class="line">    rsRegional = <span class="string">&#x27;(?:\\ud83c[\\udde6-\\uddff])&#123;2&#125;&#x27;</span>,</span><br><span class="line">    rsSurrPair = <span class="string">&#x27;[\\ud800-\\udbff][\\udc00-\\udfff]&#x27;</span>,</span><br><span class="line">    rsZWJ = <span class="string">&#x27;\\u200d&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Used to compose unicode regexes. */</span></span><br><span class="line"><span class="keyword">var</span> reOptMod = rsModifier + <span class="string">&#x27;?&#x27;</span>,</span><br><span class="line">    rsOptVar = <span class="string">&#x27;[&#x27;</span> + rsVarRange + <span class="string">&#x27;]?&#x27;</span>,</span><br><span class="line">    rsOptJoin = <span class="string">&#x27;(?:&#x27;</span> + rsZWJ + <span class="string">&#x27;(?:&#x27;</span> + [rsNonAstral, rsRegional, rsSurrPair].<span class="title function_">join</span>(<span class="string">&#x27;|&#x27;</span>) + <span class="string">&#x27;)&#x27;</span> + rsOptVar + reOptMod + <span class="string">&#x27;)*&#x27;</span>,</span><br><span class="line">    rsSeq = rsOptVar + reOptMod + rsOptJoin,</span><br><span class="line">    rsSymbol = <span class="string">&#x27;(?:&#x27;</span> + [rsNonAstral + rsCombo + <span class="string">&#x27;?&#x27;</span>, rsCombo, rsRegional, rsSurrPair, rsAstral].<span class="title function_">join</span>(<span class="string">&#x27;|&#x27;</span>) + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */</span></span><br><span class="line"><span class="keyword">var</span> reUnicode = <span class="title class_">RegExp</span>(rsFitz + <span class="string">&#x27;(?=&#x27;</span> + rsFitz + <span class="string">&#x27;)|&#x27;</span> + rsSymbol + rsSeq, <span class="string">&#x27;g&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Converts a Unicode `string` to an array.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@private</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; string The string to convert.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Array</span>&#125; Returns the converted array.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unicodeToArray</span>(<span class="params">string</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> string.<span class="title function_">match</span>(reUnicode) || [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = unicodeToArray;</span><br></pre></td></tr></table></figure>

<p>一大堆正则就不谈了，也不知道它是从哪里找来的这些值，最后组装了一个 <code>reUnicode</code> 正则来实现 unicode 转数组。话又说回来，这么做会不会有性能问题呢？我表示比较担忧。好在项目里面需要这么做的场景不多，字符串也不长，可以如此暴力解决。如果换个场景，还真不好说。也许又需要一种更高效的解决方案了。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序单元测试最佳实践</title>
    <url>/2021/unit-test-best-practice-of-mini-program/</url>
    <content><![CDATA[<p>微信小程序单元测试的可查资料少得可怜，由于微信官方开发的自动化测试驱动器 <a href="https://www.npmjs.com/package/miniprogram-automator">miniprogram-automator</a> 不开源，唯一靠谱的地方只有这 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/auto/">一份简单的文档</a>。然而实际使用下来发现文档介绍的方式有不少问题。</p>
<span id="more"></span>

<h2 id="关于单元测试如何启动的问题"><a href="#关于单元测试如何启动的问题" class="headerlink" title="关于单元测试如何启动的问题"></a>关于单元测试如何启动的问题</h2><h3 id="官方推荐的方式"><a href="#官方推荐的方式" class="headerlink" title="官方推荐的方式"></a>官方推荐的方式</h3><p>官方推荐通过 <a href="https://jestjs.io/">Jest</a> 来组织单元测试，这点我是认可的。文档上面标注的步骤是：</p>
<ol>
<li>启动并连接工具</li>
<li>重新启动小程序到首页</li>
<li>断开连接并关闭工具</li>
</ol>
<p>代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> automator = <span class="built_in">require</span>(<span class="string">&#x27;miniprogram-automator&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;index&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> miniProgram</span><br><span class="line">  <span class="keyword">let</span> page</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeAll</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    miniProgram = <span class="keyword">await</span> automator.<span class="title function_">launch</span>(&#123;</span><br><span class="line">      <span class="attr">projectPath</span>: <span class="string">&#x27;path/to/miniprogram-demo&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    page = <span class="keyword">await</span> miniProgram.<span class="title function_">reLaunch</span>(<span class="string">&#x27;/page/component/index&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">waitFor</span>(<span class="number">500</span>)</span><br><span class="line">  &#125;, <span class="number">30000</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">afterAll</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> miniProgram.<span class="title function_">close</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>乍一看没什么特别的问题，然而实际上跑了几次以后发现，它存在一个巨大的缺陷：<strong>就是 <code>automator.launch</code> 这一操作相当耗时，启动一次至少要 30 秒</strong>。</p>
<p>举例：</p>
<ol>
<li>项目定义了 10 套单元测试，每套测试都得重新走 <code>launch</code> 与 <code>close</code> 流程；</li>
<li>使用 <code>watch</code> 方式启动 Jest，每次触发执行都要重新走 <code>launch</code> 与 <code>close</code> 流程；</li>
<li>等等……</li>
</ol>
<p>以上场景都将带来巨大的时间损耗，完全无法容忍。</p>
<p>因此，如何缩短这里的耗时将是重中之重。</p>
<h3 id="Jest-全局共享连接实例？"><a href="#Jest-全局共享连接实例？" class="headerlink" title="Jest 全局共享连接实例？"></a>Jest 全局共享连接实例？</h3><p>既然每个单元测试都要用到连接实例 <code>miniProgram</code>，那么大家共享同一个实例自然是我能想到的第一个办法。</p>
<h4 id="globalSetup-globalTeardown"><a href="#globalSetup-globalTeardown" class="headerlink" title="globalSetup &#x2F; globalTeardown"></a>globalSetup &#x2F; globalTeardown</h4><p>第一个办法是通过 <a href="https://jestjs.io/docs/configuration#globalsetup-string">globalSetup</a> 与 <a href="https://jestjs.io/docs/configuration#globalteardown-string">globalTeardown</a> 参数，为单元测试提供一个全局 setup 函数，并且它支持 async，看起来非常完美。</p>
<p>但是，在尝试过后发现并不起作用，在 setup 过程中挂载到 global 的属性无法从单元测试中读取，后来查阅文档才发现这个 setup 函数有一个致命的缺陷：</p>
<blockquote>
<p>Note: Any global variables that are defined through globalSetup can only be read in globalTeardown. You cannot retrieve globals defined here in your test suites.</p>
</blockquote>
<p>原来，单元测试是运行在「沙盒」环境下的，彼此隔离，因此它们无法读取到来自外部的 global 变量。</p>
<p>在 <a href="https://github.com/facebook/jest/issues/7184">facebook&#x2F;jest&#x2F;issues&#x2F;7184</a> 中，有人提到可以在 setup 函数中用 <code>process.env.FOO = &#39;bar&#39;</code> 这种方式来达成目的。经测试确实可以，但是问题在于：</p>
<ol>
<li>process 下面只能挂载基础类型，不能挂载对象实例；</li>
<li>实际上「它能工作」本身是一个 Bug，在 issue 内有人提到，它可能会在任意时间被修复。</li>
</ol>
<p>因此，这个方案不可行。</p>
<h4 id="setupFiles"><a href="#setupFiles" class="headerlink" title="setupFiles"></a>setupFiles</h4><p>第二个办法是使用 <a href="https://jestjs.io/docs/configuration#setupfiles-array">setupFiles</a> 参数。</p>
<p>该方式支持 global 挂载，但是很遗憾，我不用尝试也知道，<code>setupFiles</code> 目前仅支持同步执行，无法满足需求。</p>
<p>见：<a href="https://github.com/facebook/jest/issues/11038">facebook&#x2F;jest&#x2F;issues&#x2F;11038</a></p>
<h4 id="testEnvironment"><a href="#testEnvironment" class="headerlink" title="testEnvironment"></a>testEnvironment</h4><p>找到的第三个办法是使用 <a href="https://jestjs.io/docs/configuration#testenvironment-string">testEnvironment</a> 参数。</p>
<p>该方式支持：</p>
<ol>
<li>global 挂载</li>
<li>异步执行</li>
</ol>
<p>但是，依旧很遗憾，经过查阅文档发现，<code>testEnvironment</code> 并不是作用全局的，也就是说，它在每个单元测试执行时都会走一遍创建、销毁流程，跟最初的方式并没有本质区别。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>由于 Jest 本身的设计问题，全局共享连接实例这个方案基本（至少目前）不可行。</p>
<h3 id="将单元测试挪到一个文件下？"><a href="#将单元测试挪到一个文件下？" class="headerlink" title="将单元测试挪到一个文件下？"></a>将单元测试挪到一个文件下？</h3><p>既然跨单元测试的变量共享不可行，那么第二个方向就是：将所有单元测试集合起来，共享一套环境。这样一来，大家自然就可以共享一个连接了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    // 注：指定了只执行 ./tests 下的测试</span><br><span class="line">    &quot;test&quot;: &quot;node node_modules/jest-cli/bin/jest.js ./tests --runInBand --verbose&quot;,</span><br><span class="line">    &quot;test:watch&quot;: &quot;npm run test -- --watchAll=true&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.spec.js</span></span><br><span class="line"><span class="keyword">const</span> automator = <span class="built_in">require</span>(<span class="string">&#x27;miniprogram-automator&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mp</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> launchOptions = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">beforeAll</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  mp = <span class="keyword">await</span> automator.<span class="title function_">launch</span>(&#123; ...launchOptions &#125;)</span><br><span class="line">  <span class="variable language_">global</span>.<span class="property">mp</span> = mp</span><br><span class="line">&#125;, <span class="number">60000</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">afterAll</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> mp.<span class="title function_">disconnect</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;path/to/test1&#x27;</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;path/to/test2&#x27;</span>)</span><br><span class="line"><span class="comment">// more...</span></span><br></pre></td></tr></table></figure>

<p>这样一来，各单元测试可以通过 <code>global.mp</code> 得到连接实例。实测也确实可行，仅需要启动一次就可以跑完所有单元测试。</p>
<p>但是，这种实现方式存在一些问题：</p>
<ol>
<li>所有单元测试被归总到了一个 test suit 内，测试结果的打印慢了许多，需要等到所有测试跑完才能看到结果；</li>
<li>同理，无法利用好 Jest 的 watch 功能，无法做到开发时仅执行某个 test suit</li>
<li>添加或删除了测试，需要手动更改 require 列表，相当麻烦</li>
<li>该方式并未解决 watch 触发需要重启连接实例的问题，依旧相当耗时</li>
</ol>
<h3 id="Launch-or-Connect"><a href="#Launch-or-Connect" class="headerlink" title="Launch or Connect?"></a>Launch or Connect?</h3><p>由于官方文档给出的例子是使用 Launch 实现的，所以自然而然会从这方面入手寻找解决方案，但是走了这么多弯路以后还是不行，我开始考虑：是否可以绕过 Launch？</p>
<p>查看 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/auto/automator.html">文档</a> 以后发现，除了 <code>launch</code> 以外，<code>automator</code> 还提供了一个 <code>connect</code> 方法。</p>
<blockquote>
<p><strong>automator.connect</strong></p>
<p>连接开发者工具。</p>
<p><code>automator.connect(options: Object): Promise&lt;MiniProgram&gt;</code></p>
</blockquote>
<p>因此，我想到了一个办法：如果不通过 <code>launch</code>，直接 <code>connect</code> 至现有窗口，应该会快很多吧。</p>
<p>但是尝试后发现，即使在开发者工具中打开了服务端口，<code>connect</code> 也无法连接上，始终报错「端口未打开」。 后来通过搜索才发现，此「端口」非彼「端口」，如果要用过 websocket 连接，开发者工具就必须以 cli 方式加 <code>--auto</code> 参数启动才行。</p>
<p>因此，我也想到了最终解决方案：</p>
<ol>
<li>先尝试 <code>connect</code>，如果成功则进入测试</li>
<li>如果失败，则执行 <code>launch</code>（该方式启动默认开启自动化）</li>
<li>测试结束时，不调用 <code>close</code>，而是调用 <code>disconnect</code></li>
</ol>
<p>这样一来，第一次单元测试启动时会启动开发者工具，测试完成以后，连接会断开，但是开发者工具不会关闭。等到第二次启动时，automator 就能直接连上，无需再次启动。</p>
<p>编写 setup 文件（该文件不以 spec 结尾，只作为 mixin 使用）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setup.js</span></span><br><span class="line"><span class="keyword">const</span> automator = <span class="built_in">require</span>(<span class="string">&#x27;miniprogram-automator&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mp</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> launchOptions = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">beforeAll</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    mp = <span class="keyword">await</span> automator.<span class="title function_">connect</span>(&#123;</span><br><span class="line">      <span class="attr">wsEndpoint</span>: <span class="string">&#x27;ws://localhost:9420&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      mp = <span class="keyword">await</span> automator.<span class="title function_">launch</span>(&#123; ...launchOptions &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">global</span>.<span class="property">mp</span> = mp</span><br><span class="line">&#125;, <span class="number">60000</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">afterAll</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> mp.<span class="title function_">disconnect</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在每个单元测试中引用 setup：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// some-test.spec.js</span></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;some-test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;path/to/setup&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> page = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如此一来，以上发现的所有问题都能很好地解决：</p>
<ol>
<li>单元测试极大地提速</li>
<li>test suit 按照正常方式组织，无需额外操作</li>
<li><code>watch</code> 模式也能正常使用，速度极快</li>
</ol>
<p>但是，该方式同样带来了一个问题：即 test suit 不再拥有独立运行环境，每个 suit 要注意清理自己带来的影响。</p>
<p>不过，权衡利弊来说，肯定是好处远远大于坏处。</p>
<h2 id="关于如何进行页面导航的问题"><a href="#关于如何进行页面导航的问题" class="headerlink" title="关于如何进行页面导航的问题"></a>关于如何进行页面导航的问题</h2><h3 id="通过实例方法导航"><a href="#通过实例方法导航" class="headerlink" title="通过实例方法导航"></a>通过实例方法导航</h3><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/auto/miniprogram.html">miniProgram</a> 实例提供了一系列的导航方法，如 <code>navigateTo</code>，<code>navigateBack</code> 等，经实践，能够正常使用。但是，它们有一个通病：<strong>耗时明显</strong>（又来了）。</p>
<p>经测试，在导航开始前记录时间，<code>await</code> 至导航结束，打印时间差，<strong>每次导航耗时大概在 3000 毫秒以上</strong>。具体表现为，页面虽然已跳转到位，但方法就是没有返回。由于驱动框架不开源，也并不知道在这段时间内它究竟做了什么。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 耗时在 3000ms 以上</span></span><br><span class="line">page = <span class="keyword">await</span> <span class="variable language_">global</span>.<span class="property">mp</span>.<span class="title function_">navigateTo</span>(<span class="string">&#x27;/pages/index/index&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>单元测试少的话可以容忍，但是一旦多起来了，也是非常浪费生命的。</p>
<h3 id="通过页面元素导航"><a href="#通过页面元素导航" class="headerlink" title="通过页面元素导航"></a>通过页面元素导航</h3><p>通过模拟页面内的导航元素点击来达到效果，这种方式耗时极短，500 毫秒内即可完成。虽然相比实例方法来说较为繁琐，但胜在量大的时候节省时间效果非常明显。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 耗时在 500ms 左右</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="keyword">await</span> page.$(<span class="string">&#x27;#some-nav-btn&#x27;</span>)</span><br><span class="line"><span class="keyword">await</span> btn.<span class="title function_">tap</span>()</span><br><span class="line"><span class="comment">// 实际上所有耗时几乎都发生在这里，等待导航动画结束</span></span><br><span class="line"><span class="keyword">await</span> page.<span class="title function_">waitFor</span>(<span class="number">500</span>)</span><br><span class="line">page = <span class="keyword">await</span> <span class="variable language_">global</span>.<span class="property">mp</span>.<span class="title function_">currentPage</span>()</span><br></pre></td></tr></table></figure>

<h2 id="关于如何与原生元素交互问题"><a href="#关于如何与原生元素交互问题" class="headerlink" title="关于如何与原生元素交互问题"></a>关于如何与原生元素交互问题</h2><p>由于驱动不支持选择原生元素，也不支持对其进行交互，因此唯一的办法是通过 mock 修改其定义。</p>
<p>举例，要模拟 <code>wx.showModal</code> 的 <code>确定</code> 点击：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="variable language_">global</span>.<span class="property">mp</span>.<span class="title function_">mockWxMethod</span>(<span class="string">&#x27;showModal&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">confirm</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">cancel</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如此一来，当 <code>showModal</code> 被调用时，会直接进入 <code>confirm</code> 流程。</p>
<p>当然，测试结束后要记得 restore:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="variable language_">global</span>.<span class="property">mp</span>.<span class="title function_">restoreWxMethod</span>(<span class="string">&#x27;showModal&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>miniprogram</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>无题</title>
    <url>/2016/untitled-2/</url>
    <content><![CDATA[<p>年廿七回家，到今天是第七天。这么快就已经过去了整整一周，马上又要回珠海上班了。</p>
<p>回家这么多天来，今天是第一次在家吃晚饭。一直都在亲戚朋友家过节，自己家冷冷清清的时间比较多。因为自己家里没有老人，只有我和爸妈一家三口，所以大概只能往外跑吧。我们很少在广东过年，只是今年可能是因为我的身体还不太好，妈妈也比较累，所以就不想回江西了。其实过节在哪里都无所谓啦，大家在一起开心就好。倒是不能去看看年事已高的奶奶觉得很忧伤。妈妈看起来又老了一些，是照顾我的那段时间太劳累了。</p>
<p>今年印象比较深的是，大家都喜欢在茶余饭后玩红包了。尤其是除夕晚上的时候，开着电视，但其实没多少时间去看，大家都忙着摇摇摇咻咻咻，完事以后继续关注下一轮的时刻，至于春晚什么的，谁管呢。当然老人还是在看。腾讯老大给的一块几毛就图个乐（一块几毛是说微信，至于QQ真是太小气了），但这里要吐槽一下支付宝，我一直以为它要么会大量放出稀有卡，要么会给集齐四张卡的同学一些安慰奖，结果也是呵呵，于是我毫不犹豫地就把除了家人以外的加起来的好友都删了。这游戏在春晚打了那么硬的广告，结果让全国99%的玩家都吃了个闭门羹，这么有种也是没谁了。老人一直在问为什么会有奇怪的声音，他们在年夜饭的过程中反而不太受到关注。</p>
<p>老人们有时候会问什么时候结婚的事，我都是回答说还早。两个人在一起的压力有时候真要比一个人要大得多，毕竟一个人生活不用考虑什么时候能买房，反正都是自己住。珠海的房价一天比一天高，然而刚工作半年的我也只能看着它高。</p>
<p>和小伙伴们谈起工作的时候，发现自己果然是最闲的。突然感觉没有赚加班费的机会也是一件挺忧伤的事。手术的伤依然是还没有好，总是觉得有这个问题在生活中处处都受到了限制。过两天又要回到那个以断网为常态并且每晚跳三四次闸的地方去住，再次回家又不知道是什么时候。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>无题</title>
    <url>/2016/untitled-3/</url>
    <content><![CDATA[<p>最近，工作地所在的园区推出了一款 App，宣传的主要功能是获取园区动态以及扫码付款，感觉这样吃饭可以方便一些，因此就下载了。</p>
<p>应用的名字叫“园圈”，在 App Store 上搜索出来，底下是一个没有见过的开发商。我觉得还算正常吧，一般这种小范围应用，不都是外包的吗。只是，这使我对于这个应用的使用埋下了一丝戒心。（后来我搜索了一下这家公司，网站充斥着强烈的国企风）</p>
<p>进入应用，首先要我注册，这很简单，手机号码验证码啪啪啪就输完了。然后，它要求我输入一个密码。我毫不犹豫地就输入了常用密码，在即将要点下一步的时候，却犹豫了一下。</p>
<span id="more"></span>

<p>我在想的是：</p>
<ol>
<li>它是一个不知名的小公司</li>
<li>它已经知道了我的手机号码</li>
<li>它即将要知道我的常用密码</li>
</ol>
<p>虽然我已经在不知道多少地方用过这个密码，但是这一次我就是不想在这用了。其它很多手机应用，提供了手机号码就会让用户直接登录，然而这个应用却强制要我再填一个密码。这对于它来说太简单了，获得一个用户的手机号以及常用密码，它可以用来做任何事情。并且，更可怕的是，没有人会关注它。</p>
<p>于是我清除输入并换了一组密码。</p>
<p>接下来，它要求我输入一个手势密码。</p>
<p>我从来没有用过手势密码，但它没有提供跳过选项，因此就画了个圈以示敬意。</p>
<p>但是，我想，如果是在其它地方用过手势密码的用户，这里应该是毫不犹豫的吧。虽然得到这个貌似用处并没有像手机号加密码那么明显，但是，不论怎么说，这家公司又获得了一项用户信息。</p>
<p>并且，这个以园区动态发布以及小额支付为主要（或者说唯二）功能的应用，有什么必要同时使用密码与手势密码呢？不得而知。</p>
<p>历尽千辛，终于来到了主界面，界面其实就是支付宝和咸鱼的结合体，没什么特别的。动态都是一些领导视察之类的文章，于是我就点开了“付款”功能。</p>
<p>首先，我要同意一个用户协议。</p>
<p>然后，输入六位数的支付密码。</p>
<p>至此，这是它要求我输入的第三个密码。并且是较为敏感的六位数密码。</p>
<p>这样就很不好了。</p>
<p>然而，不知道为什么，我当时还是如实填写了。</p>
<p>一切都填好以后，我终于可以仔细查看一下它的付款功能。很简单，支付宝或者微信充值，然后二维码扫码支付，却缺少了重要的一项：余额转出。</p>
<p>这真 TM 是一个忧伤的故事，说到底还是跟充饭卡没什么区别，只要你用不完，那么充进去的钱就算是捐了。</p>
<p>唯一的区别是，我向这家公司无偿提供了我的手机号码，以及密码，手势密码以及支付密码。</p>
<p>我突然觉得，这是一波实实在在的送温暖行动。</p>
<p>这让我想起几个月前在一家米粉店付款的时候，我选择使用支付宝，从店家的微信公众号直接跳转到了一个要求输入账号密码的，UI 跟支付宝一模一样的页面。几乎是本能反应的我点了“使用浏览器打开”，果然这不是一个 alipay 域名下的网站。</p>
<p>然而，如果用户不是一个程序员，或者不熟悉互联网的点点滴滴，他有多大几率能注意到并且发现诸如此类的事情呢？</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>无题</title>
    <url>/2013/untitled/</url>
    <content><![CDATA[<p>时间过得真快，转眼就大学三年级了，两年前作为新生的各种场景依然历历在目，像是昨天一样，当年的小软工如今已几乎是大师兄，不得不时时拷问自己两年来到底学到了什么，学到了多少，有什么资格。去年还没有什么感觉，如今比较强烈了。而且也开始想两年后我会在哪里。实在是前路茫茫啊。是工作呢，还是要去读研比较好呢。我个人还是倾向继续读书。唉，不知不觉就大龄青年了。真是岁月催。</p>
<p>大学读下来，从前很多选择也慢慢觉得如果再理性一点的话，或许会有变化。不过人还是脚踏实地的好，往事已去不再追。今年婆婆去世了，即使到现在还是很难接受的事实，不过我也知道时间带走一切，不知哪刻自己也将被带走，能做的只有珍惜。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>Upgrade Projects Built by vue-cli</title>
    <url>/2017/upgrade-projects-scaffolded-by-vue-cli/</url>
    <content><![CDATA[<p>使用 <a href="https://github.com/vuejs/vue-cli">vue-cli</a> 创建的脚手架项目，目前最大的问题是创建后无法自动地进行升级。虽然 3.0 版本已经计划将其作为头等大事来进行改善 (<a href="https://github.com/vuejs/vue-cli/issues/589">#589</a>)，但是现行的版本依然要面对它。以下基于 webpack template 来进行升级时的一些要点解析。</p>
<span id="more"></span>

<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>项目整体升级的一个重要目的体现在依赖的升级，如 webpack 从老版本 2 升级到 3，以及 babel &#x2F; eslint 等各种配套工具的升级（至于 Vue 反倒不是什么大问题）。</p>
<p>在对依赖进行升级的时候主要有两个参考：</p>
<ul>
<li>目前最新的脚手架 (<a href="https://github.com/vuejs-templates/webpack">vuejs-templates&#x2F;webpack</a>) 依赖版本</li>
<li><code>yarn outdated</code> (or npm) 给出的建议版本</li>
</ul>
<p>outed version 如果是 MINOR &#x2F; PATCH 更新，直接 upgrade 即可。如果是 MAJOR 更新则需要到相应项目主页上确认一下 breaking changes 是否对自己有影响。</p>
<p>以下列举一些主要的依赖。</p>
<h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><p>Webpack 2 -&gt; 3 其实是无痛升级的。也就是说基本不用更改什么配置。</p>
<h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h3><p>ESlint 及其相关库的升级也没什么需要特别注意的地方，因为它并不参与最终构建。只不过升级以后可能会有 lint failed cases （因为新版本一般会添加新的 rules），注意修复即可。</p>
<h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>Babel 相关的升级是最麻烦（也是最头疼）的一部分。其主要问题体现在：</p>
<ul>
<li>其直接参与代码构建，影响巨大，需要特别谨慎</li>
<li>Babel 作为一个重要工具有一定的学习成本</li>
<li>Babel 相关库变更较为频繁，典型的如 <code>babel-preset-latest</code> 库废弃并被 <code>babel-preset-env</code> 替代，而后者在最新的版本中又变成了 <code>@babel/preset-env</code>，甚至 <code>babel-core</code> 也废弃了，变成了 <code>@babel/core</code></li>
</ul>
<p>在经过了几次的迁移尝试后，建议<strong>目前</strong>的方案是：</p>
<ul>
<li>进行 MINOR 升级，如果还在使用 <code>babel-preset-latest</code> 可以将其替换为 <code>babel-preset-env</code>（注意两者的配置大致一样，但略有不同，需要仔细比对）</li>
<li>暂时不要将 babel 升级至 7.x-beta</li>
<li>暂时也不要使用 <code>@babel</code> 类型的依赖（实测中出现奇怪的报错，难以追踪、搜索）</li>
<li>等待 Vue.js 社区给出解决方案</li>
</ul>
<h3 id="AutoPrefixer"><a href="#AutoPrefixer" class="headerlink" title="AutoPrefixer"></a>AutoPrefixer</h3><p>将 <code>autoprefixer</code> 从 6.x 升级到 7.x 时，注意将 <code>package.json</code> 中的 <code>browserlist</code> 改成 <code>browserslist</code> （一个 s 的区别）</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>这里说的配置文件主要有两方面：Babel 以及 Webpack</p>
<h3 id="Babel-1"><a href="#Babel-1" class="headerlink" title="Babel"></a>Babel</h3><p>最简单的操作是，直接到 <a href="https://github.com/vuejs-templates/webpack">vuejs-templates&#x2F;webpack</a> 找到最新的 babel 文件，复制更新的内容下来即可。当然要注意自己已经更改过的内容不要被覆盖。</p>
<h3 id="Webpack-1"><a href="#Webpack-1" class="headerlink" title="Webpack"></a>Webpack</h3><p>Webpack 配置稍微麻烦一些，主要体现在 <code>webpack.base.conf.js</code> 以及 <code>webpack.prod.conf.js</code>，个人总结的升级步骤：</p>
<ol>
<li>先升级 Webpack 相关工具到最新版本</li>
<li>打开官方项目，对文件进行比对并更新相应内容（一般 <code>webpack.prod.conf.js</code> 会有较多内容更新，而且主要是 <code>plugins</code> 配置项）</li>
<li>如果遇到目前没有安装的依赖则安装之</li>
</ol>
<p>当然这只适用于 Webpack 2 -&gt; 3 的升级，至于 1 -&gt; 2 或者 1-&gt; 3 没试过，不好说。</p>
<p>做完以上操作，跑过所有 npm scripts 一切正常的话，项目脚手架升级就基本完成了。这个过程说难不难，但是如果对 Webpack &#x2F; Babel 不熟悉的话还是挺痛苦的，期待 vue-cli 3.0 可以带来更优秀的脚手架解决方案，达到类似 Nuxt.js 的效果，彻底解决升级烦恼。</p>
]]></content>
      <tags>
        <tag>vue</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Upgrade Webpack of Vue-Cli Projects from 3 to 4</title>
    <url>/2020/upgrade-webpack-of-vue-cli-projects-from-3-to-4/</url>
    <content><![CDATA[<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>Change webpack related devDependencies versions:</p>
<ol>
<li><code>webpack</code> to <code>^4</code></li>
<li><code>webpack-dev-server</code> to <code>^3</code></li>
<li>Add <code>webpack-cli</code></li>
<li>Replace <code>extract-text-webpack-plugin</code> with <code>mini-css-extract-plugin</code></li>
<li>Replace <code>uglifyjs-webpack-plugin</code> with <code>terser-webpack-plugin</code></li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;mini-css-extract-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terser-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-dev-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="webpack-base-conf-js"><a href="#webpack-base-conf-js" class="headerlink" title="webpack.base.conf.js"></a>webpack.base.conf.js</h2><p>Add <code>mode</code> option.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;production&#x27;</span> : <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../&#x27;</span>),</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="webpack-prod-conf-js"><a href="#webpack-prod-conf-js" class="headerlink" title="webpack.prod.conf.js"></a>webpack.prod.conf.js</h2><ol>
<li>Add <code>performance</code> and <code>optimization</code> option</li>
<li>Replace <code>ExtractTextPlugin</code> with <code>MiniCssExtractPlugin</code></li>
<li>Remove <code>UglifyJsPlugin</code> and all <code>webpack.optimize.CommonsChunkPlugin</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TerserPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;terser-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> webpackConfig = <span class="title function_">merge</span>(baseWebpackConfig, &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">performance</span>: &#123;</span><br><span class="line">    <span class="attr">hints</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">runtimeChunk</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;manifest&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">minimizer</span>: [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">TerserPlugin</span>(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">OptimizeCSSPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">cssProcessorOptions</span>: config.<span class="property">build</span>.<span class="property">productionSourceMap</span></span><br><span class="line">          ? &#123; <span class="attr">safe</span>: <span class="literal">true</span>, <span class="attr">map</span>: &#123; <span class="attr">inline</span>: <span class="literal">false</span> &#125; &#125;</span><br><span class="line">          : &#123; <span class="attr">safe</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&#x27;async&#x27;</span>,</span><br><span class="line">      <span class="attr">minSize</span>: <span class="number">30000</span>,</span><br><span class="line">      <span class="attr">minChunks</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">maxAsyncRequests</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">maxInitialRequests</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="attr">vendors</span>: &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line">          <span class="attr">chunks</span>: <span class="string">&#x27;initial&#x27;</span>,</span><br><span class="line">          <span class="attr">priority</span>: -<span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// new UglifyJsPlugin(&#123;</span></span><br><span class="line">    <span class="comment">//   uglifyOptions: &#123;</span></span><br><span class="line">    <span class="comment">//     compress: &#123;</span></span><br><span class="line">    <span class="comment">//       warnings: false</span></span><br><span class="line">    <span class="comment">//       &#125;</span></span><br><span class="line">    <span class="comment">//     &#125;,</span></span><br><span class="line">    <span class="comment">//    sourceMap: config.build.productionSourceMap,</span></span><br><span class="line">    <span class="comment">//    parallel: true</span></span><br><span class="line">    <span class="comment">//  &#125;),</span></span><br><span class="line">    <span class="comment">// new ExtractTextPlugin(&#123;</span></span><br><span class="line">    <span class="comment">//   filename: utils.assetsPath(&#x27;css/[name].[contenthash].css&#x27;),</span></span><br><span class="line">    <span class="comment">//   // Setting the following option to `false` will not extract CSS from codesplit chunks.</span></span><br><span class="line">    <span class="comment">//   // Their CSS will instead be inserted dynamically with style-loader when the codesplit chunk has been loaded by webpack.</span></span><br><span class="line">    <span class="comment">//   // It&#x27;s currently set to `true` because we are seeing that sourcemaps are included in the codesplit bundle as well when it&#x27;s `false`,</span></span><br><span class="line">    <span class="comment">//   // increasing file size: https://github.com/vuejs-templates/webpack/issues/1110</span></span><br><span class="line">    <span class="comment">//   allChunks: true,</span></span><br><span class="line">    <span class="comment">// &#125;),</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">filename</span>: utils.<span class="title function_">assetsPath</span>(<span class="string">&#x27;css/[name].css&#x27;</span>),</span><br><span class="line">      <span class="attr">chunkFilename</span>: utils.<span class="title function_">assetsPath</span>(<span class="string">&#x27;css/[name].[contenthash].css&#x27;</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// split vendor js into its own file</span></span><br><span class="line">    <span class="comment">// new webpack.optimize.CommonsChunkPlugin(&#123;</span></span><br><span class="line">    <span class="comment">//   name: &#x27;vendor&#x27;,</span></span><br><span class="line">    <span class="comment">//   minChunks (module) &#123;</span></span><br><span class="line">    <span class="comment">//     // any required modules inside node_modules are extracted to vendor</span></span><br><span class="line">    <span class="comment">//     return (</span></span><br><span class="line">    <span class="comment">//       module.resource &amp;&amp;</span></span><br><span class="line">    <span class="comment">//       /\.js$/.test(module.resource) &amp;&amp;</span></span><br><span class="line">    <span class="comment">//       module.resource.indexOf(</span></span><br><span class="line">    <span class="comment">//         path.join(__dirname, &#x27;../node_modules&#x27;)</span></span><br><span class="line">    <span class="comment">//       ) === 0</span></span><br><span class="line">    <span class="comment">//     )</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;),</span></span><br><span class="line">    <span class="comment">// extract webpack runtime and module manifest to its own file in order to</span></span><br><span class="line">    <span class="comment">// prevent vendor hash from being updated whenever app bundle is updated</span></span><br><span class="line">    <span class="comment">// new webpack.optimize.CommonsChunkPlugin(&#123;</span></span><br><span class="line">    <span class="comment">//   name: &#x27;manifest&#x27;,</span></span><br><span class="line">    <span class="comment">//   minChunks: Infinity</span></span><br><span class="line">    <span class="comment">// &#125;),</span></span><br><span class="line">    <span class="comment">// This instance extracts shared chunks from code splitted chunks and bundles them</span></span><br><span class="line">    <span class="comment">// in a separate chunk, similar to the vendor chunk</span></span><br><span class="line">    <span class="comment">// see: https://webpack.js.org/plugins/commons-chunk-plugin/#extra-async-commons-chunk</span></span><br><span class="line">    <span class="comment">// new webpack.optimize.CommonsChunkPlugin(&#123;</span></span><br><span class="line">    <span class="comment">//   name: &#x27;app&#x27;,</span></span><br><span class="line">    <span class="comment">//   async: &#x27;vendor-async&#x27;,</span></span><br><span class="line">    <span class="comment">//   children: true,</span></span><br><span class="line">    <span class="comment">//   minChunks: 3</span></span><br><span class="line">    <span class="comment">// &#125;),</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>That’s it, enjoy. 🎉</p>
]]></content>
      <tags>
        <tag>vue</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Eslint 来禁止 Lodash 的整体引入</title>
    <url>/2020/use-eslint-to-forbid-entire-import-of-lodash/</url>
    <content><![CDATA[<p>前端项目使用 lodash 时需要注意，一不小心就会把整个库引入进来，大大增加最终打包体积。</p>
<span id="more"></span>

<p>两种真正可以实现按 method 引入的方式，一是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> get <span class="keyword">from</span> <span class="string">&#x27;lodash/get&#x27;</span></span><br></pre></td></tr></table></figure>

<p>二是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// yarn add lodash.get</span></span><br><span class="line"><span class="keyword">import</span> get <span class="keyword">from</span> <span class="string">&#x27;lodash.get&#x27;</span></span><br></pre></td></tr></table></figure>

<p>除此以外，其它所有方式都会导致整体引入。如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br></pre></td></tr></table></figure>

<p>虽然我知道这件事，但有时候我的队友不知道，辛辛苦苦改了半天的成果可以被别人一行代码就摧毁。因此我决定找一个方法来永久杜绝这件事的发生：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://eslint.org/docs/user-guide/configuring</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="string">&#x27;rules&#x27;</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="string">&#x27;no-restricted-imports&#x27;</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;paths&#x27;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lodash&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;仅允许类似 import get from \&#x27;lodash/get\&#x27; 的引入方式&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的话，只要代码里面一出现 <code>import ... from &#39;lodash&#39;</code>，eslint 就会报错，提示他去改代码。就算提交了，CI 也通过不了。岂不美哉。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>eslint</tag>
      </tags>
  </entry>
  <entry>
    <title>在微信小程序中使用 lodash</title>
    <url>/2019/use-lodash-in-wechat-mini-programs/</url>
    <content><![CDATA[<p>由于微信小程序中的 JavaScript 运行环境与浏览器有些许区别，因此在引用某些 npm lib 时会发生问题。这时候需要对源码做出一些改动。</p>
<blockquote>
<p>小程序环境比较特殊，一些全局变量（如 window 对象）和构造器（如 Function 构造器）是无法使用的。</p>
</blockquote>
<p>在小程序中直接 import <a href="https://lodash.com/">lodash</a> 会导致以下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Uncaught TypeError: Cannot read property &#x27;prototype&#x27; of undefined</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>解决方案：</p>
<ol>
<li>安装独立的 lodash method package，如 <a href="https://www.npmjs.com/package/lodash.get">lodash.get</a></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add lodash.get</span><br><span class="line">import get from &#x27;lodash.get&#x27;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改 lodash 源码</li>
</ol>
<p>找到：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> root = freeGlobal || freeSelf || <span class="title class_">Function</span>(<span class="string">&#x27;return this&#x27;</span>)();</span><br></pre></td></tr></table></figure>

<p>替换为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> root = &#123;</span><br><span class="line">  <span class="title class_">Array</span>: <span class="title class_">Array</span>,</span><br><span class="line">  <span class="title class_">Date</span>: <span class="title class_">Date</span>,</span><br><span class="line">  <span class="title class_">Error</span>: <span class="title class_">Error</span>,</span><br><span class="line">  <span class="title class_">Function</span>: <span class="title class_">Function</span>,</span><br><span class="line">  <span class="title class_">Math</span>: <span class="title class_">Math</span>,</span><br><span class="line">  <span class="title class_">Object</span>: <span class="title class_">Object</span>,</span><br><span class="line">  <span class="title class_">RegExp</span>: <span class="title class_">RegExp</span>,</span><br><span class="line">  <span class="title class_">String</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="title class_">TypeError</span>: <span class="title class_">TypeError</span>,</span><br><span class="line">  <span class="attr">setTimeout</span>: <span class="built_in">setTimeout</span>,</span><br><span class="line">  <span class="attr">clearTimeout</span>: <span class="built_in">clearTimeout</span>,</span><br><span class="line">  <span class="attr">setInterval</span>: <span class="built_in">setInterval</span>,</span><br><span class="line">  <span class="attr">clearInterval</span>: <span class="built_in">clearInterval</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>miniprogram</tag>
      </tags>
  </entry>
  <entry>
    <title>WP 2016 主题使用摘要</title>
    <url>/2016/using-excerpt-in-wp-2016-theme/</url>
    <content><![CDATA[<p>2016 主题设置里没有提供是否使用摘要的选项，因此如果文章不做任何操作，首页以及归档页都会显示全文，导致页面非常地长。但是，一番机缘巧合，我发现只要在文章里面插入了 <code>more</code> 标签，主题就会自动检测到并且切换到摘要模式。</p>
<p>妄我在 Google 上苦苦探索，搜集到一堆垃圾代码，然而并没有什么用。</p>
]]></content>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 IDEA 配置自动同步到FTP服务器</title>
    <url>/2016/using-idea-to-config-ftp-auto-deployment/</url>
    <content><![CDATA[<p>使用虚拟主机的时候经常会想到一个问题，就是改了代码以后还要手动上传到服务器上，非常麻烦，且不利于保持本地开发代码与服务器上运行代码之间的同步，容易出错。今天突然想着能不能用IDE来完成类似自动同步的事情，如果可以的话开发效率自然是大幅度提高。拜强大到没朋友的IDEA所赐，结果非常可观。</p>
<p>首先确保安装好IDEA，测试用IDEA版本为15.0.1，然后我们从FTP服务器上copy一份代码到本地，并创建好存放目录。此时代码应该是完全同步的。以上为准备工作。</p>
<span id="more"></span>

<p>然后我们打开IDEA，选择File -&gt; Open，打开代码根目录。</p>
<p>打开Tools -&gt; Deployment -&gt; Configuration</p>
<p><img src="https://static.wxsm.space/blog/48595786-3d227c00-e991-11e8-8b42-bbf3f871ab10.png"></p>
<p>在弹出的界面中点击 <code>+</code> 按钮，添加一个服务器。</p>
<p><img src="https://static.wxsm.space/blog/48595787-3dbb1280-e991-11e8-9519-0876ffc4f595.png"></p>
<p>如下图所示，填写主机地址，端口（如果不一样），用户名与密码以后，就可以点 <code>Test FTP connection</code> 按钮进行连接测试，如果连接成功，IDEA会有相应的提示。以下的步骤需要以此为前提。</p>
<p>点击 <code>Autodetect</code> 按钮后，选择服务器的根目录，一般选择最顶端的文件夹就OK了。即使代码并不是在根目录，我们也还有后面的配置来选择代码所处的实际目录。</p>
<p>最下面的 <code>Web server root URL</code> 字段可以填写网站的实际访问地址，这样在使用IDEA的实时预览功能时，浏览器就会以该Domain为基准进行路由。</p>
<p><img src="https://static.wxsm.space/blog/48595788-3dbb1280-e991-11e8-9438-a8d09ef6921f.png"></p>
<p>切换到 <code>Mappings</code> 标签，我们需要填写的字段也如下图。</p>
<p><code>Local path</code> 即本地代码根目录，IDEA已经自动设置好了。</p>
<p><code>Deployment path</code>则是FTP服务器上实际同步的位置，在此选择代码所处的文件夹即可。以上都填好后点击 <code>OK</code> 按钮。</p>
<p><img src="https://static.wxsm.space/blog/48595789-3dbb1280-e991-11e8-9332-0cbd1058f81d.png"></p>
<p>现在就大功告成了。我们可以选中一些文件或者文件夹，右键，然后就可以看到 Deployment 菜单，其子菜单有 Upload，Download，Compare，Sync四个。其中 Sync 就是我们所期望的功能，IDEA 会帮我们完成文件比较，与 VCS 的文件比较系统非常相似，确认无误后点击绿色的向右箭头按钮，代码就同步到服务器上去了。如下所示。</p>
<p><img src="https://static.wxsm.space/blog/48595790-3e53a900-e991-11e8-80bf-0f6212ac3d70.png"></p>
<p>当然每次都要右键然后找到 Sync 选项可能会有点太麻烦。我们可以把这个功能放到主工具栏上去，以后每次点它就行了。</p>
<p><img src="https://static.wxsm.space/blog/48595791-3e53a900-e991-11e8-9a35-1116a1f7461f.png"></p>
<p>接下来就可以享受愉快的开发体验了。唯一需要注意的是在网络不是非常理想的情况下，Sync 的时候不要选择项目根目录，选择真正有改变的文件或者文件夹即可，因为它毕竟不是 VCS，所有文件一个个比对的话实在是太慢。当然我们也可以配合 VCS 使用，效果更佳，这里就不再赘述。</p>
]]></content>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>为 Vue 组件库实现国际化支持</title>
    <url>/2017/vue-components-i18n/</url>
    <content><![CDATA[<p>其实这部分代码主要是参考着 element ui 和 iview 做的（iview 又是抄的 element），对关键代码进行了一些简化。主要需要实现的需求有：</p>
<ol>
<li>用户可以更改、切换组件库使用的语言（应用级别）</li>
<li>用户可以自定义组件使用的措辞</li>
<li>兼容 <code>vue-i18n</code> 这个库</li>
</ol>
<span id="more"></span>

<h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><h3 id="src-locale-lang-en-US-js"><a href="#src-locale-lang-en-US-js" class="headerlink" title="src&#x2F;locale&#x2F;lang&#x2F;en-US.js"></a>src&#x2F;locale&#x2F;lang&#x2F;en-US.js</h3><p>首先是 Locale 文件，把措辞映射到一个 key 上面去，比如说英文：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">uiv</span>: &#123;</span><br><span class="line">    <span class="attr">datePicker</span>: &#123;</span><br><span class="line">      <span class="attr">clear</span>: <span class="string">&#x27;Clear&#x27;</span>,</span><br><span class="line">      <span class="attr">today</span>: <span class="string">&#x27;Today&#x27;</span>,</span><br><span class="line">      <span class="attr">month</span>: <span class="string">&#x27;Month&#x27;</span>,</span><br><span class="line">      <span class="attr">month1</span>: <span class="string">&#x27;January&#x27;</span>,</span><br><span class="line">      <span class="attr">month2</span>: <span class="string">&#x27;February&#x27;</span>,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应的中文文件只需要把相应的 Value 翻译成中文即可。这里有一个最基本的设想就是，<strong>如果需要增加一种语言，应该是只需要增加一个这样的文件即可</strong>。</p>
<h3 id="src-locale-index-js"><a href="#src-locale-index-js" class="headerlink" title="src&#x2F;locale&#x2F;index.js"></a>src&#x2F;locale&#x2F;index.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> defaultLang <span class="keyword">from</span> <span class="string">&#x27;./lang/en-US&#x27;</span></span><br><span class="line"><span class="keyword">let</span> lang = defaultLang</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i18nHandler = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> vuei18n = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="variable language_">this</span>).<span class="property">$t</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> vuei18n === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> vuei18n.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> t = <span class="keyword">function</span> (<span class="params">path, options</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = i18nHandler.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">  <span class="keyword">if</span> (value !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> value !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> array = path.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> current = lang</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = array.<span class="property">length</span>; i &lt; j; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> property = array[i]</span><br><span class="line">    value = current[property]</span><br><span class="line">    <span class="keyword">if</span> (i === j - <span class="number">1</span>) <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    current = value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> use = <span class="keyword">function</span> (<span class="params">l</span>) &#123;</span><br><span class="line">  lang = l || lang</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> i18n = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">  i18nHandler = fn || i18nHandler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;use, t, i18n&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码乍一看挺复杂，其实弄明白后就很简单：</p>
<ol>
<li><code>i18nHandler</code> 是用来检测并套用 <code>vue-i18n</code> 的，如果用户安装了这个插件，则会使用绑定在 Vue 实例上的 <code>$t</code> 方法进行取值</li>
<li><code>t</code> 方法是用来取值的。首先看能否用 <code>i18nHandler</code> 取到，如果能取到则直接用，取不到就要自行解决了。最后返回取到（或者取不到，则为空）的值。</li>
<li><code>use</code> 与 <code>i18n</code> 这两个方法是在整个组件库作为插件被 Vue 安装的时候调用的，主要用来让用户自定义语言等等。</li>
</ol>
<p>原版的 <code>t</code> 方法有一个与之配合的模板字符串替换的方法（比如说处理 <code>My name is $&#123;0&#125;</code> 这种 Value），这里简洁起见把它删掉了，实际上也暂时用不到。</p>
<h3 id="src-mixins-locale-js"><a href="#src-mixins-locale-js" class="headerlink" title="src&#x2F;mixins&#x2F;locale.js"></a>src&#x2F;mixins&#x2F;locale.js</h3><p>一个 mixin，很简单：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; t &#125; <span class="keyword">from</span> <span class="string">&#x27;../locale&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    t (...args) &#123;</span><br><span class="line">      <span class="keyword">return</span> t.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就是给组件加上一个 <code>t</code> 方法。那么现在组件在需要根据语言切换的地方，只要加入这个 mixin 并在输出的地方使用 <code>t(key)</code> 即可，比如 <code>t(&#39;uiv.datePicker.month1&#39;)</code> 在默认的配置下会使用 <code>January</code>，而如果用户配置了中文则会使用 <code>一月</code>。</p>
<h3 id="src-components-index-js"><a href="#src-components-index-js" class="headerlink" title="src&#x2F;components&#x2F;index.js"></a>src&#x2F;components&#x2F;index.js</h3><p>最后一步：将上述的两个方法 <code>use</code> 和 <code>i18n</code> 写入到组件库入口的 <code>install</code> 方法中去。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">install</span> = (<span class="params">Vue, options = &#123;&#125;</span>) =&gt; &#123;</span><br><span class="line">  locale.<span class="title function_">use</span>(options.<span class="property">locale</span>)</span><br><span class="line">  locale.<span class="title function_">i18n</span>(options.<span class="property">i18n</span>)</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h3><p>切换中文：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> uiv <span class="keyword">from</span> <span class="string">&#x27;uiv&#x27;</span></span><br><span class="line"><span class="keyword">import</span> locale <span class="keyword">from</span> <span class="string">&#x27;uiv/src/locale/lang/zh-CN&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(uiv, &#123; locale &#125;)</span><br></pre></td></tr></table></figure>

<p>显然, 如果对预设的措辞不满意，我们还可以自定义, 只需要创造一个 <code>locale</code> 对象并替换之即可。</p>
<h3 id="配合-Vue-I18n-使用"><a href="#配合-Vue-I18n-使用" class="headerlink" title="配合 Vue I18n 使用"></a>配合 Vue I18n 使用</h3><p>只要跟着 <code>vue-i18n</code> 的文档把自己的 App 配好就行，不用管组件库，会自动适配。<strong>但有一点要注意：需要先将 组件库的语言包合并到 App 语言包中去</strong>。比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uivLocale <span class="keyword">from</span> <span class="string">&#x27;uiv/src/locale/lang/zh-CN&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> appLocale = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, uivLocale, &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接下来该干嘛干嘛</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>vue</tag>
        <tag>i18n</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-Router Note</title>
    <url>/2017/vue-router-note/</url>
    <content><![CDATA[<p>Vue Router (<a href="https://github.com/vuejs/vue-router">https://github.com/vuejs/vue-router</a>) 使用笔记。虽然<a href="https://router.vuejs.org/">官方文档</a>比较详尽，但实际用起来依然有些地方需要特别注意的（其实主要是我的个人需求）。</p>
<span id="more"></span>

<h2 id="Scroll-Behaviours"><a href="#Scroll-Behaviours" class="headerlink" title="Scroll Behaviours"></a>Scroll Behaviours</h2><p>文档上有 scroll behaviours 的示例，但实际上用起来不太完美，还需要自己改造一下。需要注意的是 <code>scrollBehavior</code> 必须搭配 <code>history</code> 模式，否则代码无效且无任何错误信息。</p>
<p>上面说到<strong>不完美</strong>的地方主要是在模拟 ‘scroll to anchor’ 这一行为时，文档的代码是不够好的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">hash</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">selector</span>: to.<span class="property">hash</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里实际上会调用 <code>querySelector(to.hash)</code> 来实现滚动，但是用起来会发现有些时候这段会报错，因为类似 <code>#1-anything</code> 这样的数字（或者其他非字母字符）打头的 hash 作为 selector 是 <strong>Invalid</strong> 的。但是要修复只需要稍微改动一下就好了：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (to.<span class="property">hash</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">`[id=&#x27;<span class="subst">$&#123;to.hash.slice(<span class="number">1</span>)&#125;</span>&#x27;]`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以一段完善的 scroll behaviour 代码应该是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">hash</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">selector</span>: <span class="string">`[id=&#x27;<span class="subst">$&#123;to.hash.slice(<span class="number">1</span>)&#125;</span>&#x27;]`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (savedPosition) &#123;</span><br><span class="line">    <span class="keyword">return</span> savedPosition</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它可以做到在路由变化时：</p>
<ol>
<li>有锚点时滚动到锚点</li>
<li>有历史位置时滚动到历史位置</li>
<li>都没有时滚动到页头</li>
</ol>
<h2 id="Lazy-Loading"><a href="#Lazy-Loading" class="headerlink" title="Lazy Loading"></a>Lazy Loading</h2><p>官方的 Lazy load 示例代码换了很多茬，比如之前有类似 <code>require(&#39;...&#39;, resolve)</code> 的，还有用 <code>System.import</code> 的，但是它们并不能向后兼容，所以如果用的是新版本的话，并不能够直接 copy 旧项目的方式。目前感觉会稳定下来的方式是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Foo</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./Foo.vue&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>但是这里又有一个注意点，以上语法必须引入一个 babel 插件 <a href="https://babeljs.io/docs/plugins/syntax-dynamic-import/">syntax-dynamic-import</a> 才行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev babel-plugin-syntax-dynamic-import</span><br></pre></td></tr></table></figure>

<p><strong>.babelrc</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;syntax-dynamic-import&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>以上就可以在 webpack + babel 的环境下实现代码分块了。</p>
<h2 id="Progress"><a href="#Progress" class="headerlink" title="Progress"></a>Progress</h2><p>经常会有这样的需求（尤其是使用 lazy load 时）：路由跳转时提供一个进度条（像 Github 头部那种），然而 Vue Router 没有提供这方面的示例。经过实际使用发现，并不需要刻意使用 Vue 封装的进度条，比如说轻量级的 <a href="https://github.com/rstacruz/nprogress">nprogress</a> 也可以很好地搭配使用。</p>
<p>但是需要注意的是，Vue Router 会将 hash 跳转也视为一次 route 跳转，因此如果在全局钩子中注册 progress 方法的话，那么它也会在 hash 跳转中出现，实际上应该是不需要的。所以需要一点点判断：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">NProgress</span> <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// not start progressbar on same path &amp;&amp; not the same hash</span></span><br><span class="line">  <span class="comment">// which means hash jumping inside a route</span></span><br><span class="line">  <span class="keyword">if</span> (!(<span class="keyword">from</span>.<span class="property">path</span> === to.<span class="property">path</span> &amp;&amp; <span class="keyword">from</span>.<span class="property">hash</span> !== to.<span class="property">hash</span>)) &#123;</span><br><span class="line">    <span class="title class_">NProgress</span>.<span class="title function_">start</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Finish progress</span></span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>以上就是一个简单的页面跳转进度条示例，它会在<strong>除了同页 hash 跳转以外的所有页面跳转</strong>行为发生时，在页头显示一个简单的进度条。</p>
<h2 id="Active-Style"><a href="#Active-Style" class="headerlink" title="Active Style"></a>Active Style</h2><p>当使用 <code>&lt;router-link&gt;</code> 的时候，Vue Router 会自动给当前路由的 link 加一个 active class，用来做 nav menu 时非常方便。但是有一点需要注意的是，它默认并不是一个精确匹配的模式，而是一个 <strong>matchStart</strong>，比如说 <code>&lt;router-link to=&quot;/a&quot;&gt;</code> 会被一个 <code>/a/b</code> 的路由激活，更甚者，<code>&lt;router-link to=&quot;/&quot;&gt;</code> 会被所有路由激活（真的）。然而这一般来说都不会是想要的结果。</p>
<p>在老旧版本（0.x）的 Vue-Router 中这个问题是无解的，现在则<strong>可以使用 <code>&lt;router-link exact&gt;</code> 来将它转换为精确匹配</strong>。</p>
<h2 id="Route-Reuse"><a href="#Route-Reuse" class="headerlink" title="Route Reuse"></a>Route Reuse</h2><p>当使用 <code>&lt;router-view&gt;</code> 时，默认会启用组件复用，也就是说在可能的情况下，作为路由页面的组件不会被销毁重建，而是直接复用。</p>
<p>就好像一个博客的文章页面，一般来说会是给出这样的路由配置：<code>/post/:id</code>，那么在从 <code>/post/1</code> 跳转到 <code>/post/2</code> 的时候，实际上路由组件是不会重建的。</p>
<p>有时候我们会想要避免这样的事情发生，因为一个路由可能在创建的时候有比较多的逻辑（如数据动态获取、判断等），如果它在路由变化的时候直接复用的话，那么 <code>mount</code> 方法将不再被调用，我们还要为 <code>update</code> 再写一套类似的逻辑。<strong>更过分的是</strong>，其所用到的所有子组件也不再会执行 <code>mount</code> 方法，那么我们要为所有子组件编写 <code>update</code> 方法。非常麻烦。</p>
<p>不知道为什么，老版本的文档是有为这种情况提供解决方案的，但是在现在的文档里面找不到了。实际上很简单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">:key</span>=<span class="string">&quot;$route.path&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>就这样就可以了。如此一来，<strong>只要在 <code>$route.path</code> 变化的时候，路由组件就会被销毁重建</strong>。用一点点的性能损耗，节省大量冗余代码。</p>
<p>当然这里也可以使用定制化逻辑来控制，比如使用 computed value 来实现更复杂的复用逻辑。</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Vue Transition 实现高度渐变动画</title>
    <url>/2017/vue-transition-height/</url>
    <content><![CDATA[<p>CSS Transition 中的高度从 0 到 auto 以及从 auto 到 0 是个艰难的任务（相比于其它属性的 transition 而言），原因也很简单：就是浏览器不支持此类 CSS 动画，无论在何种情况下，它都不会成功。</p>
<p>但是高度渐变是个很常用的动画效果，如果绕过纯 CSS <code>height</code> 属性，有如下方式来实现：</p>
<ul>
<li>使用 <code>max-height</code> 属性，为元素设置一个不可能达到的最大高度，然后将 transition 转换为 <code>max-height</code> 从 0 到某个固定的值；</li>
<li>使用 <code>transform: scaleY</code> 实现；</li>
<li>使用 JavaScript 动画。</li>
</ul>
<p>上面的解决方案都从某种程度上解决了问题，但是，各有各的限制于缺点：</p>
<ul>
<li>使用 <code>max-height</code> 会造成动画效果与预期有些许出入（加速与延迟），实际体验是，它与实际 <code>height</code> 区别越大，这种感觉就会越明显，原因也很容易想到，因为 transition 的起点与终点均不在实际的起点与终点上；</li>
<li>使用 <code>scaleY</code> 有两个问题：一是动效与高度渐变不一样，元素的内容看上去是被压缩了（而不是被收起或展开），这个倒可以忍耐。可恶的是第二点，它虽然看起来是渐变了，然而高度却并没有被渐变！意思是，在它下面的元素会在动画结束后”跳”到另一个位置而不是平滑地渐变到这个位置；</li>
<li>使用 JavaScript 动画其实已经可以完美地实现高度渐变了，然而，问题是我们需要引入额外的 lib 来做成这件事，我可没心情纯 js 手写动画。</li>
</ul>
<p>所以，我的目标是：</p>
<ol>
<li>使用 css transition 完成动画；</li>
<li>动画效果必须完美；</li>
<li>与 vue transition 组件集成。</li>
</ol>
<p>这实际上是一个很艰难的任务。经过了大量的失败尝试，最终还是 google 救了我。。下面先直接上解决方案。</p>
<span id="more"></span>

<p>css 部分非常简单，因为它不可以完成从 0 到 auto 的渐变，却可以完成从 0 到固定值的渐变，因此，思路是渐变仍由 css 完成，但会通过钩子给元素做些魔法操作：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.collapse</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: height .<span class="number">3s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是重点 vue transition 部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">on</span>: &#123;</span><br><span class="line">  enter (el) &#123;</span><br><span class="line">    el.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&#x27;auto&#x27;</span></span><br><span class="line">    <span class="comment">// noinspection JSSuspiciousNameCombination</span></span><br><span class="line">    <span class="keyword">let</span> endWidth = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(el).<span class="property">height</span></span><br><span class="line">    el.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&#x27;0px&#x27;</span></span><br><span class="line">    el.<span class="property">offsetHeight</span> <span class="comment">// force repaint</span></span><br><span class="line">    <span class="comment">// noinspection JSSuspiciousNameCombination</span></span><br><span class="line">    el.<span class="property">style</span>.<span class="property">height</span> = endWidth</span><br><span class="line">  &#125;,</span><br><span class="line">  afterEnter (el) &#123;</span><br><span class="line">    el.<span class="property">style</span>.<span class="property">height</span> = <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  leave (el) &#123;</span><br><span class="line">    el.<span class="property">style</span>.<span class="property">height</span> = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(el).<span class="property">height</span></span><br><span class="line">    el.<span class="property">offsetHeight</span> <span class="comment">// force repaint</span></span><br><span class="line">    el.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&#x27;0px&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  afterLeave (el) &#123;</span><br><span class="line">    el.<span class="property">style</span>.<span class="property">height</span> = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这些钩子大概是这样的：</p>
<ul>
<li><code>enter</code> 会在元素从无到有的时候触发，即我们期望的高度从 0 到 auto 的时候；</li>
<li><code>afterEnter</code> 会在 <code>enter</code> 结束后触发；</li>
<li><code>leave</code> 会在元素从有到无，即高度从 auto 到 0 的时候触发；</li>
<li><code>afterLeave</code> 同理</li>
</ul>
<p>这些钩子内的代码真的很魔性，大概是这样的：</p>
<p><strong>enter</strong></p>
<p>这个方法被调用的时候，元素实际上已经被插入到 dom 中（ <code>v-if</code> ）或者 display 属性不为 none 了（ <code>v-show</code> ），因此，是可以获取到它的实际高度的。</p>
<ol>
<li>先将其高度设置为 <code>auto</code>，然后通过 <code>getComputedStyle</code> 方法来获取其实际高度；</li>
<li>将其高度设置为 <code>0</code>；</li>
<li>将其高度设置为第一步取得的实际高度。</li>
</ol>
<p>但是！这么做有个致命问题，我是在同一个方法内同步完成这些步骤的，因此，第二步和第三步执行的结果看起来就像跳过了第二步而只执行了第三步一样，这样就没有高度从 0 到某个值的过程，自然也就没有渐变动画了。</p>
<p><strong>重点！</strong></p>
<p><strong>这里说的魔法，实际上就是那一句看似啥都没做的 <code>el.offsetHeight</code>，它使浏览器强制进入了一个 repaint 流程。至于它为什么能实现这个功能，真的不太清楚，google 一波也只是知其然不知其所以然，我们甚至不用给它赋值，只要引用一次就行了。可以看做一个非常神奇的技巧。实测在 IE 10 以上 &#x2F; Chrome &#x2F; Firefox &#x2F; Safari 上均能工作。</strong></p>
<p>因此，enter 的流程变为：</p>
<ol>
<li>先将其高度设置为 <code>auto</code>，然后通过 <code>getComputedStyle</code> 方法来获取其实际高度；</li>
<li>将其高度设置为 <code>0</code>；</li>
<li>强制浏览器重绘；</li>
<li>将其高度设置为第一步取得的实际高度。</li>
</ol>
<p>这样动画就成功执行了！</p>
<p>理解了 <code>enter</code> 过程，剩下的 <code>afterEnter</code> &#x2F; <code>leave</code> &#x2F; <code>afterLeave</code> 钩子，里面的内容就很容易理解了。</p>
<p>效果演示：<a href="https://uiv.wxsm.space/collapse">https://uiv.wxsm.space/collapse</a></p>
<p>回过头来看一下实现原理其实很简单粗暴，因此，除了在 vue 上面可以这么玩，其实其他支持 css transition 的框架肯定也是可以的（如 angular 中有 ngAnimate 可以实现），最终达到的动画效果十分完美，并且没有借助主框架以外的任何额外 js 库。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>vue</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始实现 Vue3 响应式</title>
    <url>/2023/vue3-reactive/</url>
    <content><![CDATA[<p>Vue3 与 Vue2 的最大不同点之一是响应式的实现方式。众所周知，Vue2 使用的是 <code>Object.defineProperty</code>，为每个对象设置 getter 与 setter，从而达到监听数据变化的目的。然而这种方式存在诸多限制，如对数组的支持不完善，无法监听到对象上的新增属性等。因此 Vue3 通过 Proxy API 对响应式系统进行了重写，并将这部分代码封装在了 <code>@vue/reactivity</code> 包中。</p>
<p>本文将参照 Vue3 的设计，从零开始实现一套响应式系统。注意本文引用的代码与实际的 Vue3 实现方式有所出入，Vue3 需要更多地考虑高效与兼容各种边界情况，但此处以易懂为主。 文中提到的大部分代码可以在 <a href="https://github.com/wxsms/learning-vue">https://github.com/wxsms/learning-vue</a> 找到。</p>
<span id="more"></span>

<h2 id="什么是响应式"><a href="#什么是响应式" class="headerlink" title="什么是响应式"></a>什么是响应式</h2><p>Evan 经常举的一个例子是电子表格（如：Excel）。当我们需要对某一列或行求和，将计算结果设置在某个单元格中，并且在该列（行）的数据发生变化时，求和单元格的数据实现实时更新。这就是响应式。</p>
<p>以代码来表达的话：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> col = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> s = <span class="title function_">sum</span>(col)</span><br></pre></td></tr></table></figure>

<p>我们就可以的得到一个求和值 <code>s</code>。</p>
<p>不同的是，以上代码是命令式的。也就是说，当 <code>col</code> 发生变化时，<code>s</code> 的值并不会随之改变。我们需要再次调用 <code>s = sum(col)</code> 才能得到新的值。</p>
<p>响应式就是要解决这个问题：当 <code>col</code> 发生变化时，我们可以自动地得到基于变化后的 <code>col</code> 计算而来的 <code>s</code>。</p>
<p>我们的目标：</p>
<pre><code class="highlight mermaid">graph LR

A[依赖变更] --&gt;|自动触发| B[响应函数]
B --&gt;|自动监听| A</code></pre>

<h2 id="依赖与依赖监听"><a href="#依赖与依赖监听" class="headerlink" title="依赖与依赖监听"></a>依赖与依赖监听</h2><p>当要实现一个响应式系统的时候，我们实际需要的是什么？</p>
<p>答案是<strong>依赖</strong>与<strong>依赖的监听</strong>。</p>
<p>用上面的例子来说，<code>col</code> 是依赖，<code>s=sum(col)</code> 是监听依赖做出的反应。当依赖发生变化时，反应可以自动执行，这件事情就完成了。</p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>那么我们先来实现<strong>依赖</strong>。 一个依赖：</p>
<ol>
<li>代表了某个对象下面的某个值；</li>
<li>当值发生变化时，需要触发跟它有关的作用（effect）。</li>
</ol>
<p>以下是实现代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dep -&gt; Dependency 依赖</span></span><br><span class="line"><span class="comment">// 比如上面提到的 `col` 是一个 dep，</span></span><br><span class="line"><span class="comment">// `c = a.b + 1` 中，a.b 是一个 dep。</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> () &#123;</span><br><span class="line">    <span class="comment">// 储存与这个依赖有关的“作用”</span></span><br><span class="line">    <span class="comment">// 这里使用 Set，可以利用其天然的去重属性，</span></span><br><span class="line">    <span class="comment">// 因为作用无需重复添加</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_effects</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取消作用对此依赖的追踪</span></span><br><span class="line">  untrack (e) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_effects</span>.<span class="title function_">delete</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 作用开始追踪此依赖</span></span><br><span class="line">  track (e) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_effects</span>.<span class="title function_">add</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 触发追踪了此依赖的所有作用</span></span><br><span class="line">  trigger () &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> e <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">_effects</span>) &#123;</span><br><span class="line">      e.<span class="title function_">run</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除此以外，我们还需要一个变量，用来存储所有的依赖：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// target (object) -&gt; key (string) -&gt; dep</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br></pre></td></tr></table></figure>

<p><code>depsMap</code> 是一个嵌套的 Map：</p>
<ol>
<li>它的 key 是一个 Object，如 <code>c = a.b + 1</code> 中，key 是 <code>a</code> 这个对象；</li>
<li>它的 value 又是一个 Map：<ol>
<li>它的 key 是一个键名，如 <code>c = a.b + 1</code> 中，key 是 <code>b</code>；</li>
<li>它的 value 是一个 Dep 实例。</li>
</ol>
</li>
</ol>
<pre><code class="highlight mermaid">mindmap
depsMap
    A[Key: Object]
    B[Value: Map]
      C[Key: string]
      D[Value: dep]</code></pre>

<p>在实际的 Vue3 代码中，这里的第一层使用的是 WeakMap 而非 Map。原因是 WeakMap 对 key 是弱引用，当 key 在代码中的其它地方已经不存在应用时，它 (key) 以及对应的 value 都会被 GC。而如果使用 Map 的话，保有的是强引用，就会导致内存泄漏。</p>
<h3 id="依赖监听"><a href="#依赖监听" class="headerlink" title="依赖监听"></a>依赖监听</h3><p>一个依赖监听模块大致需要以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Dep</span>, depsMap &#125; <span class="keyword">from</span> <span class="string">&#x27;./dep&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前正在运行的 effect</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> currentEffect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ReactiveEffect</span> &#123;</span><br><span class="line">  <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个作用函数，并将自动追踪函数内的依赖</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn 接收的函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">effect</span> (fn) &#123;</span><br><span class="line">  <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前正在运行的作用追踪一个依赖</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target 目标对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prop 目标对象的属性名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">track</span> (target, prop) &#123;</span><br><span class="line">  <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 触发一个依赖下的所有作用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target 目标对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prop 目标对象的属性名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trigger</span> (target, prop) &#123;</span><br><span class="line">  <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="trigger"><a href="#trigger" class="headerlink" title="trigger"></a><code>trigger</code></h4><p>触发作用的代码非常简单，只需直接拿到对应的 dep，并调用它的 <code>trigger</code> 函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trigger</span> (target, prop) &#123;</span><br><span class="line">  depsMap.<span class="title function_">get</span>(target)?.<span class="title function_">get</span>(prop)?.<span class="title function_">trigger</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="track"><a href="#track" class="headerlink" title="track"></a><code>track</code></h4><p>与 <code>trigger</code> 相反：<code>trigger</code> 是将 dep 取出来并触发里面的 effects，而 <code>track</code> 是将 effect 保存到 dep 中去。</p>
<p>需要注意的是，因为 <code>depsMap</code> 一开始是空的，所以取 dep 会包含一个初始化的过程：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getDep</span> (target, prop) &#123;</span><br><span class="line">  <span class="comment">// 从 depsMap 中找到本 target 的 Map</span></span><br><span class="line">  <span class="keyword">let</span> deps = depsMap.<span class="title function_">get</span>(target);</span><br><span class="line">  <span class="keyword">if</span> (!deps) &#123;</span><br><span class="line">     <span class="comment">// 没找到，需要初始化</span></span><br><span class="line">     deps = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    depsMap.<span class="title function_">set</span>(target, deps);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从第二级的 Map 中找到本 prop 的 dep</span></span><br><span class="line">  <span class="keyword">let</span> dep = deps.<span class="title function_">get</span>(prop);</span><br><span class="line">  <span class="keyword">if</span> (!dep) &#123;</span><br><span class="line">     <span class="comment">// 没找到，需要初始化</span></span><br><span class="line">     dep = <span class="keyword">new</span> <span class="title class_">Dep</span>();</span><br><span class="line">    deps.<span class="title function_">set</span>(prop, dep);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dep;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是 <code>track</code> 函数的具体实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">track</span> (target, prop) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!currentEffect) &#123;</span><br><span class="line">     <span class="comment">// 当前没有正在运行中的作用，无需追踪，可直接退出</span></span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> dep = <span class="title function_">getDep</span>(target, prop);</span><br><span class="line">  <span class="comment">// 追踪正在运行中的作用</span></span><br><span class="line">  dep.<span class="title function_">track</span>(currentEffect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="effect"><a href="#effect" class="headerlink" title="effect"></a><code>effect</code></h4><p>effect 作为一个工厂函数，只需完成 ReactiveEffect 实例的创建并立即运行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">effect</span> (fn) &#123;</span><br><span class="line">  <span class="keyword">let</span> e = <span class="keyword">new</span> <span class="title class_">ReactiveEffect</span>(fn);</span><br><span class="line">  <span class="comment">// 直接运行</span></span><br><span class="line">  e.<span class="title function_">run</span>();</span><br><span class="line">  <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ReactiveEffect"><a href="#ReactiveEffect" class="headerlink" title="ReactiveEffect"></a><code>ReactiveEffect</code></h4><p>最后来实现 ReactiveEffect 这个类。从上面的其它函数可以看出，这个类需要以下功能：</p>
<ol>
<li>接收一个 <code>fn</code> 函数；</li>
<li>包含一个 <code>run</code> 成员方法，可以运行一次该作用；</li>
</ol>
<p>下面我们来分别实现它们。</p>
<p><strong>1. 构造器</strong></p>
<p>简单赋值即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span> (fn) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">fn</span> = fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. <code>run</code></strong></p>
<p>run 函数的关键在于 <code>currentEffect</code> 的赋值：我们在这里默认在 <code>fn</code> 函数运行的过程中，会发起对相应依赖的 <code>track()</code>，而 <code>track</code> 函数中会使用到 <code>currentEffect</code>。这也是为什么它需要作为一个全局变量单独抽离出来，成为 track 与 effect 之间的纽带：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">run () &#123;</span><br><span class="line">  <span class="comment">// 赋值 currentEffect</span></span><br><span class="line">  currentEffect = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">// 运行用户传入的函数</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">fn</span>();</span><br><span class="line">  <span class="comment">// 取消赋值</span></span><br><span class="line">  currentEffect = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>仔细看的话会发现，这里每一次调用 <code>run</code> 都会给 <code>currentEffect</code> 赋值，可以理解为发起了依赖收集的流程。换而言之，每次执行这个作用都会收集依赖。为什么要这么做？举个例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (a.<span class="property">b</span> &amp;&amp; a.<span class="property">b</span>.<span class="property">c</span>) &#123;</span><br><span class="line">    d = a.<span class="property">b</span>.<span class="property">c</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果依赖收集只执行一次，并且第一次执行的时候 <code>a.b</code> 是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy">falsely</a> 的，那么第一次执行就只收集到了 <code>a.b</code> 这个依赖，而 <code>a.b.c</code> 没有收集到。那么后续当只有 <code>a.b.c</code> 发生变化时，d 将不会被重新赋值，这是不符合预期的。因此，目前来说依赖收集需要在每次作用函数运行时都进行。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>目前为止，我们定义了两个类以及一些工具函数：</p>
<ol>
<li><code>Dep</code> 表示一个“依赖”，它内部含有一个 <code>effects</code> 集合，用来触发与它有关的作用；</li>
<li><code>ReactiveEffect</code> 表示一个“作用”；</li>
<li><code>track</code> 与 <code>trigger</code> 函数，分别用来追踪依赖与触发作用。</li>
</ol>
<p>它们可以实现如下效果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">let</span> fn = jest.<span class="title function_">fn</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 用户的函数中发起了依赖追踪，</span></span><br><span class="line">   <span class="comment">// 后续该行为将被自动化</span></span><br><span class="line">   <span class="title function_">track</span>(obj, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">   <span class="title function_">track</span>(obj.<span class="property">b</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">effect</span>(fn);</span><br><span class="line"><span class="comment">// fn 总共被调用了 1 次</span></span><br><span class="line"><span class="title function_">expect</span>(fn).<span class="title function_">toHaveBeenCalledTimes</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">obj.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 依赖发生了变化，后续该行为将被自动化</span></span><br><span class="line"><span class="title function_">trigger</span>(obj, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="comment">// fn 总共被调用了 2 次</span></span><br><span class="line"><span class="title function_">expect</span>(fn).<span class="title function_">toHaveBeenCalledTimes</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">obj.<span class="property">b</span>.<span class="property">c</span> = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 依赖发生了变化，后续该行为将被自动化</span></span><br><span class="line"><span class="title function_">trigger</span>(obj.<span class="property">b</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="comment">// fn 总共被调用了 3 次</span></span><br><span class="line"><span class="title function_">expect</span>(fn).<span class="title function_">toHaveBeenCalledTimes</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>看起来好像是那么回事了，但还有点抽象，距离我们的最终目标还有一定距离。</p>
<h2 id="响应式变量"><a href="#响应式变量" class="headerlink" title="响应式变量"></a>响应式变量</h2><p>现在我们有了依赖与依赖追踪，是时候来实现第二个关键组件 <code>reactive</code> 了。 它将帮我们完成“在作用函数内部自动调用 <code>track()</code>”以及“依赖变化时自动调用 <code>trigger()</code>”的工作。</p>
<p>众所周知，Vue3 使用了 Proxy 来实现响应式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; track, trigger &#125; <span class="keyword">from</span> <span class="string">&#x27;./effect.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reactive</span> (obj) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">    get (target, p) &#123;</span><br><span class="line">      <span class="comment">// todo</span></span><br><span class="line">    &#125;,</span><br><span class="line">    set (target, p, value) &#123;</span><br><span class="line">      <span class="comment">// todo</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们需要做的两件事：</p>
<ol>
<li>实现 getter：当 <code>get</code> 触发时，追踪依赖</li>
<li>实现 setter：当 <code>set</code> 触发时，触发作用</li>
</ol>
<pre><code class="highlight mermaid">graph LR

A[reactive] --&gt;|发生读取| B[track]
A[reactive] --&gt;|发生变更| C[trigger]
B --&gt; D[ReactiveEffect]
C --&gt; D[ReactiveEffect]</code></pre>

<h3 id="get"><a href="#get" class="headerlink" title="get"></a><code>get</code></h3><p><code>get</code> 的第一版实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">get (target, p) &#123;</span><br><span class="line">  <span class="comment">// 追踪依赖！</span></span><br><span class="line">  <span class="title function_">track</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="comment">// 获取值并返回</span></span><br><span class="line">  <span class="keyword">let</span> value = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Reflect 通常是与 Proxy 成对出现的 API，这里的 <code>Reflect.get(...arguments)</code> 约等于 <code>target[p]</code>。</p>
<p>但是，这么做有个问题！因为 Proxy 代理的是浅层属性，举个例子，当我取 <code>a.b.c</code> 时，实际上分了两步：</p>
<ol>
<li>先取 <code>a.b</code>，这里 <code>a</code> 是 reactive 对象，能够触发 getter，没问题；</li>
<li>再取 <code>b.c</code>，注意这里如果不做任何操作的话，<code>b</code> 将是一个普通对象，也就是说取值到这里响应性就丢失了。</li>
</ol>
<p>为了解决这个问题，我们需要做一点小小的改造：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">get (target, p, receiver) &#123;</span><br><span class="line">  <span class="comment">// 追踪依赖！</span></span><br><span class="line">  <span class="title function_">track</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="comment">// 获取值</span></span><br><span class="line">  <span class="keyword">let</span> value = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="keyword">if</span> (value !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">     <span class="comment">// 如果 value 是一个对象，需要递归调用 reactive 将它再次包裹</span></span><br><span class="line">     <span class="keyword">return</span> <span class="title function_">reactive</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="set"><a href="#set" class="headerlink" title="set"></a><code>set</code></h3><p>实现 setter 需要注意的点是：</p>
<ol>
<li>触发作用要在设置新值后进行；</li>
<li>需要判断新旧值是否相等以避免死循环。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">set (target, p, value, receiver) &#123;</span><br><span class="line">  <span class="comment">// 先取值</span></span><br><span class="line">  <span class="keyword">let</span> oldValue = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="keyword">if</span> (oldValue === value) &#123;</span><br><span class="line">     <span class="comment">// 如果新旧值相等，无需触发作用</span></span><br><span class="line">     <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置新的值，约等于 `target[p] = value`</span></span><br><span class="line">  <span class="keyword">let</span> newValue = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="comment">// 触发作用！这里是在设置新值后才进行的。</span></span><br><span class="line">  <span class="title function_">trigger</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="comment">// 注意这里返回的是 Reflect.set 的返回值</span></span><br><span class="line">  <span class="keyword">return</span> newValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大功告成！</p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>我们现在可以：</p>
<ol>
<li>定义响应式变量；</li>
<li>定义作用函数；</li>
<li>响应式变量发生变化时，函数将自动执行。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="title function_">reactive</span>(&#123; <span class="attr">value</span>: <span class="number">1</span> &#125;);</span><br><span class="line"><span class="keyword">let</span> b;</span><br><span class="line"></span><br><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  b = a.<span class="property">value</span> * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">expect</span>(b).<span class="title function_">toEqual</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">a.<span class="property">value</span> = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// b 自动更新了！</span></span><br><span class="line"><span class="title function_">expect</span>(b).<span class="title function_">toEqual</span>(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">a.<span class="property">value</span> = <span class="number">300</span>;</span><br><span class="line"><span class="comment">// b 自动更新了！</span></span><br><span class="line"><span class="title function_">expect</span>(b).<span class="title function_">toEqual</span>(<span class="number">600</span>);</span><br></pre></td></tr></table></figure>

<p>实际上当进行到这里的时候，响应式的两大基石就已经完成了。因此下面其它的 API 实现我决定都通过 <code>reactive</code> 与 <code>effect</code> 来实现。当然实际上 Vue3 考虑的更多，做的也会更复杂一些，但是原理是类似的。</p>
<h2 id="其它响应式-API"><a href="#其它响应式-API" class="headerlink" title="其它响应式 API"></a>其它响应式 API</h2><pre><code class="highlight mermaid">mindmap
   Reactive &amp; Effect
      A)ref(
      A)computed(
      A)watch(
      A)watchEffect(
      A)...(</code></pre>

<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>上面的 <code>reactive</code> API 可以对对象和数组这样的复杂类型完成监听，但对于字符串、数组或布尔值这样的基本类型，它是无能为力的。因为 Proxy 不能监听这种基本类型。因此，我们需要对它进行一层包裹：先将它包裹到一个对象中，然后通过 <code>a.value</code> 来访问实际的值（这实际上是 Vue3 目前仍在致力于解决的问题之一）。</p>
<p>下面，我们将以惊人的效率实现 <code>ref</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ref</span> (value) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">reactive</span>(&#123; <span class="attr">value</span>: value &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式非常简单直接，并且能够完美地运行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> b;</span><br><span class="line"></span><br><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  b = a.<span class="property">value</span> * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">expect</span>(b).<span class="title function_">toEqual</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">a.<span class="property">value</span> = <span class="number">100</span>;</span><br><span class="line"><span class="title function_">expect</span>(b).<span class="title function_">toEqual</span>(<span class="number">200</span>);</span><br></pre></td></tr></table></figure>

<p>当然，实际上 Vue3 不是这么干的：它实现了一个 <code>RefImpl</code> 类，并且与 <code>reactive</code> 类似地，通过 getter 与 setter 完成对 value 的追踪。</p>
<h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><p>计算属性 (<code>computed</code>) 是经典的 Vue.js API，它能够接受一个 getter 函数，并且返回一个实时更新的值。</p>
<h4 id="仅-getter"><a href="#仅-getter" class="headerlink" title="仅 getter"></a>仅 getter</h4><p>我们先来实现一个最常见的版本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">computed</span> (getter) &#123;</span><br><span class="line">   <span class="comment">// 计算属性返回的是一个 ref</span></span><br><span class="line">   <span class="keyword">let</span> result = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br><span class="line">   <span class="comment">// 调用 getter 函数，更新 ref 的值</span></span><br><span class="line">   <span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      result.<span class="property">value</span> = <span class="title function_">getter</span>();</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个只包含 getter 函数的计算属性，它可以这么用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> a.<span class="property">value</span> + <span class="number">1</span>);</span><br><span class="line"><span class="title function_">expect</span>(b.<span class="property">value</span>).<span class="title function_">toEqual</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">a.<span class="property">value</span> = <span class="number">100</span>;</span><br><span class="line"><span class="title function_">expect</span>(b.<span class="property">value</span>).<span class="title function_">toEqual</span>(<span class="number">101</span>);</span><br><span class="line"></span><br><span class="line">a.<span class="property">value</span> = <span class="number">300</span>;</span><br><span class="line"><span class="title function_">expect</span>(b.<span class="property">value</span>).<span class="title function_">toEqual</span>(<span class="number">301</span>);</span><br></pre></td></tr></table></figure>

<h4 id="getter-setter"><a href="#getter-setter" class="headerlink" title="getter &amp; setter"></a>getter &amp; setter</h4><p>复杂的计算属性可以同时拥有 getter 和 setter：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="title function_">computed</span>(&#123; <span class="attr">get</span>: <span class="function">() =&gt;</span> a.<span class="property">value</span> + <span class="number">1</span>, <span class="attr">set</span>: <span class="function">(<span class="params">val</span>) =&gt;</span> a.<span class="property">value</span> = val - <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure>

<p>为了优雅起见，我们先对 computed 内部的函数做一下封装，首先是 getterEffect，它与上面的实现一样，接受一个 ref 与一个 effect 函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getterEff</span> (computedRef, eff) &#123;</span><br><span class="line">  <span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    computedRef.<span class="property">value</span> = <span class="title function_">eff</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后是 setterEffect：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setterEff</span> (computedRef, eff) &#123;</span><br><span class="line">  <span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">eff</span>(computedRef.<span class="property">value</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与 getterEffect 不同的是，setter 是将 ref 值作为参数传入到 effect 函数内，而 getterEffect 是将 effect 函数的返回赋值给 ref。</p>
<p>最后，我们就可以得到完整的 <code>computed</code> 函数了：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">computed</span> (eff) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> eff === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 这是一个简单的 getter 函数</span></span><br><span class="line">    <span class="title function_">getterEff</span>(result, eff);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 同时传入了 getter 和 setter</span></span><br><span class="line">    <span class="title function_">getterEff</span>(result, eff.<span class="property">get</span>);</span><br><span class="line">    <span class="title function_">setterEff</span>(result, eff.<span class="property">set</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>除了经典的 <code>watch</code> API 以外，Vue3 还带来了一个新的 <code>watchEffect</code> API。与 <code>watch</code> 不同的是，它可以：</p>
<blockquote>
<p>立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行。</p>
</blockquote>
<p>也就是说，<code>watchEffect</code> 无需指定它监听的值，可以完成自动的追踪，且会立即执行。</p>
<p>然而在实现这两个 API 之前，需要先对 ReactiveEffect 做一点小小的扩展改造。</p>
<h4 id="effect-改造-允许停止运行"><a href="#effect-改造-允许停止运行" class="headerlink" title="effect 改造 - 允许停止运行"></a>effect 改造 - 允许停止运行</h4><p>Vue3 的 watch&#x2F;watchEffect API 会返回一个 stop 函数，该函数可以将侦听器停止，停止后即不再自动触发。而我们目前的 ReactiveEffect 尚不支持停止。因此我们需要给它加一个 <code>stop</code> 函数。</p>
<p>想要停止一个 effect，我们需要做的事情就是把它从所有的 dep 中移除，这样一来 effect 就不能被 dep 触发了。比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> deps <span class="keyword">of</span> depsMap) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> dep <span class="keyword">of</span> deps) &#123;</span><br><span class="line">    dep.<span class="title function_">untrack</span>(thisEffect);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，这样做有几个问题：</p>
<ol>
<li>太过暴力，性能堪忧；</li>
<li>由于 Vue3 实际上在第一层使用了 WeakMap，而 WeakMap 是不支持遍历的。</li>
</ol>
<p>因此，我们需要对 ReactiveEffect 做一些改造，将这些相关的 dep 存下来。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ReactiveEffect</span> &#123;</span><br><span class="line">   <span class="title function_">constructor</span> (fn) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fn</span> = fn;</span><br><span class="line">      <span class="comment">// 新增一个 deps Set，表示所有与本 effect 相关的依赖</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">deps</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">      <span class="comment">// 新增一个 active 属性，表示是否已停止</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">active</span> = <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   run () &#123;</span><br><span class="line">      <span class="comment">// effect 已经停止了，无需再收集依赖。</span></span><br><span class="line">      <span class="comment">// 但既然 run 被调用了，还是运行并返回一下吧！</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">active</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">fn</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 与之前一样</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 新增的 stop 函数，用来停止 effect</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   stop () &#123;</span><br><span class="line">      <span class="comment">// 将 active 设置为 false，表示已停止</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">active</span> = <span class="literal">false</span>;</span><br><span class="line">      <span class="comment">// 将本 effect 实例从所有 deps 中移除</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> dep <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">deps</span>) &#123;</span><br><span class="line">         dep.<span class="title function_">untrack</span>(<span class="variable language_">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 清空 deps</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">deps</span>.<span class="title function_">clear</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时，我们需要在追踪依赖时，将依赖添加到 effect 的 deps 中（双向追踪）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">track</span> (target, prop) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!currentEffect) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> dep = <span class="title function_">getDep</span>(target, prop);</span><br><span class="line">  dep.<span class="title function_">track</span>(currentEffect);</span><br><span class="line">  <span class="comment">// 新增！将 dep 也添加到 currentEffect 的 deps 中</span></span><br><span class="line">  currentEffect.<span class="property">deps</span>.<span class="title function_">add</span>(dep);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h4><p>加入 stop 函数后，watchEffect 实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">watchEffect</span> = (<span class="params">cb</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">let</span> e = <span class="title function_">effect</span>(cb);</span><br><span class="line">   <span class="comment">// 注意这里要 bind(e)，否则 this 指针会错乱</span></span><br><span class="line">   <span class="keyword">return</span> e.<span class="property">stop</span>.<span class="title function_">bind</span>(e);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>非常地“水到渠成”！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">let</span> stop = <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  b.<span class="property">value</span> = a.<span class="property">value</span> * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">expect</span>(b.<span class="property">value</span>).<span class="title function_">toEqual</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">a.<span class="property">value</span> = <span class="number">100</span>;</span><br><span class="line"><span class="title function_">expect</span>(b.<span class="property">value</span>).<span class="title function_">toEqual</span>(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用停止函数，后续 a.value 再变化时，函数将不再执行</span></span><br><span class="line"><span class="title function_">stop</span>();</span><br></pre></td></tr></table></figure>

<h4 id="effect-改造-加入-scheduler"><a href="#effect-改造-加入-scheduler" class="headerlink" title="effect 改造 - 加入 scheduler"></a>effect 改造 - 加入 scheduler</h4><p>与 watchEffect 不同的是，watch 有更多特性：</p>
<ol>
<li>watch 方法接收两个参数：source 和 callback，分别代表监听的对象和 effect 函数；</li>
<li>effect 函数接收两个参数，value 和 oldValue，分别代表新的值和变化后的值；</li>
<li>初次定义时，effect 函数不会运行；</li>
<li>只有 source 的改变才能触发 effect。</li>
</ol>
<p>为了实现第 3&amp;4 点，我们需要给 ReactiveEffect 加入一个 scheduler 的概念：它将决定 <code>run</code> 函数何时执行。</p>
<p>首先我们需要修改一下 Dep 类：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">  <span class="comment">// 同上...</span></span><br><span class="line"></span><br><span class="line">  trigger () &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> e <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">_effects</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (e.<span class="property">scheduler</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果存在 scheduler，则执行 scheduler</span></span><br><span class="line">        e.<span class="title function_">scheduler</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则直接 run</span></span><br><span class="line">        e.<span class="title function_">run</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后修改 effect：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ReactiveEffect</span> &#123;</span><br><span class="line">   <span class="title function_">constructor</span> (fn, scheduler) &#123;</span><br><span class="line">      <span class="comment">// 同上...</span></span><br><span class="line">      <span class="comment">// 但添加一个 scheduler 选项</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">scheduler</span> = scheduler;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 同上...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加了一个 scheduler 参数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">effect</span> (fn, scheduler) &#123;</span><br><span class="line">   <span class="keyword">let</span> e = <span class="keyword">new</span> <span class="title class_">ReactiveEffect</span>(fn, scheduler);</span><br><span class="line">   e.<span class="title function_">run</span>();</span><br><span class="line">   <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>OK，完成了。实际上只是添加了一个可以自由更改 run 执行时机的选项。但 scheduler 非常强大，Vue 的另一个核心功能 <code>nextTick</code> 也是基于它实现的，此处先不展开。</p>
<h4 id="watch-1"><a href="#watch-1" class="headerlink" title="watch"></a>watch</h4><p>watch 的函数重载非常多，为了简单起见，我们只实现其中一种形式：</p>
<ol>
<li>getter：函数，返回监听的值；</li>
<li>cb：回调函数</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">watch</span> (getter, cb) &#123;</span><br><span class="line">   <span class="keyword">let</span> oldValue;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> <span class="title function_">job</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 获取新值</span></span><br><span class="line">      <span class="keyword">let</span> newVal = e.<span class="title function_">run</span>();</span><br><span class="line">      <span class="comment">// 调用回调函数</span></span><br><span class="line">      <span class="title function_">cb</span>(newVal, oldValue);</span><br><span class="line">      <span class="comment">// 设置“新的旧值”</span></span><br><span class="line">      oldValue = newVal;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="comment">// 定义 effect</span></span><br><span class="line">   <span class="comment">// 注意 effect 的本体是 getter，</span></span><br><span class="line">   <span class="comment">// 也就是说只有 getter 可以触发依赖收集</span></span><br><span class="line">   <span class="comment">// 而 job 将作为 scheduler 传入</span></span><br><span class="line">   <span class="keyword">let</span> e = <span class="title function_">effect</span>(getter, job);</span><br><span class="line">   <span class="comment">// 首次运行，完成第一个旧值的获取</span></span><br><span class="line">   oldValue = e.<span class="title function_">run</span>();</span><br><span class="line">   <span class="comment">// 与 watchEffect 一样返回 stop 函数</span></span><br><span class="line">   <span class="keyword">return</span> e.<span class="property">stop</span>.<span class="title function_">bind</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，watch 函数也实现完了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="title function_">reactive</span>(&#123; <span class="attr">value</span>: <span class="number">1</span> &#125;);</span><br><span class="line"><span class="keyword">let</span> fn = jest.<span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">let</span> stop = <span class="title function_">watch</span>(<span class="function">() =&gt;</span> a.<span class="property">value</span>, fn);</span><br><span class="line"><span class="comment">// 没有初次调用</span></span><br><span class="line"><span class="title function_">expect</span>(fn).<span class="property">not</span>.<span class="title function_">toBeCalled</span>();</span><br><span class="line"></span><br><span class="line">a.<span class="property">value</span> = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 值改变后自动调用</span></span><br><span class="line"><span class="title function_">expect</span>(fn).<span class="title function_">toBeCalledWith</span>(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">stop</span>();</span><br><span class="line"></span><br><span class="line">a.<span class="property">value</span> = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 停止后，不再调用</span></span><br><span class="line"><span class="title function_">expect</span>(fn).<span class="title function_">toHaveBeenCalledTimes</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>在本节中，我们使用现成的 <code>effect</code> 与 <code>reactive</code> API 实现了 <code>ref</code> 与 <code>computed</code>，并且通过对 effect 扩展的两个功能（stop、scheduler）分别实现了 <code>watchEffect</code> 与 <code>watch</code>。</p>
<p>至此，Vue3 响应式的核心功能已全部实现完！</p>
<h2 id="响应式-UI"><a href="#响应式-UI" class="headerlink" title="响应式 UI"></a>响应式 UI</h2><p>现在既然已经实现了响应式，那么我们回到最初的问题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> col = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> s = <span class="title function_">sum</span>(col)</span><br></pre></td></tr></table></figure>

<p>我们如何将这段代码变成响应式的，或者说，是否可以更进一步，直接将它变成响应式的 UI？</p>
<pre><code class="highlight mermaid">graph LR

A[数据变更] --&gt;|自动触发| B[界面渲染]
B --&gt;|自动监听| A</code></pre>

<p>那么我们直接来定义一个（似曾相识的）组件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">App</span> = &#123;</span><br><span class="line">   <span class="comment">// 一个最原始的 render 函数，接收 ctx 参数</span></span><br><span class="line">   <span class="comment">// 返回一个 HTML 节点</span></span><br><span class="line">   render (ctx) &#123;</span><br><span class="line">      <span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">      <span class="comment">// 使用 reduce 获得累加的和</span></span><br><span class="line">      div.<span class="property">textContent</span> = ctx.<span class="property">col</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">return</span> div;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 模仿组合式 API 的 setup 函数...</span></span><br><span class="line">   setup () &#123;</span><br><span class="line">      <span class="keyword">const</span> col = <span class="title function_">reactive</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">      <span class="keyword">return</span> &#123; col &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，我们编写一个（似曾相识的） createApp 函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createApp</span> (<span class="title class_">Component</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 挂载函数</span></span><br><span class="line">      mount (root) &#123;</span><br><span class="line">         <span class="comment">// 一点兼容代码，获取挂载的根节点</span></span><br><span class="line">         <span class="keyword">let</span> rootNode = <span class="keyword">typeof</span> root === <span class="string">&#x27;string&#x27;</span> ? <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(root) : root;</span><br><span class="line">         <span class="comment">// 调用 setup 获取 context</span></span><br><span class="line">         <span class="keyword">let</span> context = <span class="title class_">Component</span>.<span class="title function_">setup</span>();</span><br><span class="line">         <span class="comment">// 每当 context 发生变化时，effect 都将自动执行</span></span><br><span class="line">         <span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            rootNode.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">let</span> node = <span class="title class_">Component</span>.<span class="title function_">render</span>(context);</span><br><span class="line">            rootNode.<span class="title function_">append</span>(node);</span><br><span class="line">         &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，我们将组件挂载到 <code>#app</code> 上：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>（当然我们还需要一个 HTML 文件）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>完成了！虽然还非常简陋，但我们已经用与 Vue 类似的方式实现了一个响应式的前端页面：当 <code>col</code> 更新时，页面上将显示新的求和值。</p>
<p>再次强调，本文使用的实现思路与 Vue 大致相同，但简化了许多。对此感兴趣的同学，欢迎阅读 <a href="https://github.com/vuejs/core">vuejs&#x2F;core</a> 源码。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>-webkit-overflow-scrolling</title>
    <url>/2019/webkit-overflow-scrolling/</url>
    <content><![CDATA[<p><code>-webkit-overflow-scrolling</code> CSS 属性可以让滚动元素在 ios 设备上获得接近原生的平滑滚动以及滚动回弹效果。</p>
<p>支持的值：</p>
<ul>
<li><code>auto</code> 普通滚动行为，当手指离开屏幕时，滚动会立即停止（默认）</li>
<li><code>touch</code> 基于动量的滚动行为，当手指离开屏幕时，滚动会根据手势强度以相应的速度持续一段时间，同时会赋予滚动回弹的效果</li>
</ul>
<span id="more"></span>

<p>一个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;scroll-touch&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        This paragraph has momentum scrolling</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;scroll-auto&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        This paragraph does not.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="number">#f5f9fa</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#eaf2f4</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.scroll-touch</span> &#123;</span></span><br><span class="line"><span class="language-css">    -webkit-<span class="attribute">overflow</span>-scrolling: touch; <span class="comment">/* Lets it scroll lazy */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.scroll-auto</span> &#123;</span></span><br><span class="line"><span class="language-css">    -webkit-<span class="attribute">overflow</span>-scrolling: auto; <span class="comment">/* Stops scrolling immediately */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是，这个属性在当容器内有 <code>position: fixed</code> 元素时会产生冲突，<code>fixed</code> 元素会在平滑滚动结束时才回到正确的位置，解决方案通常是重新整理组件树，使 <code>fixed</code> 元素不出现在滚动容器之内即可。</p>
<p>ref:</p>
<ol>
<li><a href="https://stackoverflow.com/questions/29695082/mobile-web-webkit-overflow-scrolling-touch-conflicts-with-positionfixed">https://stackoverflow.com/questions/29695082/mobile-web-webkit-overflow-scrolling-touch-conflicts-with-positionfixed</a></li>
<li><a href="https://stackoverflow.com/questions/25963491/position-fixed-and-webkit-overflow-touch-issue-ios-7">https://stackoverflow.com/questions/25963491/position-fixed-and-webkit-overflow-touch-issue-ios-7</a></li>
</ol>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack HMR Not Work in IDEA</title>
    <url>/2016/webpack-hmr-not-work-in-idea/</url>
    <content><![CDATA[<ol>
<li>goto ‘File | Settings | Appearance &amp; Behavior | System Settings’;</li>
<li>uncheck ‘Use save write’ option</li>
</ol>
<p><img src="https://static.wxsm.space/blog/48595804-414e9980-e991-11e8-9582-113c7048e340.jpg"></p>
<p>Problem solved.</p>
]]></content>
      <tags>
        <tag>webpack</tag>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Windows 中使用 Cygwin</title>
    <url>/2021/windows-idea-cygwin/</url>
    <content><![CDATA[<p>之前在 <a href="/2020/wsl-on-windows-10-and-node-js/">WSL on Windows 10</a> 中尝试了 WSL，但是几经周折最后发现问题比较多，用得有点难受。最后还是换回了 windows。</p>
<span id="more"></span>

<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://www.cygwin.com/">https://www.cygwin.com/</a></p>
<h2 id="设置-Windows-Terminal"><a href="#设置-Windows-Terminal" class="headerlink" title="设置 Windows Terminal"></a>设置 Windows Terminal</h2><p>注意，后面的 <code>C:\cygwin64</code> 换成实际安装路径。</p>
<h3 id="增加-cygwin-配置"><a href="#增加-cygwin-配置" class="headerlink" title="增加 cygwin 配置"></a>增加 cygwin 配置</h3><p><img src="/2021/windows-idea-cygwin/fc7090eae0d94fd881cf53c5b6c8b1ce.png"></p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/2021/windows-idea-cygwin/96560471a12f469db0212b2f065de6c9.png"></p>
<h2 id="设置-IDEA"><a href="#设置-IDEA" class="headerlink" title="设置 IDEA"></a>设置 IDEA</h2><h3 id="修改-Shell-path"><a href="#修改-Shell-path" class="headerlink" title="修改 Shell path"></a>修改 Shell path</h3><p>注意里面填的是 <code>C:\cygwin64\bin\env.exe CHERE_INVOKING=1 /bin/bash -l</code>，这样才能在项目目录打开终端：</p>
<p><img src="/2021/windows-idea-cygwin/7455121287654941ac9f9a935d0ccf07.png"></p>
<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p><img src="/2021/windows-idea-cygwin/b04eda3d7db64fdaaccb489f41c392a2.png"></p>
<h2 id="设置-ssh-keys"><a href="#设置-ssh-keys" class="headerlink" title="设置 ssh keys"></a>设置 ssh keys</h2><p>可以建一对新的 key pair，也可以直接使用 windows 下面建好的。</p>
<p>如果要使用 windows 的，只需将 <code>.ssh</code> 文件夹下面的内容复制到 <code>C:\cygwin64\home\user\.ssh</code> 即可。</p>
]]></content>
      <tags>
        <tag>shell</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress 更改后台字体为雅黑</title>
    <url>/2016/wordpress-change-admin-panel-font/</url>
    <content><![CDATA[<p>这个问题其实困扰了我很久。默认的后台字体实在是惨不忍睹。今天终于发现了一个很好的方案，完美解决。</p>
<p>在当前主题的 <code>functions.php</code> 中，加上如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更改后台字体为雅黑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change_admin_font</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;style type=&quot;text/css&quot;&gt;.wp-admin&#123;font-family: \&#x27;Helvetica Neue\&#x27;, Helvetica, \&#x27;Microsoft Yahei\&#x27;, \&#x27;Hiragino Sans GB\&#x27;, \&#x27;WenQuanYi Micro Hei\&#x27;, sans-serif;&#125;&lt;/style&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">add_action</span>(<span class="string">&#x27;admin_head&#x27;</span>, <span class="string">&#x27;change_admin_font&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>顺便提供一下更改 Twenty Sixteen 主题字体的代码吧，要改的地方挺多的。</p>
<span id="more"></span>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* reset font */</span></span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line">select,</span><br><span class="line"><span class="selector-tag">textarea</span>,</span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-attr">[disabled]</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-attr">[disabled]</span><span class="selector-pseudo">:focus</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;button&quot;</span>]</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;button&quot;</span>]</span><span class="selector-attr">[disabled]</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;button&quot;</span>]</span><span class="selector-attr">[disabled]</span><span class="selector-pseudo">:focus</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;reset&quot;</span>]</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;reset&quot;</span>]</span><span class="selector-attr">[disabled]</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;reset&quot;</span>]</span><span class="selector-attr">[disabled]</span><span class="selector-pseudo">:focus</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span><span class="selector-attr">[disabled]</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span><span class="selector-attr">[disabled]</span><span class="selector-pseudo">:focus</span>,</span><br><span class="line"><span class="selector-class">.post-password-form</span> <span class="selector-tag">label</span>,</span><br><span class="line"><span class="selector-class">.main-navigation</span>,</span><br><span class="line"><span class="selector-class">.post-navigation</span>,</span><br><span class="line"><span class="selector-class">.post-navigation</span> <span class="selector-class">.post-title</span>,</span><br><span class="line"><span class="selector-class">.pagination</span>,</span><br><span class="line"><span class="selector-class">.image-navigation</span>,</span><br><span class="line"><span class="selector-class">.comment-navigation</span>,</span><br><span class="line"><span class="selector-class">.site</span> <span class="selector-class">.skip-link</span>,</span><br><span class="line"><span class="selector-class">.logged-in</span> <span class="selector-class">.site</span> <span class="selector-class">.skip-link</span>,</span><br><span class="line"><span class="selector-class">.widget</span> <span class="selector-class">.widget-title</span>,</span><br><span class="line"><span class="selector-class">.widget_recent_entries</span> <span class="selector-class">.post-date</span>,</span><br><span class="line"><span class="selector-class">.widget_rss</span> <span class="selector-class">.rss-date</span>,</span><br><span class="line"><span class="selector-class">.widget_rss</span> <span class="selector-tag">cite</span>,</span><br><span class="line"><span class="selector-class">.tagcloud</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-class">.site-title</span>,</span><br><span class="line"><span class="selector-class">.entry-title</span>,</span><br><span class="line"><span class="selector-class">.entry-footer</span>,</span><br><span class="line"><span class="selector-class">.sticky-post</span>,</span><br><span class="line"><span class="selector-class">.page-title</span>,</span><br><span class="line"><span class="selector-class">.page-links</span>,</span><br><span class="line"><span class="selector-class">.comments-title</span>,</span><br><span class="line"><span class="selector-class">.comment-reply-title</span>,</span><br><span class="line"><span class="selector-class">.comment-metadata</span>,</span><br><span class="line"><span class="selector-class">.pingback</span> <span class="selector-class">.edit-link</span>,</span><br><span class="line"><span class="selector-class">.comment-reply-link</span>,</span><br><span class="line"><span class="selector-class">.comment-form</span> <span class="selector-tag">label</span>,</span><br><span class="line"><span class="selector-class">.no-comments</span>,</span><br><span class="line"><span class="selector-class">.required</span>,</span><br><span class="line"><span class="selector-class">.site-footer</span> <span class="selector-class">.site-title</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-class">.widecolumn</span> <span class="selector-tag">label</span>,</span><br><span class="line"><span class="selector-class">.widecolumn</span> <span class="selector-class">.mu_register</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, <span class="string">&#x27;Microsoft Yahei&#x27;</span>, <span class="string">&#x27;Hiragino Sans GB&#x27;</span>, <span class="string">&#x27;WenQuanYi Micro Hei&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-input-placeholder &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, <span class="string">&#x27;Microsoft Yahei&#x27;</span>, <span class="string">&#x27;Hiragino Sans GB&#x27;</span>, <span class="string">&#x27;WenQuanYi Micro Hei&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:-moz-placeholder &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, <span class="string">&#x27;Microsoft Yahei&#x27;</span>, <span class="string">&#x27;Hiragino Sans GB&#x27;</span>, <span class="string">&#x27;WenQuanYi Micro Hei&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-moz-placeholder &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, <span class="string">&#x27;Microsoft Yahei&#x27;</span>, <span class="string">&#x27;Hiragino Sans GB&#x27;</span>, <span class="string">&#x27;WenQuanYi Micro Hei&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:-ms-input-placeholder &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, <span class="string">&#x27;Microsoft Yahei&#x27;</span>, <span class="string">&#x27;Hiragino Sans GB&#x27;</span>, <span class="string">&#x27;WenQuanYi Micro Hei&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
]]></content>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress 文章归档页面实现</title>
    <url>/2016/wordpress-archives-page-implementation/</url>
    <content><![CDATA[<p>归档页就是一个包含站点所有已发布文章的列表页面，通常默认会根据发布时间来进行排序，然后可能会有一些分页排序页内搜索等功能。实现这个功能可以用Wordpress插件，当然也可以自己写代码，我一开始就是用了一款插件，觉得实现了功能还不错就没管它。后来想要做一些自定义的修改，比如插件是按月份分组然而我想改成年份，就稍微看了看它的代码。一看不得了，莫名地有一种总算见识到了什么叫又烂又臭的代码的感觉涌上心头，做了这么多年伸手党总算是被恶心到了，简直不能忍，于是琢磨着自己写一个简单的模板页，不用它了。</p>
<span id="more"></span>

<h2 id="吐槽区"><a href="#吐槽区" class="headerlink" title="吐槽区"></a>吐槽区</h2><p>首先来说说为什么这个插件的代码<strong>又烂又臭</strong>，在后面我再对它进行针对性的改进。哦对了它的名字叫<strong>Clean Archives Reloaded</strong>，作者叫<strong>Viper007Bond</strong>，来自美国俄勒冈州，没错就是点名批评，看来鬼佬的编码水平也不是普遍的高啊，这坨屎简直是开源界的耻辱。去到各搜索引擎搜索“Wordpress归档”关键字还有很多文章推荐使用该插件，看来大家都不太关心代码质量，只要能用就行。 该插件的主要设计思路如下：</p>
<ol>
<li>从WP数据库中抓取文章</li>
<li>根据用户配置分组并排序</li>
<li>组织并输出HTML到页面相关位置</li>
</ol>
<p>OK，就这么三步，实际上我们也只需要这么点东西。暂且不讨论步骤是否可以简化，我们先来看看它有着怎样的内心世界。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A direct query is used instead of get_posts() for memory reasons</span></span><br><span class="line"><span class="variable">$rawposts</span> = <span class="variable">$wpdb</span>-&gt;<span class="title function_ invoke__">get_results</span>( <span class="string">&quot;SELECT ID, post_date, post_date_gmt, comment_status, comment_count FROM <span class="subst">$wpdb</span>-&gt;posts WHERE post_status = &#x27;publish&#x27; AND post_type = &#x27;post&#x27; AND post_password = &#x27;&#x27;&quot;</span> );</span><br></pre></td></tr></table></figure>

<p>这个是它的唯一一条SQL语句，可以看到作者为了给我们节省内存真是殚精竭力，本着够用就行的精神，放弃使用Wordpress自带的API，直接使用查询语句从数据库中查询出来了非常有限的一些字段。值得称赞。 按照插件的思路，紧接着就是分组啦：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Loop through each post and sort it into a structured array</span></span><br><span class="line"><span class="keyword">foreach</span>( <span class="variable">$rawposts</span> <span class="keyword">as</span> <span class="variable">$post</span> ) &#123;</span><br><span class="line">	<span class="variable">$posts</span>[ <span class="title function_ invoke__">mysql2date</span>( <span class="string">&#x27;Y.m&#x27;</span>, <span class="variable">$post</span>-&gt;post_date ) ][] = <span class="variable">$post</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$rawposts</span> = <span class="literal">null</span>; <span class="comment">// More memory cleanup</span></span><br></pre></td></tr></table></figure>

<p>排序啦：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">( <span class="string">&#x27;new&#x27;</span> == <span class="variable">$atts</span>[<span class="string">&#x27;monthorder&#x27;</span>] ) ? <span class="title function_ invoke__">krsort</span>( <span class="variable">$posts</span> ) : <span class="title function_ invoke__">ksort</span>( <span class="variable">$posts</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sort the posts within each month based on $atts</span></span><br><span class="line"><span class="keyword">foreach</span>( <span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$month</span> ) &#123;</span><br><span class="line">    <span class="variable">$sorter</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">foreach</span> ( <span class="variable">$month</span> <span class="keyword">as</span> <span class="variable">$post</span> )</span><br><span class="line">        <span class="variable">$sorter</span>[] = <span class="variable">$post</span>-&gt;post_date_gmt;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sortorder</span> = ( <span class="string">&#x27;new&#x27;</span> == <span class="variable">$atts</span>[<span class="string">&#x27;postorder&#x27;</span>] ) ? SORT_DESC : SORT_ASC;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">array_multisort</span>( <span class="variable">$sorter</span>, <span class="variable">$sortorder</span>, <span class="variable">$month</span> );</span><br><span class="line"></span><br><span class="line">    <span class="variable">$posts</span>[<span class="variable">$key</span>] = <span class="variable">$month</span>;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$month</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分组的思路就是根据一篇文章的年以及月来将原本的一维数组重新组织到一个新的二维数组中去，以方便后面的循环。排序有点复杂，首先大局上它是能够根据配置按月份从新到旧或者反方向的排序，然后在每个月份里面也能够根据配置从新到旧或者反方向的排序，这个设定简直蛋疼，谁这么无聊正着排一遍在里面反着又排一遍，即折磨自己又折磨读者，不过存在即合理，这里也不说它。**我想吐槽的是，既然你都把SQL写出来了，你也知道至少要排一次序了，又何必费尽周章在查出来以后排呢，我们直接在SQL里面排不比这一大串代码优雅吗？不快速吗？不节省内存吗？此外，这个分组也是萌萌哒，我们就不能在SQL里面先把组给分好吗，非要写个循环来调用 **<code>mysql2date</code>，这样真的好吗？当然如果作者没有学过 <code>ORDER BY</code>，也不知道SQL都有各自的内置日期函数，这些也就算了。我们接着往下看。 接下来的步骤是组织HTML：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Generate the HTML</span></span><br><span class="line"><span class="variable">$html</span> = <span class="string">&#x27;&lt;div class=&quot;car-container&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> ( <span class="number">1</span> == <span class="variable">$atts</span>[<span class="string">&#x27;usejs&#x27;</span>] ) <span class="variable">$html</span> .= <span class="string">&#x27; car-collapse&#x27;</span>;</span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&#x27;&quot;&gt;&#x27;</span>. <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处省略n行</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;/ul&gt;\n&lt;/div&gt;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$html</span>;</span><br></pre></td></tr></table></figure>

<p>看到这里我已经瞎了。。。尤其是高亮的那一行。。。省略的N行中充斥着的都是如此的代码。它还不止有 <code>. &quot;\n&quot;</code> 之流，在省略的内容中甚至连HTML的编码器缩进作者都保留得很好很好。WTF？？这TM都是些什么鬼？？作者的这些杠N和缩进是写给鬼看的吗？？？字符串拼凑各种内容这种事我自己不懂事的时候也干过不少也就不说了，但这作者这一种原汁原味的拼法真是我有屎以来见过的最特立独行的行为艺术。</p>
<p>让我们接着来看生成HTML之中的一部分核心代码。显然其中会有一些循环用来生成列表，并且在每个内层循环之前应该输出一个标题之类的东西用来指示以下的内容属于哪一年哪一个月。代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$firstmonth</span> = <span class="literal">TRUE</span>;</span><br><span class="line"><span class="keyword">foreach</span>( <span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$yearmonth</span> =&gt; <span class="variable">$posts</span> ) &#123;</span><br><span class="line">    <span class="keyword">list</span>( <span class="variable">$year</span>, <span class="variable">$month</span> ) = <span class="title function_ invoke__">explode</span>( <span class="string">&#x27;.&#x27;</span>, <span class="variable">$yearmonth</span> );</span><br><span class="line"></span><br><span class="line">    <span class="variable">$firstpost</span> = <span class="literal">TRUE</span>;</span><br><span class="line">    <span class="keyword">foreach</span>( <span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span> ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="literal">TRUE</span> == <span class="variable">$firstpost</span> ) &#123;</span><br><span class="line">            <span class="variable">$html</span> .= <span class="string">&#x27;	&lt;li&gt;&lt;span class=&quot;car-yearmonth&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">sprintf</span>( <span class="title function_ invoke__">__</span>(<span class="string">&#x27;%1$s %2$d&#x27;</span>), <span class="variable">$wp_locale</span>-&gt;<span class="title function_ invoke__">get_month</span>(<span class="variable">$month</span>), <span class="variable">$year</span> );</span><br><span class="line">            <span class="keyword">if</span> ( <span class="string">&#x27;0&#x27;</span> != <span class="variable">$atts</span>[<span class="string">&#x27;postcount&#x27;</span>] ) <span class="variable">$html</span> .= <span class="string">&#x27; &lt;span title=&quot;&#x27;</span> . <span class="title function_ invoke__">__</span>(<span class="string">&#x27;Post Count&#x27;</span>, <span class="string">&#x27;clean-archives-reloaded&#x27;</span>) . <span class="string">&#x27;&quot;&gt;(&#x27;</span> . <span class="title function_ invoke__">count</span>(<span class="variable">$posts</span>) . <span class="string">&#x27;)&lt;/span&gt;&#x27;</span>;</span><br><span class="line">            <span class="variable">$html</span> .= <span class="string">&quot;&lt;/span&gt;\n		&lt;ul class=&#x27;car-monthlisting&#x27;&gt;\n&quot;</span>;</span><br><span class="line">            <span class="variable">$firstpost</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$html</span> .= <span class="string">&#x27;			&lt;li&gt;&#x27;</span> .  <span class="title function_ invoke__">mysql2date</span>( <span class="string">&#x27;d&#x27;</span>, <span class="variable">$post</span>-&gt;post_date ) . <span class="string">&#x27;: &lt;a href=&quot;&#x27;</span> . <span class="title function_ invoke__">get_permalink</span>( <span class="variable">$post</span>-&gt;ID ) . <span class="string">&#x27;&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">get_the_title</span>( <span class="variable">$post</span>-&gt;ID ) . <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Unless comments are closed and there are no comments, show the comment count</span></span><br><span class="line">        <span class="keyword">if</span> ( <span class="string">&#x27;0&#x27;</span> != <span class="variable">$atts</span>[<span class="string">&#x27;commentcount&#x27;</span>] &amp;&amp; ( <span class="number">0</span> != <span class="variable">$post</span>-&gt;comment_count || <span class="string">&#x27;closed&#x27;</span> != <span class="variable">$post</span>-&gt;comment_status ) )</span><br><span class="line">            <span class="variable">$html</span> .= <span class="string">&#x27; &lt;span title=&quot;&#x27;</span> . <span class="title function_ invoke__">__</span>(<span class="string">&#x27;Comment Count&#x27;</span>, <span class="string">&#x27;clean-archives-reloaded&#x27;</span>) . <span class="string">&#x27;&quot;&gt;(&#x27;</span> . <span class="variable">$post</span>-&gt;comment_count . <span class="string">&#x27;)&lt;/span&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$html</span> .= <span class="string">&quot;&lt;/li&gt;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$html</span> .= <span class="string">&quot;		&lt;/ul&gt;\n	&lt;/li&gt;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第5-12行代码，第一眼看到的时候马上就能闻到一股弱者的气息。<strong>作者想要在循环开始之前先输出一个列表标题，所以想到了一个使用标志位的办法，但是我们明明可以直接在循环前面做这件事的，根本不需要这个萌萌哒标志位。</strong></p>
<p>还有第14行。作者明明一直在标榜自己是如何节省时间节省内存的，结果在这里却使用了内置函数 <code>get_the_title</code> 以及 <code>get_permalink</code>，后者很正常，因为 wordpress 的文章链接是可以改变的，不能直接写死，必须查，那前者这个函数是做什么的呢？很明显，根据一篇文章的 ID 来获取它的标题。要如何根据 ID 来获取标题呢，我们能用算法算出来吗？显然不能，这里面显然需要一次数据库查询，至少也是一次缓存查询，而且它这个函数写在循环里面，我的天，这里面是多少条 SQL，你直接在一开始把 Title 也给查出来不就万事大吉了吗。。。</p>
<p>插件的核心功能大概就到此为止，为了实现让用户可以点击收起与展开每个内层列表的功能，作者还添加了一些 JavaScript 代码，就不吐槽了吧，我已经好累了。</p>
<h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>赶紧把这插件删了，删个干净，然后我们来改代码。因为我并不需要配置什么什么的，也不需要什么JS，怎么个分组怎么个排序的需求很明确，所以直接 HARD CODE。原插件还有一个缓存查询出来的数据的功能，由于我已经用了更强大的缓存，直接将动态页面缓存成纯 HTML，所以也不需要。以上内容通通砍掉，核心代码就很简单了。 首先是 SQL 查询：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">global</span> <span class="variable">$wpdb</span>;</span><br><span class="line"><span class="variable">$rawposts</span> = <span class="variable">$wpdb</span>-&gt;<span class="title function_ invoke__">get_results</span>(<span class="string">&quot;SELECT ID, year(post_date) as post_year, post_date, post_date_gmt, post_title FROM <span class="subst">$wpdb</span>-&gt;posts WHERE post_status = &#x27;publish&#x27; AND post_type = &#x27;post&#x27; AND post_password = &#x27;&#x27; order by post_date_gmt desc&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这里按照发布时间降序排序，为什么要用GMT时间而不直接用本地时间呢，我猜可能是为了防止我在这边发了一篇文章然后马上飞到美国又发一篇，可能会乱套吧，反正这么写更严谨，虽然不太可能发生。然后除了多选择一个post_title字段以外，还使用MySQL的一个内置函数选择了这篇文章发布时的年度，这样就不用在分组的时候使用N多遍 <code>mysql2date</code> 函数了。节省了大量步骤。 然后是分组：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$rawposts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">    <span class="variable">$posts</span>[<span class="variable">$post</span>-&gt;post_year][] = <span class="variable">$post</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$rawposts</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>然后是HTML部分：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$html</span> = <span class="string">&#x27;&lt;div class=&quot;archives-container&quot;&gt;&lt;ul class=&quot;archives-list&quot;&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$year</span> =&gt; <span class="variable">$posts_yearly</span>) &#123;</span><br><span class="line">    <span class="variable">$html</span> .= <span class="string">&#x27;&lt;li&gt;&lt;div class=&quot;archives-year&quot;&gt;&#x27;</span> . <span class="variable">$year</span> . <span class="string">&#x27;年&lt;/div&gt;&lt;ul class=&quot;archives-sublist&quot;&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$posts_yearly</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">        <span class="variable">$html</span> .= <span class="string">&#x27;&lt;li&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$html</span> .= <span class="string">&#x27;&lt;time datetime=&quot;&#x27;</span> . <span class="variable">$post</span>-&gt;post_date . <span class="string">&#x27;&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">mysql2date</span>(<span class="string">&#x27;m月d日 D&#x27;</span>, <span class="variable">$post</span>-&gt;post_date, <span class="literal">true</span>) . <span class="string">&#x27;&lt;/time&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$html</span> .= <span class="string">&#x27;&lt;a href=&quot;&#x27;</span> . <span class="title function_ invoke__">get_permalink</span>(<span class="variable">$post</span>-&gt;ID) . <span class="string">&#x27;&quot;&gt;&#x27;</span> . <span class="variable">$post</span>-&gt;post_title . <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$html</span> .= <span class="string">&quot;&lt;/li&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$html</span> .= <span class="string">&quot;&lt;/ul&gt;&lt;/li&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;/ul&gt;&lt;/div&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$html</span>;</span><br></pre></td></tr></table></figure>

<p>两个字：简洁。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>我们复制一份主题目录下的 <code>page.php</code> 文件，然后重命名为 <code>template-archives.php</code>，主要是给它加上以上的代码并且调用之。 对于我正在使用的主题来说，文件内容如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Template Name: archives</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_PostList</span>(<span class="params"><span class="variable">$atts</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$wpdb</span>;</span><br><span class="line">    <span class="variable">$rawposts</span> = <span class="variable">$wpdb</span>-&gt;<span class="title function_ invoke__">get_results</span>(<span class="string">&quot;SELECT ID, year(post_date) as post_year, post_date, post_title FROM <span class="subst">$wpdb</span>-&gt;posts WHERE post_status = &#x27;publish&#x27; AND post_type = &#x27;post&#x27; AND post_password = &#x27;&#x27; order by post_date desc&quot;</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$rawposts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">        <span class="variable">$posts</span>[<span class="variable">$post</span>-&gt;post_year][] = <span class="variable">$post</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$rawposts</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable">$html</span> = <span class="string">&#x27;&lt;div class=&quot;archives-container&quot;&gt;&lt;ul class=&quot;archives-list&quot;&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$year</span> =&gt; <span class="variable">$posts_yearly</span>) &#123;</span><br><span class="line">        <span class="variable">$html</span> .= <span class="string">&#x27;&lt;li&gt;&lt;div class=&quot;archives-year&quot;&gt;&#x27;</span> . <span class="variable">$year</span> . <span class="string">&#x27;年&lt;/div&gt;&lt;ul class=&quot;archives-sublist&quot;&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$posts_yearly</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">            <span class="variable">$html</span> .= <span class="string">&#x27;&lt;li&gt;&#x27;</span>;</span><br><span class="line">            <span class="variable">$html</span> .= <span class="string">&#x27;&lt;time datetime=&quot;&#x27;</span> . <span class="variable">$post</span>-&gt;post_date . <span class="string">&#x27;&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">mysql2date</span>(<span class="string">&#x27;m月d日 D&#x27;</span>, <span class="variable">$post</span>-&gt;post_date, <span class="literal">true</span>) . <span class="string">&#x27;&lt;/time&gt;&#x27;</span>;</span><br><span class="line">            <span class="variable">$html</span> .= <span class="string">&#x27;&lt;a href=&quot;&#x27;</span> . <span class="title function_ invoke__">get_permalink</span>(<span class="variable">$post</span>-&gt;ID) . <span class="string">&#x27;&quot;&gt;&#x27;</span> . <span class="variable">$post</span>-&gt;post_title . <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">            <span class="variable">$html</span> .= <span class="string">&quot;&lt;/li&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$html</span> .= <span class="string">&quot;&lt;/ul&gt;&lt;/li&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$html</span> .= <span class="string">&quot;&lt;/ul&gt;&lt;/div&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$html</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_PostCount</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$num_posts</span> = <span class="title function_ invoke__">wp_count_posts</span>(<span class="string">&#x27;post&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">number_format_i18n</span>(<span class="variable">$num_posts</span>-&gt;publish);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">get_header</span>(); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;div id=<span class="string">&quot;primary&quot;</span> <span class="class"><span class="keyword">class</span>=&quot;<span class="title">content</span>-<span class="title">area</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">main</span> <span class="title">id</span>=&quot;<span class="title">main</span>&quot; <span class="title">class</span>=&quot;<span class="title">site</span>-<span class="title">main</span>&quot; <span class="title">role</span>=&quot;<span class="title">main</span>&quot;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">            &lt;<span class="title">article</span> &lt;?<span class="title">php</span> <span class="title">post_class</span>(); ?&gt;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">header</span> <span class="title">class</span>=&quot;<span class="title">entry</span>-<span class="title">header</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">h1</span> <span class="title">class</span>=&quot;<span class="title">entry</span>-<span class="title">title</span>&quot;&gt;&lt;?<span class="title">php</span> <span class="title">the_title</span>(); ?&gt;&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">header</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;!-- .<span class="title">entry</span>-<span class="title">header</span> --&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">                &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">entry</span>-<span class="title">content</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">                    <span class="title">echo</span> <span class="title">_PostList</span>();</span></span><br><span class="line"><span class="class">                    ?&gt;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;!-- .<span class="title">entry</span>-<span class="title">content</span> --&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">article</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;!-- #<span class="title">post</span>-## --&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        &lt;/<span class="title">main</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;!-- #<span class="title">main</span> --&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;!-- #<span class="title">primary</span> --&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span> <span class="title">get_sidebar</span>(); ?&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span> <span class="title">get_footer</span>(); ?&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后我们把它上传到主机的主题目录下，来到wordpress管理控制台新建一个page，模板选择 <code>archives</code>，什么也不用输入（可以加个标题），保存，就可以看到效果了。当然这里没有涉及到CSS样式，可以在主题的 <code>style.css</code> 中自定义，也可以直接写在 <code>template-archives.php</code> 内，爱写哪写哪。本站使用的CSS如下所示：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.archives-year</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#777</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#e8e8e8</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">40px</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">7px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.archives-list</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span><span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.archives-sublist</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">90%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.archives-sublist</span> <span class="selector-tag">li</span> <span class="selector-tag">time</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#777</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">140px</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">140px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">140px</span>;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.archives-sublist</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://anubarak.com/archives/">点此查看实际效果</a> （可能因为网站更新而不符合）</p>
]]></content>
      <tags>
        <tag>php</tag>
        <tag>wordpress</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress 掉坑记录</title>
    <url>/2016/wordpress-hole-record/</url>
    <content><![CDATA[<p>忍无可忍，长期更新。</p>
<p>（其实我很想自己重新做一个 blog，但是太麻烦，也没什么实践价值了，无非 CRUD，而且维护起来很容易忽略 blog 本身的目的所在）</p>
<span id="more"></span>

<h2 id="关于代码高亮"><a href="#关于代码高亮" class="headerlink" title="关于代码高亮"></a>关于代码高亮</h2><p>本站目前（截至 09&#x2F;20&#x2F;2016）使用的是 Crayon 插件，这个插件配合 TinyMCE Advanced 简直神了，用户的数据对它们来说都不是什么东西，反正就随着各自的意愿来搞。其实这样还好，关键是，他俩意愿不一致。这 TM 就很尴尬了。以至于我很多文章，编辑再保存以后，格式出现各式各样的问题。</p>
<p>最终解决方案：</p>
<ol>
<li>禁用 TinyMCE Advanced 的 keep <code>p</code> &amp; <code>br</code> 功能；</li>
<li>禁用 Crayon 的所有其它扫描功能，只保留 <code>pre</code> 扫描，即只保留块级代码高亮，同时禁用移除 <code>code</code> 标签的相关功能；</li>
<li>关于行内代码的解决继续看下面。</li>
</ol>
<p>那么行内代码怎么办呢。这个 Crayon 太奇葩，如果用它自带的工具插入行内标签（原始是 <code>span</code>），会被它自己扫描出来认为是过时标签，然后强行转为 <code>pre</code>，关键是这一转它自己认得倒还好，然而 TinyMCE 不认为它仍然是行内元素，强行给它换行，套 <code>p</code> 元素。</p>
<p>然后文章的格式就完了，而且是全完。</p>
<p>所以，解决办法是，不要使用 Crayon 的行内模式，也不要让它扫描行内代码，直接使用 <code>code</code> 标签，然后去改 style，改得跟块级代码差不多就行了。</p>
<p>注：写完这些我就把 Crayon 这插件给删了。一个乱搞用户数据库，而且不用标准标签的东西，不要也罢。就直接用 <code>code</code> 和 <code>pre</code>，还方便以后向其它平台转移。</p>
]]></content>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress 在阿里云虚拟主机下无法发送邮件</title>
    <url>/2016/wordpress-unable-to-send-email-under-aliyun-virtual-host/</url>
    <content><![CDATA[<p>安装在阿里云虚拟主机环境下的Wordpress死活都发不出邮件，用户注册的邮件发不出，评论总结也发不出，等等等等，尝试了各种方法都以失败告终。今天用更改代码+SMTP插件终于试成功了，以下是解决方案。</p>
<span id="more"></span>

<h2 id="更改主机设置"><a href="#更改主机设置" class="headerlink" title="更改主机设置"></a>更改主机设置</h2><p>首先阿里云虚拟主机发邮件相关的函数只开放了一个，即 <code>fsockopen</code>，默认情况下还是禁用的，所以我们要去控制台打开它（主机管理 ⇒ 站点信息 ⇒ 高级环境设置 ⇒ PHP.ini设置）。如图所示。</p>
<p><img src="https://static.wxsm.space/blog/48595792-3e53a900-e991-11e8-9513-b8e2070d461e.jpg"></p>
<h2 id="更改Wordpress代码"><a href="#更改Wordpress代码" class="headerlink" title="更改Wordpress代码"></a>更改Wordpress代码</h2><p>找到代码安装路径下的 <code>wp-includes/class-smtp.php</code> 文件，搜索以下代码段：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;smtp_conn = @<span class="title function_ invoke__">stream_socket_client</span>(</span><br><span class="line">    <span class="variable">$host</span> . <span class="string">&quot;:&quot;</span> . <span class="variable">$port</span>,</span><br><span class="line">    <span class="variable">$errno</span>,</span><br><span class="line">    <span class="variable">$errstr</span>,</span><br><span class="line">    <span class="variable">$timeout</span>,</span><br><span class="line">    STREAM_CLIENT_CONNECT,</span><br><span class="line">    <span class="variable">$socket_context</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>将其<strong>替换</strong>成：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;smtp_conn = <span class="title function_ invoke__">fsockopen</span>(<span class="variable">$host</span>, <span class="variable">$port</span>, <span class="variable">$errno</span>, <span class="variable">$errstr</span>);</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：升级Wordpress可能会导致这段修改过的代码丢失，因此可能每次Wordpress主程序升级后都要再次修改此段代码！</p>
<h2 id="安装SMTP插件"><a href="#安装SMTP插件" class="headerlink" title="安装SMTP插件"></a>安装SMTP插件</h2><p>改完代码以后，到Wordpress控制台搜索插件<strong>Easy WP SMTP</strong>（其它类似插件应该也行，这里以它为例），安装并启用。如图所示配置好。</p>
<p><img src="https://static.wxsm.space/blog/48595793-3eec3f80-e991-11e8-800e-e4dab8c116be.jpg"></p>
<p>配置好后点击Save，保存成功后下方会有一个测试发送的表单。可以用它来测试SMTP是否已经可以正确工作。</p>
<p>如果测试邮件已经可以正常发送接收，则说明Wordpress的其它邮件也都可以正常收发了。</p>
<p>另外，本人测试过使用QQ和126的SMPT服务器，均以失败告终，原因未知。</p>
<h2 id="问题待解决"><a href="#问题待解决" class="headerlink" title="问题待解决"></a>问题待解决</h2><p>现在Wordpress主程序是可以正常发邮件了，但是<strong>BackWPup</strong>插件的邮件依然是完全发不出去，使用它提供的所有方式都不行，使用同样的SMTP配置也是不行，它也没有提供什么有用的错误信息，完全摸不着头脑。</p>
<p>为什么需要这个插件发邮件呢。因为它是网站的备份主力，但是因为邮件发不出去的关系，不能通过邮件发送备份，只能备份到主机的文件夹下。这样就很没安全感了，要完蛋都是一锅端的感觉，有无备份没什么区别。它提供的其它方案也好像都被墙了，比如Dropbox什么的。</p>
<p>这个问题待解决。</p>
]]></content>
      <tags>
        <tag>php</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL on Windows 10 and Node.js</title>
    <url>/2020/wsl-on-windows-10-and-node-js/</url>
    <content><![CDATA[<p>Linux 的命令行与构建工具一般来说要比 Windows 好用，但 Windows 的用户界面毫无疑问要比 Linux 好用。以往在 Windows 10 上安装 Linux，要么是使用虚拟机，要么是使用双系统，总是无法做到两头兼顾。现在 Windows 10 有了 WSL 技术，使得「二者合一」成为了可能。</p>
<span id="more"></span>

<h2 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>关于如何安装 WSL，可以参考 <a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">适用于 Linux 的 Windows 子系统安装指南 (Windows 10)</a>，总的来说：</p>
<ol>
<li>将 Windows 10 系统版本升到最高，如果需要安装 WSL 2 则目前来说需要比高更高（体验版）；</li>
<li>在「启用或关闭 Windows 功能」中，开启「适用于 Linux 的 Windows 子系统」，如果要安装 WSL 2 还需要开启「Hyper-V」；</li>
<li>在 Windows 10 应用商店中搜索关键字「Linux」，并选择自己喜欢的发行版下载，比如我选择了「Ubuntu」；</li>
<li>下载完成后，在开始菜单中找到它，并点击，会继续安装，过程大概需要几分钟；</li>
<li>安装完成后，会提示输入 username 与 password，此即为 Linux 的用户凭据，至此 WSL 已安装完毕。</li>
</ol>
<h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>为新增加的用户赋予 root 权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/sudoers</span><br></pre></td></tr></table></figure>

<p>在：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># User privilege specification</span><br><span class="line">root	ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure>

<p>下面增加一行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username	ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure>

<p>这里的 username 即是刚才创建的用户名，<code>:wq!</code> 退出即可。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>安装完毕后，可以通过在终端输入 <code>wsl</code> 来进入已安装的 Linux 子系统。Linux 与 Windows 共享文件系统，Windows 的文件可以在 <code>/mnt</code> 下找到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls /mnt/</span><br><span class="line">c d e f</span><br></pre></td></tr></table></figure>

<p>这里的 c d e f 就分别代表 C&#x2F;D&#x2F;E&#x2F;F 盘。</p>
<p>查看发行版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Ubuntu</span><br><span class="line">Description:    Ubuntu 20.04 LTS</span><br><span class="line">Release:        20.04</span><br><span class="line">Codename:       focal</span><br></pre></td></tr></table></figure>

<h2 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h2><p>Windows 10 自带的 CommandLine 和 PowerShell 都不好用，而且丑。可以下载 Windows 新推出的 Windows Terminal，直接在 Windows 10 应用商店就能找到。</p>
<p>Github: <a href="https://github.com/Microsoft/Terminal">Microsoft&#x2F;Terminal</a></p>
<p>同样，打开 Windows Terminal 后可以输入 <code>wsl</code> 来进入 Linux 子系统。</p>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>有了 WSL 后，开发相关工具环境都不需要在 Windows 下安装了。可以直接使用 Linux 内的程序。以 Git 为例：</p>
<ol>
<li>打开 <code>C:\Users\[username]\AppData\Roaming\</code>；</li>
<li>在这里新建一个 <code>bin</code> 文件夹；</li>
<li>在文件夹内新建一个 <code>git.cmd</code> 文件，输入内容： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">%WINDIR%\System32\bash.exe -c &quot;git %*&quot;</span><br></pre></td></tr></table></figure></li>
<li>在 Path 内加入刚刚设置的文件：<code>C:\Users\[username]\AppData\Roaming\bin\git.cmd</code></li>
</ol>
<p>这样一来，就可以直接在 Windows 内访问到安装在 WSL 内的 git 了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">git version 2.25.1</span><br></pre></td></tr></table></figure>

<p>除了 git 以外，其它程序也都可以如法炮制。</p>
<h3 id="SSH-Key"><a href="#SSH-Key" class="headerlink" title="SSH Key"></a>SSH Key</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;username&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br><span class="line">$ ssh-keygen -trsa -C &quot;email@example.com&quot;</span><br><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>如此可以得到公钥。</p>
<h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>使用 <code>apt get</code> 之前，先替换一下镜像源：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"># 将文件内容替换为以下：</span><br><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"># 预发布软件源，不建议启用</span><br><span class="line"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>

<p>这里使用的是 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">清华大学镜像源</a>。</p>
<h3 id="Node-js-NPM"><a href="#Node-js-NPM" class="headerlink" title="Node.js &amp; NPM"></a>Node.js &amp; NPM</h3><p>替换完以后，安装 Node.js 与 NPM：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get upgrade</span><br><span class="line">$ sudo apt-get install nodejs</span><br><span class="line">$ sudo apt-get install npm</span><br></pre></td></tr></table></figure>

<h3 id="n"><a href="#n" class="headerlink" title="n"></a>n</h3><p>安装 Node.js 版本管理工具 n:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo npm install -g n</span><br><span class="line"># 查看所有已安装版本</span><br><span class="line">$ n ls</span><br><span class="line"># 安装最新的 LTS 版本并切换</span><br><span class="line">$ n lts</span><br></pre></td></tr></table></figure>

<h3 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h3><p>安装 NPM 源管理工具 nrm:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo npm install -g nrm</span><br><span class="line"># 查看所有源</span><br><span class="line">$ nrm ls</span><br><span class="line"># 切换至 taobao 镜像源</span><br><span class="line">$ nrm use taobao</span><br></pre></td></tr></table></figure>

<h3 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h3><p>安装 Yarn：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo npm install -g yarn</span><br></pre></td></tr></table></figure>

<h2 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h2><p>WebStorm 可以直接与 WSL <del>完美</del>集成。</p>
<ol>
<li>Terminal: File | Settings | Tools | Terminal，将 <code>Shell path</code> 设置为 <code>&quot;cmd.exe&quot; /k &quot;wsl.exe&quot;</code>，这样 Terminal 打开就直接进入了 WSL</li>
<li>Git: File | Settings | Version Control | Git，将 <code>Path to Git excutable</code> 设置为 <code>C:\Users\[username]\AppData\Roaming\bin\git.cmd</code></li>
<li>Node.js: File | Settings | Languages &amp; Frameworks | Node.js and NPM，<code>Node interpreter</code> 这里选择 <code>Add</code> 可以直接添加 WSL 内的 Node.js，NPM 在 <code>\\wsl$\Ubuntu\usr\local\lib\node_modules\npm</code>，Yarn 在 <code>\\wsl$\Ubuntu\usr\local\lib\node_modules\yarn</code></li>
</ol>
<p>这样一来，就可以实现 「Windows 的开发界面，Linux 的开发工具」了。</p>
<hr>
<p>update:</p>
<p>目前发现 Git 的 Commit 功能会报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Commit failed with error</span><br><span class="line">0 file committed, 2 files failed to commit: update theme</span><br><span class="line">could not read log file &#x27;C:UsersedisoAppDataLocalTempgit-commit-msg-.txt&#x27;: No such file or directory</span><br></pre></td></tr></table></figure>

<p>Push 正常。</p>
<p>解决办法：</p>
<ol>
<li>直接在 Terminal 内使用 <code>git commit</code>；</li>
<li>升级到 2020.2 版本（目前是 EAP），但是经测试该版本要求 WSL2 才能正常工作，也就是 Windows 也要升级到 EAP 才行。不推荐。</li>
</ol>
]]></content>
      <tags>
        <tag>nodejs</tag>
        <tag>shell</tag>
        <tag>linux</tag>
        <tag>windows</tag>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>小满</title>
    <url>/2023/xiao-man/</url>
    <content><![CDATA[<p>我和静纯的孩子在 2023 年 5 月 22 日出生，当天并不是小满，而是小满的次日。然而犹豫再三，最后我们还是给孩子取名为“小满”。</p>
<p>“小满”的含义，在于小满，而非大满，满而未盈。我们本打算如果孩子能在小满当日出生就叫他“小满”，却偏偏差了一日。但是转念想想，这一点点偏差，不是刚好对应上了“小满”的内在涵义吗？再者，虽然小满不是在当天出生的，但是妈妈却是在小满那天进的产房，生产过程除了手术室，我基本是全程陪着妈妈，这多少也能代表我们的一点回忆。</p>
<p>另外，除了这个结果以外，生孩子的过程也出现了偏差。但好在最后的结果是好的。孩子目前为止很健康，妈妈也恢复得很好，这样就足够了。这就是我这个小家庭的“小满”。</p>
<span id="more"></span>

<p>最后，放几张孩子的照片吧！</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="/2023/xiao-man/0.jpg"></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="/2023/xiao-man/2.jpg"></div><div class="group-picture-column"><img src="/2023/xiao-man/1.jpg"></div></div></div>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>《芳华》</title>
    <url>/2017/youth/</url>
    <content><![CDATA[<p>我个人非常喜欢冯导的这部电影。</p>
<p>我的理解，这部电影的内容、主题，就跟它的名字一样，芳华。虽然我不是生活在那个年代的人，但是我也许可以理解那些都是什么。电影把一代人最美的形象，最好的年华，最真的梦想，展示给了我们看。相信这一点没有争议，不用过多解释。</p>
<p>至于其它的，我觉得都不重要。</p>
<p>有些人在这个故事里看到的更多是人的「恶」。如林丁丁，如红二代，如政委。认为所谓的「战友情」不过是镜花水月。但是，生活不就是这样的吗？</p>
<p>在电影里面，最终没有任何事情被追究，就连「迫害」了刘峰的林丁丁，最后也能被拿来给受害人打趣，然而我并没有觉得有任何反感之处。</p>
<p>人不就是这样的吗？当你对形势做出了错误的判断，就理应承担造成的后果。认真就输了，可谓一语成谶。既然是自己酿成的错，有什么好追究的呢？</p>
<p>百年以后，没有人会记得这些人当年的那些点点滴滴的琐事，善也好，恶也罢，大概都已经如萧穗子散落的情书一般，仿佛从来就没有存在过。即使是残酷至极的战争，也终究会被人遗忘。</p>
<p>也许能留下来的，也不过存在于现实与记忆中的，一代又一代人的最美的芳华吧。</p>
]]></content>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
</search>
